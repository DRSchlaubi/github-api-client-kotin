/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.BranchRestrictionPolicyUsersInner
import org.openapitools.client.models.IssuePullRequest
import org.openapitools.client.models.Label
import org.openapitools.client.models.User2
import org.openapitools.client.models.WebhookDiscussionCreatedDiscussionAllOfReactions

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
 *
 * @param activeLockReason 
 * @param assignee 
 * @param assignees 
 * @param authorAssociation 
 * @param body 
 * @param closedAt 
 * @param comments 
 * @param commentsUrl 
 * @param createdAt 
 * @param eventsUrl 
 * @param htmlUrl 
 * @param id 
 * @param labels 
 * @param labelsUrl 
 * @param locked 
 * @param milestone 
 * @param nodeId 
 * @param number 
 * @param reactions 
 * @param repositoryUrl 
 * @param state State of the issue; either 'open' or 'closed'
 * @param title 
 * @param updatedAt 
 * @param url 
 * @param user 
 * @param draft 
 * @param performedViaGithubApp 
 * @param pullRequest 
 * @param stateReason 
 * @param timelineUrl 
 */
@Serializable

data class WebhookIssueCommentCreatedIssue (

    @SerialName(value = "active_lock_reason")
    val activeLockReason: kotlin.String?,

    @SerialName(value = "assignee")
    val assignee: User2,

    @SerialName(value = "assignees")
    val assignees: kotlin.collections.List<@Contextual kotlin.Any>,

    @SerialName(value = "author_association")
    val authorAssociation: kotlin.String,

    @SerialName(value = "body")
    val body: kotlin.String?,

    @SerialName(value = "closed_at")
    val closedAt: kotlin.String?,

    @SerialName(value = "comments")
    val comments: kotlin.Int,

    @SerialName(value = "comments_url")
    val commentsUrl: kotlin.String,

    @SerialName(value = "created_at")
    val createdAt: kotlin.String,

    @SerialName(value = "events_url")
    val eventsUrl: kotlin.String,

    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,

    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "labels")
    val labels: kotlin.collections.List<Label>,

    @SerialName(value = "labels_url")
    val labelsUrl: kotlin.String,

    @SerialName(value = "locked")
    val locked: kotlin.Boolean,

    @Contextual @SerialName(value = "milestone")
    val milestone: kotlin.Any?,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    @SerialName(value = "number")
    val number: kotlin.Int,

    @SerialName(value = "reactions")
    val reactions: WebhookDiscussionCreatedDiscussionAllOfReactions,

    @SerialName(value = "repository_url")
    val repositoryUrl: kotlin.String,

    /* State of the issue; either 'open' or 'closed' */
    @SerialName(value = "state")
    val state: WebhookIssueCommentCreatedIssue.State,

    @SerialName(value = "title")
    val title: kotlin.String,

    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,

    @SerialName(value = "url")
    val url: kotlin.String,

    @SerialName(value = "user")
    val user: BranchRestrictionPolicyUsersInner,

    @SerialName(value = "draft")
    val draft: kotlin.Boolean? = null,

    @Contextual @SerialName(value = "performed_via_github_app")
    val performedViaGithubApp: kotlin.Any? = null,

    @SerialName(value = "pull_request")
    val pullRequest: IssuePullRequest? = null,

    @SerialName(value = "state_reason")
    val stateReason: kotlin.String? = null,

    @SerialName(value = "timeline_url")
    val timelineUrl: kotlin.String? = null

) {

    /**
     * State of the issue; either 'open' or 'closed'
     *
     * Values: `open`,closed
     */
    @Serializable
    enum class State(val value: kotlin.String) {
        @SerialName(value = "open") `open`("open"),
        @SerialName(value = "closed") closed("closed");
    }
}


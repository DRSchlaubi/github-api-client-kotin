/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.App1
import org.openapitools.client.models.CheckRunPullRequest
import org.openapitools.client.models.SimpleCommit

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
 *
 * @param after 
 * @param app 
 * @param before 
 * @param checkRunsUrl 
 * @param conclusion The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
 * @param createdAt 
 * @param headBranch The head branch name the changes are on.
 * @param headCommit 
 * @param headSha The SHA of the head commit that is being checked.
 * @param id 
 * @param latestCheckRunsCount 
 * @param nodeId 
 * @param pullRequests An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
 * @param status The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
 * @param updatedAt 
 * @param url URL that points to the check suite API resource.
 * @param rerequestable 
 * @param runsRerequestable 
 */
@Serializable

data class WebhookCheckSuiteRequestedCheckSuite (

    @SerialName(value = "after")
    val after: kotlin.String?,

    @SerialName(value = "app")
    val app: App1,

    @SerialName(value = "before")
    val before: kotlin.String?,

    @Contextual @SerialName(value = "check_runs_url")
    val checkRunsUrl: java.net.URI,

    /* The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed. */
    @SerialName(value = "conclusion")
    val conclusion: WebhookCheckSuiteRequestedCheckSuite.Conclusion?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    /* The head branch name the changes are on. */
    @SerialName(value = "head_branch")
    val headBranch: kotlin.String?,

    @SerialName(value = "head_commit")
    val headCommit: SimpleCommit,

    /* The SHA of the head commit that is being checked. */
    @SerialName(value = "head_sha")
    val headSha: kotlin.String,

    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "latest_check_runs_count")
    val latestCheckRunsCount: kotlin.Int,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    /* An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty. */
    @SerialName(value = "pull_requests")
    val pullRequests: kotlin.collections.List<CheckRunPullRequest>,

    /* The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`. */
    @SerialName(value = "status")
    val status: WebhookCheckSuiteRequestedCheckSuite.Status?,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant,

    /* URL that points to the check suite API resource. */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @SerialName(value = "rerequestable")
    val rerequestable: kotlin.Boolean? = null,

    @SerialName(value = "runs_rerequestable")
    val runsRerequestable: kotlin.Boolean? = null

) {

    /**
     * The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
     *
     * Values: success,failure,neutral,cancelled,timed_out,action_required,stale,`null`,skipped
     */
    @Serializable
    enum class Conclusion(val value: kotlin.String) {
        @SerialName(value = "success") success("success"),
        @SerialName(value = "failure") failure("failure"),
        @SerialName(value = "neutral") neutral("neutral"),
        @SerialName(value = "cancelled") cancelled("cancelled"),
        @SerialName(value = "timed_out") timed_out("timed_out"),
        @SerialName(value = "action_required") action_required("action_required"),
        @SerialName(value = "stale") stale("stale"),
        @SerialName(value = "null") `null`("null"),
        @SerialName(value = "skipped") skipped("skipped");
    }
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     *
     * Values: requested,in_progress,completed,queued,`null`
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "requested") requested("requested"),
        @SerialName(value = "in_progress") in_progress("in_progress"),
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "queued") queued("queued"),
        @SerialName(value = "null") `null`("null");
    }
}


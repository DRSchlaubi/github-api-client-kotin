/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.RuleSuiteRuleEvaluationsInner

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Response
 *
 * @param id The unique identifier of the rule insight.
 * @param actorId The number that identifies the user.
 * @param actorName The handle for the GitHub user account.
 * @param beforeSha The first commit sha before the push evaluation.
 * @param afterSha The last commit sha in the push evaluation.
 * @param ref The ref name that the evaluation ran on.
 * @param repositoryId The ID of the repository associated with the rule evaluation.
 * @param repositoryName The name of the repository without the `.git` extension.
 * @param pushedAt 
 * @param result The result of the rule evaluations for rules with the `active` enforcement status.
 * @param evaluationResult The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
 * @param ruleEvaluations Details on the evaluated rules.
 */
@Serializable

data class RuleSuite (

    /* The unique identifier of the rule insight. */
    @SerialName(value = "id")
    val id: kotlin.Int? = null,

    /* The number that identifies the user. */
    @SerialName(value = "actor_id")
    val actorId: kotlin.Int? = null,

    /* The handle for the GitHub user account. */
    @SerialName(value = "actor_name")
    val actorName: kotlin.String? = null,

    /* The first commit sha before the push evaluation. */
    @SerialName(value = "before_sha")
    val beforeSha: kotlin.String? = null,

    /* The last commit sha in the push evaluation. */
    @SerialName(value = "after_sha")
    val afterSha: kotlin.String? = null,

    /* The ref name that the evaluation ran on. */
    @SerialName(value = "ref")
    val ref: kotlin.String? = null,

    /* The ID of the repository associated with the rule evaluation. */
    @SerialName(value = "repository_id")
    val repositoryId: kotlin.Int? = null,

    /* The name of the repository without the `.git` extension. */
    @SerialName(value = "repository_name")
    val repositoryName: kotlin.String? = null,

    @Contextual @SerialName(value = "pushed_at")
    val pushedAt: kotlinx.datetime.Instant? = null,

    /* The result of the rule evaluations for rules with the `active` enforcement status. */
    @SerialName(value = "result")
    val result: RuleSuite.Result? = null,

    /* The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. */
    @SerialName(value = "evaluation_result")
    val evaluationResult: RuleSuite.EvaluationResult? = null,

    /* Details on the evaluated rules. */
    @SerialName(value = "rule_evaluations")
    val ruleEvaluations: kotlin.collections.List<RuleSuiteRuleEvaluationsInner>? = null

) {

    /**
     * The result of the rule evaluations for rules with the `active` enforcement status.
     *
     * Values: pass,fail,bypass
     */
    @Serializable
    enum class Result(val value: kotlin.String) {
        @SerialName(value = "pass") pass("pass"),
        @SerialName(value = "fail") fail("fail"),
        @SerialName(value = "bypass") bypass("bypass");
    }
    /**
     * The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
     *
     * Values: pass,fail
     */
    @Serializable
    enum class EvaluationResult(val value: kotlin.String) {
        @SerialName(value = "pass") pass("pass"),
        @SerialName(value = "fail") fail("fail");
    }
}


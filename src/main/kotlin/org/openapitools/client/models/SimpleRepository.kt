/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.SimpleUser

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * A GitHub repository.
 *
 * @param id A unique identifier of the repository.
 * @param nodeId The GraphQL identifier of the repository.
 * @param name The name of the repository.
 * @param fullName The full, globally unique, name of the repository.
 * @param owner 
 * @param `private` Whether the repository is private.
 * @param htmlUrl The URL to view the repository on GitHub.com.
 * @param description The repository description.
 * @param fork Whether the repository is a fork.
 * @param url The URL to get more information about the repository from the GitHub API.
 * @param archiveUrl A template for the API URL to download the repository as an archive.
 * @param assigneesUrl A template for the API URL to list the available assignees for issues in the repository.
 * @param blobsUrl A template for the API URL to create or retrieve a raw Git blob in the repository.
 * @param branchesUrl A template for the API URL to get information about branches in the repository.
 * @param collaboratorsUrl A template for the API URL to get information about collaborators of the repository.
 * @param commentsUrl A template for the API URL to get information about comments on the repository.
 * @param commitsUrl A template for the API URL to get information about commits on the repository.
 * @param compareUrl A template for the API URL to compare two commits or refs.
 * @param contentsUrl A template for the API URL to get the contents of the repository.
 * @param contributorsUrl A template for the API URL to list the contributors to the repository.
 * @param deploymentsUrl The API URL to list the deployments of the repository.
 * @param downloadsUrl The API URL to list the downloads on the repository.
 * @param eventsUrl The API URL to list the events of the repository.
 * @param forksUrl The API URL to list the forks of the repository.
 * @param gitCommitsUrl A template for the API URL to get information about Git commits of the repository.
 * @param gitRefsUrl A template for the API URL to get information about Git refs of the repository.
 * @param gitTagsUrl A template for the API URL to get information about Git tags of the repository.
 * @param issueCommentUrl A template for the API URL to get information about issue comments on the repository.
 * @param issueEventsUrl A template for the API URL to get information about issue events on the repository.
 * @param issuesUrl A template for the API URL to get information about issues on the repository.
 * @param keysUrl A template for the API URL to get information about deploy keys on the repository.
 * @param labelsUrl A template for the API URL to get information about labels of the repository.
 * @param languagesUrl The API URL to get information about the languages of the repository.
 * @param mergesUrl The API URL to merge branches in the repository.
 * @param milestonesUrl A template for the API URL to get information about milestones of the repository.
 * @param notificationsUrl A template for the API URL to get information about notifications on the repository.
 * @param pullsUrl A template for the API URL to get information about pull requests on the repository.
 * @param releasesUrl A template for the API URL to get information about releases on the repository.
 * @param stargazersUrl The API URL to list the stargazers on the repository.
 * @param statusesUrl A template for the API URL to get information about statuses of a commit.
 * @param subscribersUrl The API URL to list the subscribers on the repository.
 * @param subscriptionUrl The API URL to subscribe to notifications for this repository.
 * @param tagsUrl The API URL to get information about tags on the repository.
 * @param teamsUrl The API URL to list the teams on the repository.
 * @param treesUrl A template for the API URL to create or retrieve a raw Git tree of the repository.
 * @param hooksUrl The API URL to list the hooks on the repository.
 */
@Serializable

data class SimpleRepository (

    /* A unique identifier of the repository. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    /* The GraphQL identifier of the repository. */
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    /* The name of the repository. */
    @SerialName(value = "name")
    val name: kotlin.String,

    /* The full, globally unique, name of the repository. */
    @SerialName(value = "full_name")
    val fullName: kotlin.String,

    @SerialName(value = "owner")
    val owner: SimpleUser,

    /* Whether the repository is private. */
    @SerialName(value = "private")
    val `private`: kotlin.Boolean,

    /* The URL to view the repository on GitHub.com. */
    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI,

    /* The repository description. */
    @SerialName(value = "description")
    val description: kotlin.String?,

    /* Whether the repository is a fork. */
    @SerialName(value = "fork")
    val fork: kotlin.Boolean,

    /* The URL to get more information about the repository from the GitHub API. */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    /* A template for the API URL to download the repository as an archive. */
    @SerialName(value = "archive_url")
    val archiveUrl: kotlin.String,

    /* A template for the API URL to list the available assignees for issues in the repository. */
    @SerialName(value = "assignees_url")
    val assigneesUrl: kotlin.String,

    /* A template for the API URL to create or retrieve a raw Git blob in the repository. */
    @SerialName(value = "blobs_url")
    val blobsUrl: kotlin.String,

    /* A template for the API URL to get information about branches in the repository. */
    @SerialName(value = "branches_url")
    val branchesUrl: kotlin.String,

    /* A template for the API URL to get information about collaborators of the repository. */
    @SerialName(value = "collaborators_url")
    val collaboratorsUrl: kotlin.String,

    /* A template for the API URL to get information about comments on the repository. */
    @SerialName(value = "comments_url")
    val commentsUrl: kotlin.String,

    /* A template for the API URL to get information about commits on the repository. */
    @SerialName(value = "commits_url")
    val commitsUrl: kotlin.String,

    /* A template for the API URL to compare two commits or refs. */
    @SerialName(value = "compare_url")
    val compareUrl: kotlin.String,

    /* A template for the API URL to get the contents of the repository. */
    @SerialName(value = "contents_url")
    val contentsUrl: kotlin.String,

    /* A template for the API URL to list the contributors to the repository. */
    @Contextual @SerialName(value = "contributors_url")
    val contributorsUrl: java.net.URI,

    /* The API URL to list the deployments of the repository. */
    @Contextual @SerialName(value = "deployments_url")
    val deploymentsUrl: java.net.URI,

    /* The API URL to list the downloads on the repository. */
    @Contextual @SerialName(value = "downloads_url")
    val downloadsUrl: java.net.URI,

    /* The API URL to list the events of the repository. */
    @Contextual @SerialName(value = "events_url")
    val eventsUrl: java.net.URI,

    /* The API URL to list the forks of the repository. */
    @Contextual @SerialName(value = "forks_url")
    val forksUrl: java.net.URI,

    /* A template for the API URL to get information about Git commits of the repository. */
    @SerialName(value = "git_commits_url")
    val gitCommitsUrl: kotlin.String,

    /* A template for the API URL to get information about Git refs of the repository. */
    @SerialName(value = "git_refs_url")
    val gitRefsUrl: kotlin.String,

    /* A template for the API URL to get information about Git tags of the repository. */
    @SerialName(value = "git_tags_url")
    val gitTagsUrl: kotlin.String,

    /* A template for the API URL to get information about issue comments on the repository. */
    @SerialName(value = "issue_comment_url")
    val issueCommentUrl: kotlin.String,

    /* A template for the API URL to get information about issue events on the repository. */
    @SerialName(value = "issue_events_url")
    val issueEventsUrl: kotlin.String,

    /* A template for the API URL to get information about issues on the repository. */
    @SerialName(value = "issues_url")
    val issuesUrl: kotlin.String,

    /* A template for the API URL to get information about deploy keys on the repository. */
    @SerialName(value = "keys_url")
    val keysUrl: kotlin.String,

    /* A template for the API URL to get information about labels of the repository. */
    @SerialName(value = "labels_url")
    val labelsUrl: kotlin.String,

    /* The API URL to get information about the languages of the repository. */
    @Contextual @SerialName(value = "languages_url")
    val languagesUrl: java.net.URI,

    /* The API URL to merge branches in the repository. */
    @Contextual @SerialName(value = "merges_url")
    val mergesUrl: java.net.URI,

    /* A template for the API URL to get information about milestones of the repository. */
    @SerialName(value = "milestones_url")
    val milestonesUrl: kotlin.String,

    /* A template for the API URL to get information about notifications on the repository. */
    @SerialName(value = "notifications_url")
    val notificationsUrl: kotlin.String,

    /* A template for the API URL to get information about pull requests on the repository. */
    @SerialName(value = "pulls_url")
    val pullsUrl: kotlin.String,

    /* A template for the API URL to get information about releases on the repository. */
    @SerialName(value = "releases_url")
    val releasesUrl: kotlin.String,

    /* The API URL to list the stargazers on the repository. */
    @Contextual @SerialName(value = "stargazers_url")
    val stargazersUrl: java.net.URI,

    /* A template for the API URL to get information about statuses of a commit. */
    @SerialName(value = "statuses_url")
    val statusesUrl: kotlin.String,

    /* The API URL to list the subscribers on the repository. */
    @Contextual @SerialName(value = "subscribers_url")
    val subscribersUrl: java.net.URI,

    /* The API URL to subscribe to notifications for this repository. */
    @Contextual @SerialName(value = "subscription_url")
    val subscriptionUrl: java.net.URI,

    /* The API URL to get information about tags on the repository. */
    @Contextual @SerialName(value = "tags_url")
    val tagsUrl: java.net.URI,

    /* The API URL to list the teams on the repository. */
    @Contextual @SerialName(value = "teams_url")
    val teamsUrl: java.net.URI,

    /* A template for the API URL to create or retrieve a raw Git tree of the repository. */
    @SerialName(value = "trees_url")
    val treesUrl: kotlin.String,

    /* The API URL to list the hooks on the repository. */
    @Contextual @SerialName(value = "hooks_url")
    val hooksUrl: java.net.URI

)


/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.IssuesCreateRequestLabelsInner
import org.openapitools.client.models.IssuesCreateRequestTitle
import org.openapitools.client.models.IssuesUpdateRequestMilestone

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param title 
 * @param body The contents of the issue.
 * @param assignee Username to assign to this issue. **This field is deprecated.**
 * @param state The open or closed state of the issue.
 * @param stateReason The reason for the state change. Ignored unless `state` is changed.
 * @param milestone 
 * @param labels Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
 * @param assignees Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
 */
@Serializable

data class IssuesUpdateRequest (

    @SerialName(value = "title")
    val title: IssuesCreateRequestTitle? = null,

    /* The contents of the issue. */
    @SerialName(value = "body")
    val body: kotlin.String? = null,

    /* Username to assign to this issue. **This field is deprecated.** */
    @SerialName(value = "assignee")
    val assignee: kotlin.String? = null,

    /* The open or closed state of the issue. */
    @SerialName(value = "state")
    val state: IssuesUpdateRequest.State? = null,

    /* The reason for the state change. Ignored unless `state` is changed. */
    @SerialName(value = "state_reason")
    val stateReason: IssuesUpdateRequest.StateReason? = null,

    @SerialName(value = "milestone")
    val milestone: IssuesUpdateRequestMilestone? = null,

    /* Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */
    @SerialName(value = "labels")
    val labels: kotlin.collections.List<IssuesCreateRequestLabelsInner>? = null,

    /* Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */
    @SerialName(value = "assignees")
    val assignees: kotlin.collections.List<kotlin.String>? = null

) {

    /**
     * The open or closed state of the issue.
     *
     * Values: `open`,closed
     */
    @Serializable
    enum class State(val value: kotlin.String) {
        @SerialName(value = "open") `open`("open"),
        @SerialName(value = "closed") closed("closed");
    }
    /**
     * The reason for the state change. Ignored unless `state` is changed.
     *
     * Values: completed,not_planned,reopened,`null`
     */
    @Serializable
    enum class StateReason(val value: kotlin.String) {
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "not_planned") not_planned("not_planned"),
        @SerialName(value = "reopened") reopened("reopened"),
        @SerialName(value = "null") `null`("null");
    }
}


/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AuthorAssociation
import org.openapitools.client.models.IntegrationOwner
import org.openapitools.client.models.IssueEventDismissedReview
import org.openapitools.client.models.IssueEventIssue
import org.openapitools.client.models.IssueEventLabel
import org.openapitools.client.models.IssueEventMilestone
import org.openapitools.client.models.IssueEventProjectCard
import org.openapitools.client.models.IssueEventRename
import org.openapitools.client.models.IssuePerformedViaGithubApp
import org.openapitools.client.models.Team

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Issue Event
 *
 * @param id 
 * @param nodeId 
 * @param url 
 * @param actor 
 * @param event 
 * @param commitId 
 * @param commitUrl 
 * @param createdAt 
 * @param issue 
 * @param label 
 * @param assignee 
 * @param assigner 
 * @param reviewRequester 
 * @param requestedReviewer 
 * @param requestedTeam 
 * @param dismissedReview 
 * @param milestone 
 * @param projectCard 
 * @param rename 
 * @param authorAssociation 
 * @param lockReason 
 * @param performedViaGithubApp 
 */
@Serializable

data class IssueEvent (

    @SerialName(value = "id")
    val id: kotlin.Long,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @SerialName(value = "actor")
    val actor: IntegrationOwner,

    @SerialName(value = "event")
    val event: kotlin.String,

    @SerialName(value = "commit_id")
    val commitId: kotlin.String?,

    @SerialName(value = "commit_url")
    val commitUrl: kotlin.String?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    @SerialName(value = "issue")
    val issue: IssueEventIssue? = null,

    @SerialName(value = "label")
    val label: IssueEventLabel? = null,

    @SerialName(value = "assignee")
    val assignee: IntegrationOwner? = null,

    @SerialName(value = "assigner")
    val assigner: IntegrationOwner? = null,

    @SerialName(value = "review_requester")
    val reviewRequester: IntegrationOwner? = null,

    @SerialName(value = "requested_reviewer")
    val requestedReviewer: IntegrationOwner? = null,

    @SerialName(value = "requested_team")
    val requestedTeam: Team? = null,

    @SerialName(value = "dismissed_review")
    val dismissedReview: IssueEventDismissedReview? = null,

    @SerialName(value = "milestone")
    val milestone: IssueEventMilestone? = null,

    @SerialName(value = "project_card")
    val projectCard: IssueEventProjectCard? = null,

    @SerialName(value = "rename")
    val rename: IssueEventRename? = null,

    @Contextual @SerialName(value = "author_association")
    val authorAssociation: AuthorAssociation? = null,

    @SerialName(value = "lock_reason")
    val lockReason: kotlin.String? = null,

    @SerialName(value = "performed_via_github_app")
    val performedViaGithubApp: IssuePerformedViaGithubApp? = null

)


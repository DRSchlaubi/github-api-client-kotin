/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Reactions
import org.openapitools.client.models.User

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
 *
 * @param authorAssociation How the author is associated with the repository.
 * @param body The text of the comment.
 * @param commitId The SHA of the commit to which the comment applies.
 * @param createdAt 
 * @param htmlUrl 
 * @param id The ID of the commit comment.
 * @param line The line of the blob to which the comment applies. The last line of the range for a multi-line comment
 * @param nodeId The node ID of the commit comment.
 * @param path The relative path of the file to which the comment applies.
 * @param position The line index in the diff to which the comment applies.
 * @param updatedAt 
 * @param url 
 * @param user 
 * @param reactions 
 */
@Serializable

data class WebhookCommitCommentCreatedComment (

    /* How the author is associated with the repository. */
    @SerialName(value = "author_association")
    val authorAssociation: WebhookCommitCommentCreatedComment.AuthorAssociation,

    /* The text of the comment. */
    @SerialName(value = "body")
    val body: kotlin.String,

    /* The SHA of the commit to which the comment applies. */
    @SerialName(value = "commit_id")
    val commitId: kotlin.String,

    @SerialName(value = "created_at")
    val createdAt: kotlin.String,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI,

    /* The ID of the commit comment. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    /* The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
    @SerialName(value = "line")
    val line: kotlin.Int?,

    /* The node ID of the commit comment. */
    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    /* The relative path of the file to which the comment applies. */
    @SerialName(value = "path")
    val path: kotlin.String?,

    /* The line index in the diff to which the comment applies. */
    @SerialName(value = "position")
    val position: kotlin.Int?,

    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,

    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @SerialName(value = "user")
    val user: User,

    @SerialName(value = "reactions")
    val reactions: Reactions? = null

) {

    /**
     * How the author is associated with the repository.
     *
     * Values: COLLABORATOR,CONTRIBUTOR,FIRST_TIMER,FIRST_TIME_CONTRIBUTOR,MANNEQUIN,MEMBER,NONE,OWNER
     */
    @Serializable
    enum class AuthorAssociation(val value: kotlin.String) {
        @SerialName(value = "COLLABORATOR") COLLABORATOR("COLLABORATOR"),
        @SerialName(value = "CONTRIBUTOR") CONTRIBUTOR("CONTRIBUTOR"),
        @SerialName(value = "FIRST_TIMER") FIRST_TIMER("FIRST_TIMER"),
        @SerialName(value = "FIRST_TIME_CONTRIBUTOR") FIRST_TIME_CONTRIBUTOR("FIRST_TIME_CONTRIBUTOR"),
        @SerialName(value = "MANNEQUIN") MANNEQUIN("MANNEQUIN"),
        @SerialName(value = "MEMBER") MEMBER("MEMBER"),
        @SerialName(value = "NONE") NONE("NONE"),
        @SerialName(value = "OWNER") OWNER("OWNER");
    }
}


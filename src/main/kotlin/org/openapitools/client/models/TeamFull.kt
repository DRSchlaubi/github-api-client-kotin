/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.TeamOrganization
import org.openapitools.client.models.TeamParent

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Groups of organization members that gives permissions on specified repositories.
 *
 * @param id Unique identifier of the team
 * @param nodeId 
 * @param url URL for the team
 * @param htmlUrl 
 * @param name Name of the team
 * @param slug 
 * @param description 
 * @param permission Permission that the team will have for its repositories
 * @param membersUrl 
 * @param repositoriesUrl 
 * @param membersCount 
 * @param reposCount 
 * @param createdAt 
 * @param updatedAt 
 * @param organization 
 * @param privacy The level of privacy this team should have
 * @param notificationSetting The notification setting the team has set
 * @param parent 
 * @param ldapDn Distinguished Name (DN) that team maps to within LDAP environment
 */
@Serializable

data class TeamFull (

    /* Unique identifier of the team */
    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    /* URL for the team */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI,

    /* Name of the team */
    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "slug")
    val slug: kotlin.String,

    @SerialName(value = "description")
    val description: kotlin.String?,

    /* Permission that the team will have for its repositories */
    @SerialName(value = "permission")
    val permission: kotlin.String,

    @SerialName(value = "members_url")
    val membersUrl: kotlin.String,

    @Contextual @SerialName(value = "repositories_url")
    val repositoriesUrl: java.net.URI,

    @SerialName(value = "members_count")
    val membersCount: kotlin.Int,

    @SerialName(value = "repos_count")
    val reposCount: kotlin.Int,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant,

    @SerialName(value = "organization")
    val organization: TeamOrganization,

    /* The level of privacy this team should have */
    @SerialName(value = "privacy")
    val privacy: TeamFull.Privacy? = null,

    /* The notification setting the team has set */
    @SerialName(value = "notification_setting")
    val notificationSetting: TeamFull.NotificationSetting? = null,

    @SerialName(value = "parent")
    val parent: TeamParent? = null,

    /* Distinguished Name (DN) that team maps to within LDAP environment */
    @SerialName(value = "ldap_dn")
    val ldapDn: kotlin.String? = null

) {

    /**
     * The level of privacy this team should have
     *
     * Values: closed,secret
     */
    @Serializable
    enum class Privacy(val value: kotlin.String) {
        @SerialName(value = "closed") closed("closed"),
        @SerialName(value = "secret") secret("secret");
    }
    /**
     * The notification setting the team has set
     *
     * Values: enabled,disabled
     */
    @Serializable
    enum class NotificationSetting(val value: kotlin.String) {
        @SerialName(value = "notifications_enabled") enabled("notifications_enabled"),
        @SerialName(value = "notifications_disabled") disabled("notifications_disabled");
    }
}


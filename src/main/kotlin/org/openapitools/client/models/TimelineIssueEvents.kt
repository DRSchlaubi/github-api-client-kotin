/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AddedToProjectIssueEvent
import org.openapitools.client.models.AddedToProjectIssueEventProjectCard
import org.openapitools.client.models.AuthorAssociation
import org.openapitools.client.models.ConvertedNoteToIssueIssueEvent
import org.openapitools.client.models.DemilestonedIssueEvent
import org.openapitools.client.models.GitCommitAuthor
import org.openapitools.client.models.GitCommitTree
import org.openapitools.client.models.GitCommitVerification
import org.openapitools.client.models.IssuePerformedViaGithubApp
import org.openapitools.client.models.LabeledIssueEvent
import org.openapitools.client.models.LabeledIssueEventLabel
import org.openapitools.client.models.LockedIssueEvent
import org.openapitools.client.models.MilestonedIssueEvent
import org.openapitools.client.models.MilestonedIssueEventMilestone
import org.openapitools.client.models.MovedColumnInProjectIssueEvent
import org.openapitools.client.models.ReactionRollup
import org.openapitools.client.models.RemovedFromProjectIssueEvent
import org.openapitools.client.models.RenamedIssueEvent
import org.openapitools.client.models.RenamedIssueEventRename
import org.openapitools.client.models.ReviewDismissedIssueEvent
import org.openapitools.client.models.ReviewDismissedIssueEventDismissedReview
import org.openapitools.client.models.ReviewRequestRemovedIssueEvent
import org.openapitools.client.models.ReviewRequestedIssueEvent
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.StateChangeIssueEvent
import org.openapitools.client.models.Team
import org.openapitools.client.models.TimelineAssignedIssueEvent
import org.openapitools.client.models.TimelineCommentEvent
import org.openapitools.client.models.TimelineCommitCommentedEvent
import org.openapitools.client.models.TimelineCommittedEvent
import org.openapitools.client.models.TimelineCrossReferencedEvent
import org.openapitools.client.models.TimelineCrossReferencedEventSource
import org.openapitools.client.models.TimelineLineCommentedEvent
import org.openapitools.client.models.TimelineReviewedEvent
import org.openapitools.client.models.TimelineReviewedEventLinks
import org.openapitools.client.models.TimelineUnassignedIssueEvent
import org.openapitools.client.models.UnlabeledIssueEvent

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Timeline Event
 *
 * @param id 
 * @param nodeId 
 * @param url 
 * @param actor 
 * @param event 
 * @param commitId 
 * @param commitUrl 
 * @param createdAt 
 * @param performedViaGithubApp 
 * @param label 
 * @param milestone 
 * @param rename 
 * @param reviewRequester 
 * @param dismissedReview 
 * @param lockReason 
 * @param body The text of the review.
 * @param htmlUrl 
 * @param user 
 * @param updatedAt 
 * @param issueUrl 
 * @param authorAssociation 
 * @param source 
 * @param sha SHA for the commit
 * @param author 
 * @param committer 
 * @param message Message describing the purpose of the commit
 * @param tree 
 * @param parents 
 * @param verification 
 * @param state 
 * @param pullRequestUrl 
 * @param links 
 * @param assignee 
 * @param requestedTeam 
 * @param requestedReviewer 
 * @param projectCard 
 * @param bodyText 
 * @param bodyHtml 
 * @param reactions 
 * @param submittedAt 
 * @param comments 
 * @param stateReason 
 */
@Serializable

data class TimelineIssueEvents (

    @Contextual @SerialName(value = "id")
    val id: kotlin.Any?,

    @Contextual @SerialName(value = "node_id")
    val nodeId: kotlin.Any?,

    @Contextual @SerialName(value = "url")
    val url: kotlin.Any?,

    @SerialName(value = "actor")
    val actor: SimpleUser,

    @Contextual @SerialName(value = "event")
    val event: kotlin.Any?,

    @Contextual @SerialName(value = "commit_id")
    val commitId: kotlin.Any?,

    @Contextual @SerialName(value = "commit_url")
    val commitUrl: kotlin.Any?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlin.Any?,

    @SerialName(value = "performed_via_github_app")
    val performedViaGithubApp: IssuePerformedViaGithubApp,

    @SerialName(value = "label")
    val label: LabeledIssueEventLabel,

    @SerialName(value = "milestone")
    val milestone: MilestonedIssueEventMilestone,

    @SerialName(value = "rename")
    val rename: RenamedIssueEventRename,

    @SerialName(value = "review_requester")
    val reviewRequester: SimpleUser,

    @SerialName(value = "dismissed_review")
    val dismissedReview: ReviewDismissedIssueEventDismissedReview,

    @Contextual @SerialName(value = "lock_reason")
    val lockReason: kotlin.Any?,

    /* The text of the review. */
    @Contextual @SerialName(value = "body")
    val body: kotlin.Any?,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: kotlin.Any?,

    @SerialName(value = "user")
    val user: SimpleUser,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlin.Any?,

    @Contextual @SerialName(value = "issue_url")
    val issueUrl: kotlin.Any?,

    @Contextual @SerialName(value = "author_association")
    val authorAssociation: AuthorAssociation,

    @SerialName(value = "source")
    val source: TimelineCrossReferencedEventSource,

    /* SHA for the commit */
    @Contextual @SerialName(value = "sha")
    val sha: kotlin.Any?,

    @SerialName(value = "author")
    val author: GitCommitAuthor,

    @SerialName(value = "committer")
    val committer: GitCommitAuthor,

    /* Message describing the purpose of the commit */
    @Contextual @SerialName(value = "message")
    val message: kotlin.Any?,

    @SerialName(value = "tree")
    val tree: GitCommitTree,

    @Contextual @SerialName(value = "parents")
    val parents: kotlin.Any?,

    @SerialName(value = "verification")
    val verification: GitCommitVerification,

    @Contextual @SerialName(value = "state")
    val state: kotlin.Any?,

    @Contextual @SerialName(value = "pull_request_url")
    val pullRequestUrl: kotlin.Any?,

    @SerialName(value = "_links")
    val links: TimelineReviewedEventLinks,

    @SerialName(value = "assignee")
    val assignee: SimpleUser,

    @SerialName(value = "requested_team")
    val requestedTeam: Team? = null,

    @SerialName(value = "requested_reviewer")
    val requestedReviewer: SimpleUser? = null,

    @SerialName(value = "project_card")
    val projectCard: AddedToProjectIssueEventProjectCard? = null,

    @Contextual @SerialName(value = "body_text")
    val bodyText: kotlin.Any? = null,

    @Contextual @SerialName(value = "body_html")
    val bodyHtml: kotlin.Any? = null,

    @SerialName(value = "reactions")
    val reactions: ReactionRollup? = null,

    @Contextual @SerialName(value = "submitted_at")
    val submittedAt: kotlin.Any? = null,

    @Contextual @SerialName(value = "comments")
    val comments: kotlin.Any? = null,

    @Contextual @SerialName(value = "state_reason")
    val stateReason: kotlin.Any? = null

)


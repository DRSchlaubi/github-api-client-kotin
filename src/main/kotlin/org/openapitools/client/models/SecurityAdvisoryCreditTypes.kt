/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The type of credit the user is receiving.
 *
 * Values: analyst,finder,reporter,coordinator,remediation_developer,remediation_reviewer,remediation_verifier,tool,sponsor,other
 */
@Serializable
enum class SecurityAdvisoryCreditTypes(val value: kotlin.String) {

    @SerialName(value = "analyst")
    analyst("analyst"),

    @SerialName(value = "finder")
    finder("finder"),

    @SerialName(value = "reporter")
    reporter("reporter"),

    @SerialName(value = "coordinator")
    coordinator("coordinator"),

    @SerialName(value = "remediation_developer")
    remediation_developer("remediation_developer"),

    @SerialName(value = "remediation_reviewer")
    remediation_reviewer("remediation_reviewer"),

    @SerialName(value = "remediation_verifier")
    remediation_verifier("remediation_verifier"),

    @SerialName(value = "tool")
    tool("tool"),

    @SerialName(value = "sponsor")
    sponsor("sponsor"),

    @SerialName(value = "other")
    other("other");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SecurityAdvisoryCreditTypes) "$data" else null

        /**
         * Returns a valid [SecurityAdvisoryCreditTypes] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SecurityAdvisoryCreditTypes? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}


/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.JobStepsInner

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Information of a job execution in a workflow run
 *
 * @param id The id of the job.
 * @param runId The id of the associated workflow run.
 * @param runUrl 
 * @param nodeId 
 * @param headSha The SHA of the commit that is being run.
 * @param url 
 * @param htmlUrl 
 * @param status The phase of the lifecycle that the job is currently in.
 * @param conclusion The outcome of the job.
 * @param createdAt The time that the job created, in ISO 8601 format.
 * @param startedAt The time that the job started, in ISO 8601 format.
 * @param completedAt The time that the job finished, in ISO 8601 format.
 * @param name The name of the job.
 * @param checkRunUrl 
 * @param labels Labels for the workflow job. Specified by the \"runs_on\" attribute in the action's workflow file.
 * @param runnerId The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
 * @param runnerName The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
 * @param runnerGroupId The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
 * @param runnerGroupName The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
 * @param workflowName The name of the workflow.
 * @param headBranch The name of the current branch.
 * @param runAttempt Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
 * @param steps Steps in this job.
 */
@Serializable

data class Job (

    /* The id of the job. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    /* The id of the associated workflow run. */
    @SerialName(value = "run_id")
    val runId: kotlin.Int,

    @SerialName(value = "run_url")
    val runUrl: kotlin.String,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    /* The SHA of the commit that is being run. */
    @SerialName(value = "head_sha")
    val headSha: kotlin.String,

    @SerialName(value = "url")
    val url: kotlin.String,

    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String?,

    /* The phase of the lifecycle that the job is currently in. */
    @SerialName(value = "status")
    val status: Job.Status,

    /* The outcome of the job. */
    @SerialName(value = "conclusion")
    val conclusion: Job.Conclusion?,

    /* The time that the job created, in ISO 8601 format. */
    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    /* The time that the job started, in ISO 8601 format. */
    @Contextual @SerialName(value = "started_at")
    val startedAt: kotlinx.datetime.Instant,

    /* The time that the job finished, in ISO 8601 format. */
    @Contextual @SerialName(value = "completed_at")
    val completedAt: kotlinx.datetime.Instant?,

    /* The name of the job. */
    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "check_run_url")
    val checkRunUrl: kotlin.String,

    /* Labels for the workflow job. Specified by the \"runs_on\" attribute in the action's workflow file. */
    @SerialName(value = "labels")
    val labels: kotlin.collections.List<kotlin.String>,

    /* The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    @SerialName(value = "runner_id")
    val runnerId: kotlin.Int?,

    /* The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    @SerialName(value = "runner_name")
    val runnerName: kotlin.String?,

    /* The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    @SerialName(value = "runner_group_id")
    val runnerGroupId: kotlin.Int?,

    /* The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.) */
    @SerialName(value = "runner_group_name")
    val runnerGroupName: kotlin.String?,

    /* The name of the workflow. */
    @SerialName(value = "workflow_name")
    val workflowName: kotlin.String?,

    /* The name of the current branch. */
    @SerialName(value = "head_branch")
    val headBranch: kotlin.String?,

    /* Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
    @SerialName(value = "run_attempt")
    val runAttempt: kotlin.Int? = null,

    /* Steps in this job. */
    @SerialName(value = "steps")
    val steps: kotlin.collections.List<JobStepsInner>? = null

) {

    /**
     * The phase of the lifecycle that the job is currently in.
     *
     * Values: queued,in_progress,completed,waiting,requested,pending
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "queued") queued("queued"),
        @SerialName(value = "in_progress") in_progress("in_progress"),
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "waiting") waiting("waiting"),
        @SerialName(value = "requested") requested("requested"),
        @SerialName(value = "pending") pending("pending");
    }
    /**
     * The outcome of the job.
     *
     * Values: success,failure,neutral,cancelled,skipped,timed_out,action_required,`null`
     */
    @Serializable
    enum class Conclusion(val value: kotlin.String) {
        @SerialName(value = "success") success("success"),
        @SerialName(value = "failure") failure("failure"),
        @SerialName(value = "neutral") neutral("neutral"),
        @SerialName(value = "cancelled") cancelled("cancelled"),
        @SerialName(value = "skipped") skipped("skipped"),
        @SerialName(value = "timed_out") timed_out("timed_out"),
        @SerialName(value = "action_required") action_required("action_required"),
        @SerialName(value = "null") `null`("null");
    }
}


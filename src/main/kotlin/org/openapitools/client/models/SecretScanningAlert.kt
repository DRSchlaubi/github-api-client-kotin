/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.IntegrationOwner
import org.openapitools.client.models.OrganizationSecretScanningAlertUpdatedAt
import org.openapitools.client.models.SecretScanningAlertResolution
import org.openapitools.client.models.SecretScanningAlertState

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param number The security alert number.
 * @param createdAt The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @param updatedAt 
 * @param url The REST API URL of the alert resource.
 * @param htmlUrl The GitHub URL of the alert resource.
 * @param locationsUrl The REST API URL of the code locations for this alert.
 * @param state 
 * @param resolution 
 * @param resolvedAt The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @param resolvedBy 
 * @param resolutionComment An optional comment to resolve an alert.
 * @param secretType The type of secret that secret scanning detected.
 * @param secretTypeDisplayName User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\"
 * @param secret The secret that was detected.
 * @param pushProtectionBypassed Whether push protection was bypassed for the detected secret.
 * @param pushProtectionBypassedBy 
 * @param pushProtectionBypassedAt The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @param validity The token status as of the latest validity check.
 */
@Serializable

data class SecretScanningAlert (

    /* The security alert number. */
    @SerialName(value = "number")
    val number: kotlin.Int? = null,

    /* The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "updated_at")
    val updatedAt: OrganizationSecretScanningAlertUpdatedAt? = null,

    /* The REST API URL of the alert resource. */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI? = null,

    /* The GitHub URL of the alert resource. */
    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI? = null,

    /* The REST API URL of the code locations for this alert. */
    @Contextual @SerialName(value = "locations_url")
    val locationsUrl: java.net.URI? = null,

    @Contextual @SerialName(value = "state")
    val state: SecretScanningAlertState? = null,

    @Contextual @SerialName(value = "resolution")
    val resolution: SecretScanningAlertResolution? = null,

    /* The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    @Contextual @SerialName(value = "resolved_at")
    val resolvedAt: kotlinx.datetime.Instant? = null,

    @SerialName(value = "resolved_by")
    val resolvedBy: IntegrationOwner? = null,

    /* An optional comment to resolve an alert. */
    @SerialName(value = "resolution_comment")
    val resolutionComment: kotlin.String? = null,

    /* The type of secret that secret scanning detected. */
    @SerialName(value = "secret_type")
    val secretType: kotlin.String? = null,

    /* User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security).\" */
    @SerialName(value = "secret_type_display_name")
    val secretTypeDisplayName: kotlin.String? = null,

    /* The secret that was detected. */
    @SerialName(value = "secret")
    val secret: kotlin.String? = null,

    /* Whether push protection was bypassed for the detected secret. */
    @SerialName(value = "push_protection_bypassed")
    val pushProtectionBypassed: kotlin.Boolean? = null,

    @SerialName(value = "push_protection_bypassed_by")
    val pushProtectionBypassedBy: IntegrationOwner? = null,

    /* The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    @Contextual @SerialName(value = "push_protection_bypassed_at")
    val pushProtectionBypassedAt: kotlinx.datetime.Instant? = null,

    /* The token status as of the latest validity check. */
    @SerialName(value = "validity")
    val validity: SecretScanningAlert.Validity? = null

) {

    /**
     * The token status as of the latest validity check.
     *
     * Values: active,inactive,unknown
     */
    @Serializable
    enum class Validity(val value: kotlin.String) {
        @SerialName(value = "active") active("active"),
        @SerialName(value = "inactive") inactive("inactive"),
        @SerialName(value = "unknown") unknown("unknown");
    }
}


/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CheckRunOutput
import org.openapitools.client.models.DeploymentSimple
import org.openapitools.client.models.IssuePerformedViaGithubApp
import org.openapitools.client.models.PullRequestMinimal
import org.openapitools.client.models.SimpleCheckSuite

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * A check performed on the code of a given code change
 *
 * @param app 
 * @param checkSuite 
 * @param completedAt 
 * @param conclusion 
 * @param detailsUrl 
 * @param externalId 
 * @param headSha The SHA of the commit that is being checked.
 * @param htmlUrl 
 * @param id The id of the check.
 * @param name The name of the check.
 * @param nodeId 
 * @param output 
 * @param pullRequests 
 * @param startedAt 
 * @param status The phase of the lifecycle that the check is currently in.
 * @param url 
 * @param deployment 
 */
@Serializable

data class CheckRunWithSimpleCheckSuite (

    @SerialName(value = "app")
    val app: IssuePerformedViaGithubApp,

    @SerialName(value = "check_suite")
    val checkSuite: SimpleCheckSuite,

    @Contextual @SerialName(value = "completed_at")
    val completedAt: kotlinx.datetime.Instant?,

    @SerialName(value = "conclusion")
    val conclusion: CheckRunWithSimpleCheckSuite.Conclusion?,

    @SerialName(value = "details_url")
    val detailsUrl: kotlin.String,

    @SerialName(value = "external_id")
    val externalId: kotlin.String,

    /* The SHA of the commit that is being checked. */
    @SerialName(value = "head_sha")
    val headSha: kotlin.String,

    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,

    /* The id of the check. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    /* The name of the check. */
    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    @SerialName(value = "output")
    val output: CheckRunOutput,

    @SerialName(value = "pull_requests")
    val pullRequests: kotlin.collections.List<PullRequestMinimal>,

    @Contextual @SerialName(value = "started_at")
    val startedAt: kotlinx.datetime.Instant,

    /* The phase of the lifecycle that the check is currently in. */
    @SerialName(value = "status")
    val status: CheckRunWithSimpleCheckSuite.Status,

    @SerialName(value = "url")
    val url: kotlin.String,

    @SerialName(value = "deployment")
    val deployment: DeploymentSimple? = null

) {

    /**
     * 
     *
     * Values: waiting,pending,startup_failure,stale,success,failure,neutral,cancelled,skipped,timed_out,action_required,`null`
     */
    @Serializable
    enum class Conclusion(val value: kotlin.String) {
        @SerialName(value = "waiting") waiting("waiting"),
        @SerialName(value = "pending") pending("pending"),
        @SerialName(value = "startup_failure") startup_failure("startup_failure"),
        @SerialName(value = "stale") stale("stale"),
        @SerialName(value = "success") success("success"),
        @SerialName(value = "failure") failure("failure"),
        @SerialName(value = "neutral") neutral("neutral"),
        @SerialName(value = "cancelled") cancelled("cancelled"),
        @SerialName(value = "skipped") skipped("skipped"),
        @SerialName(value = "timed_out") timed_out("timed_out"),
        @SerialName(value = "action_required") action_required("action_required"),
        @SerialName(value = "null") `null`("null");
    }
    /**
     * The phase of the lifecycle that the check is currently in.
     *
     * Values: queued,in_progress,completed,pending
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "queued") queued("queued"),
        @SerialName(value = "in_progress") in_progress("in_progress"),
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "pending") pending("pending");
    }
}


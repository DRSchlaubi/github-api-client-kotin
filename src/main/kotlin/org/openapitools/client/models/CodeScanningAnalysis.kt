/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CodeScanningAnalysisTool

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param ref The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`, `refs/heads/<branch name>` or simply `<branch name>`.
 * @param commitSha The SHA of the commit to which the analysis you are uploading relates.
 * @param analysisKey Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 * @param environment Identifies the variable values associated with the environment in which this analysis was performed.
 * @param error 
 * @param createdAt The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 * @param resultsCount The total number of results in the analysis.
 * @param rulesCount The total number of rules used in the analysis.
 * @param id Unique identifier for this analysis.
 * @param url The REST API URL of the analysis resource.
 * @param sarifId An identifier for the upload.
 * @param tool 
 * @param deletable 
 * @param warning Warning generated when processing the analysis
 * @param category Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
@Serializable

data class CodeScanningAnalysis (

    /* The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`, `refs/heads/<branch name>` or simply `<branch name>`. */
    @SerialName(value = "ref")
    val ref: kotlin.String,

    /* The SHA of the commit to which the analysis you are uploading relates. */
    @SerialName(value = "commit_sha")
    val commitSha: kotlin.String,

    /* Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    @SerialName(value = "analysis_key")
    val analysisKey: kotlin.String,

    /* Identifies the variable values associated with the environment in which this analysis was performed. */
    @SerialName(value = "environment")
    val environment: kotlin.String,

    @SerialName(value = "error")
    val error: kotlin.String,

    /* The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    /* The total number of results in the analysis. */
    @SerialName(value = "results_count")
    val resultsCount: kotlin.Int,

    /* The total number of rules used in the analysis. */
    @SerialName(value = "rules_count")
    val rulesCount: kotlin.Int,

    /* Unique identifier for this analysis. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    /* The REST API URL of the analysis resource. */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    /* An identifier for the upload. */
    @SerialName(value = "sarif_id")
    val sarifId: kotlin.String,

    @SerialName(value = "tool")
    val tool: CodeScanningAnalysisTool,

    @SerialName(value = "deletable")
    val deletable: kotlin.Boolean,

    /* Warning generated when processing the analysis */
    @SerialName(value = "warning")
    val warning: kotlin.String,

    /* Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
    @SerialName(value = "category")
    val category: kotlin.String? = null

)


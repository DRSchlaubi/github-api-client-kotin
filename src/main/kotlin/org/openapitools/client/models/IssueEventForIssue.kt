/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AddedToProjectIssueEvent
import org.openapitools.client.models.AddedToProjectIssueEventProjectCard
import org.openapitools.client.models.AssignedIssueEvent
import org.openapitools.client.models.ConvertedNoteToIssueIssueEvent
import org.openapitools.client.models.DemilestonedIssueEvent
import org.openapitools.client.models.Integration
import org.openapitools.client.models.LabeledIssueEvent
import org.openapitools.client.models.LabeledIssueEventLabel
import org.openapitools.client.models.LockedIssueEvent
import org.openapitools.client.models.MilestonedIssueEvent
import org.openapitools.client.models.MilestonedIssueEventMilestone
import org.openapitools.client.models.MovedColumnInProjectIssueEvent
import org.openapitools.client.models.RemovedFromProjectIssueEvent
import org.openapitools.client.models.RenamedIssueEvent
import org.openapitools.client.models.RenamedIssueEventRename
import org.openapitools.client.models.ReviewDismissedIssueEvent
import org.openapitools.client.models.ReviewDismissedIssueEventDismissedReview
import org.openapitools.client.models.ReviewRequestRemovedIssueEvent
import org.openapitools.client.models.ReviewRequestedIssueEvent
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.Team
import org.openapitools.client.models.UnassignedIssueEvent
import org.openapitools.client.models.UnlabeledIssueEvent

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Issue Event for Issue
 *
 * @param id 
 * @param nodeId 
 * @param url 
 * @param actor 
 * @param event 
 * @param commitId 
 * @param commitUrl 
 * @param createdAt 
 * @param performedViaGithubApp 
 * @param label 
 * @param assignee 
 * @param assigner 
 * @param milestone 
 * @param rename 
 * @param reviewRequester 
 * @param dismissedReview 
 * @param lockReason 
 * @param requestedTeam 
 * @param requestedReviewer 
 * @param projectCard 
 */
@Serializable

data class IssueEventForIssue (

    @Contextual @SerialName(value = "id")
    val id: kotlin.Any?,

    @Contextual @SerialName(value = "node_id")
    val nodeId: kotlin.Any?,

    @Contextual @SerialName(value = "url")
    val url: kotlin.Any?,

    @SerialName(value = "actor")
    val actor: SimpleUser,

    @Contextual @SerialName(value = "event")
    val event: kotlin.Any?,

    @Contextual @SerialName(value = "commit_id")
    val commitId: kotlin.Any?,

    @Contextual @SerialName(value = "commit_url")
    val commitUrl: kotlin.Any?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlin.Any?,

    @SerialName(value = "performed_via_github_app")
    val performedViaGithubApp: Integration,

    @SerialName(value = "label")
    val label: LabeledIssueEventLabel,

    @SerialName(value = "assignee")
    val assignee: SimpleUser,

    @SerialName(value = "assigner")
    val assigner: SimpleUser,

    @SerialName(value = "milestone")
    val milestone: MilestonedIssueEventMilestone,

    @SerialName(value = "rename")
    val rename: RenamedIssueEventRename,

    @SerialName(value = "review_requester")
    val reviewRequester: SimpleUser,

    @SerialName(value = "dismissed_review")
    val dismissedReview: ReviewDismissedIssueEventDismissedReview,

    @Contextual @SerialName(value = "lock_reason")
    val lockReason: kotlin.Any?,

    @SerialName(value = "requested_team")
    val requestedTeam: Team? = null,

    @SerialName(value = "requested_reviewer")
    val requestedReviewer: SimpleUser? = null,

    @SerialName(value = "project_card")
    val projectCard: AddedToProjectIssueEventProjectCard? = null

)


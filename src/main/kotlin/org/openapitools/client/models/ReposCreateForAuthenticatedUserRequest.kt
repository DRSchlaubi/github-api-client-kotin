/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param name The name of the repository.
 * @param description A short description of the repository.
 * @param homepage A URL with more information about the repository.
 * @param `private` Whether the repository is private.
 * @param hasIssues Whether issues are enabled.
 * @param hasProjects Whether projects are enabled.
 * @param hasWiki Whether the wiki is enabled.
 * @param hasDiscussions Whether discussions are enabled.
 * @param teamId The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
 * @param autoInit Whether the repository is initialized with a minimal README.
 * @param gitignoreTemplate The desired language or platform to apply to the .gitignore.
 * @param licenseTemplate The license keyword of the open source license for this repository.
 * @param allowSquashMerge Whether to allow squash merges for pull requests.
 * @param allowMergeCommit Whether to allow merge commits for pull requests.
 * @param allowRebaseMerge Whether to allow rebase merges for pull requests.
 * @param allowAutoMerge Whether to allow Auto-merge to be used on pull requests.
 * @param deleteBranchOnMerge Whether to delete head branches when pull requests are merged
 * @param squashMergeCommitTitle The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * @param squashMergeCommitMessage The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
 * @param mergeCommitTitle The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 * @param mergeCommitMessage The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
 * @param hasDownloads Whether downloads are enabled.
 * @param isTemplate Whether this repository acts as a template that can be used to generate new repositories.
 */
@Serializable

data class ReposCreateForAuthenticatedUserRequest (

    /* The name of the repository. */
    @SerialName(value = "name")
    val name: kotlin.String,

    /* A short description of the repository. */
    @SerialName(value = "description")
    val description: kotlin.String? = null,

    /* A URL with more information about the repository. */
    @SerialName(value = "homepage")
    val homepage: kotlin.String? = null,

    /* Whether the repository is private. */
    @SerialName(value = "private")
    val `private`: kotlin.Boolean? = false,

    /* Whether issues are enabled. */
    @SerialName(value = "has_issues")
    val hasIssues: kotlin.Boolean? = true,

    /* Whether projects are enabled. */
    @SerialName(value = "has_projects")
    val hasProjects: kotlin.Boolean? = true,

    /* Whether the wiki is enabled. */
    @SerialName(value = "has_wiki")
    val hasWiki: kotlin.Boolean? = true,

    /* Whether discussions are enabled. */
    @SerialName(value = "has_discussions")
    val hasDiscussions: kotlin.Boolean? = false,

    /* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    @SerialName(value = "team_id")
    val teamId: kotlin.Int? = null,

    /* Whether the repository is initialized with a minimal README. */
    @SerialName(value = "auto_init")
    val autoInit: kotlin.Boolean? = false,

    /* The desired language or platform to apply to the .gitignore. */
    @SerialName(value = "gitignore_template")
    val gitignoreTemplate: kotlin.String? = null,

    /* The license keyword of the open source license for this repository. */
    @SerialName(value = "license_template")
    val licenseTemplate: kotlin.String? = null,

    /* Whether to allow squash merges for pull requests. */
    @SerialName(value = "allow_squash_merge")
    val allowSquashMerge: kotlin.Boolean? = true,

    /* Whether to allow merge commits for pull requests. */
    @SerialName(value = "allow_merge_commit")
    val allowMergeCommit: kotlin.Boolean? = true,

    /* Whether to allow rebase merges for pull requests. */
    @SerialName(value = "allow_rebase_merge")
    val allowRebaseMerge: kotlin.Boolean? = true,

    /* Whether to allow Auto-merge to be used on pull requests. */
    @SerialName(value = "allow_auto_merge")
    val allowAutoMerge: kotlin.Boolean? = false,

    /* Whether to delete head branches when pull requests are merged */
    @SerialName(value = "delete_branch_on_merge")
    val deleteBranchOnMerge: kotlin.Boolean? = false,

    /* The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit). */
    @SerialName(value = "squash_merge_commit_title")
    val squashMergeCommitTitle: ReposCreateForAuthenticatedUserRequest.SquashMergeCommitTitle? = null,

    /* The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message. */
    @SerialName(value = "squash_merge_commit_message")
    val squashMergeCommitMessage: ReposCreateForAuthenticatedUserRequest.SquashMergeCommitMessage? = null,

    /* The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name). */
    @SerialName(value = "merge_commit_title")
    val mergeCommitTitle: ReposCreateForAuthenticatedUserRequest.MergeCommitTitle? = null,

    /* The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message. */
    @SerialName(value = "merge_commit_message")
    val mergeCommitMessage: ReposCreateForAuthenticatedUserRequest.MergeCommitMessage? = null,

    /* Whether downloads are enabled. */
    @SerialName(value = "has_downloads")
    val hasDownloads: kotlin.Boolean? = true,

    /* Whether this repository acts as a template that can be used to generate new repositories. */
    @SerialName(value = "is_template")
    val isTemplate: kotlin.Boolean? = false

) {

    /**
     * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     *
     * Values: PR_TITLE,COMMIT_OR_PR_TITLE
     */
    @Serializable
    enum class SquashMergeCommitTitle(val value: kotlin.String) {
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "COMMIT_OR_PR_TITLE") COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");
    }
    /**
     * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
     *
     * Values: PR_BODY,COMMIT_MESSAGES,BLANK
     */
    @Serializable
    enum class SquashMergeCommitMessage(val value: kotlin.String) {
        @SerialName(value = "PR_BODY") PR_BODY("PR_BODY"),
        @SerialName(value = "COMMIT_MESSAGES") COMMIT_MESSAGES("COMMIT_MESSAGES"),
        @SerialName(value = "BLANK") BLANK("BLANK");
    }
    /**
     * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     *
     * Values: PR_TITLE,MERGE_MESSAGE
     */
    @Serializable
    enum class MergeCommitTitle(val value: kotlin.String) {
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "MERGE_MESSAGE") MERGE_MESSAGE("MERGE_MESSAGE");
    }
    /**
     * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
     *
     * Values: PR_BODY,PR_TITLE,BLANK
     */
    @Serializable
    enum class MergeCommitMessage(val value: kotlin.String) {
        @SerialName(value = "PR_BODY") PR_BODY("PR_BODY"),
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "BLANK") BLANK("BLANK");
    }
}


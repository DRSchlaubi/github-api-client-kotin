/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.IssuePerformedViaGithubApp
import org.openapitools.client.models.MinimalRepository
import org.openapitools.client.models.PullRequestMinimal
import org.openapitools.client.models.SimpleCommit

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * A suite of checks performed on the code of a given code change
 *
 * @param id 
 * @param nodeId 
 * @param headBranch 
 * @param headSha The SHA of the head commit that is being checked.
 * @param status The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
 * @param conclusion 
 * @param url 
 * @param before 
 * @param after 
 * @param pullRequests 
 * @param app 
 * @param repository 
 * @param createdAt 
 * @param updatedAt 
 * @param headCommit 
 * @param latestCheckRunsCount 
 * @param checkRunsUrl 
 * @param rerequestable 
 * @param runsRerequestable 
 */
@Serializable

data class CheckSuite (

    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    @SerialName(value = "head_branch")
    val headBranch: kotlin.String?,

    /* The SHA of the head commit that is being checked. */
    @SerialName(value = "head_sha")
    val headSha: kotlin.String,

    /* The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites. */
    @SerialName(value = "status")
    val status: CheckSuite.Status?,

    @SerialName(value = "conclusion")
    val conclusion: CheckSuite.Conclusion?,

    @SerialName(value = "url")
    val url: kotlin.String?,

    @SerialName(value = "before")
    val before: kotlin.String?,

    @SerialName(value = "after")
    val after: kotlin.String?,

    @SerialName(value = "pull_requests")
    val pullRequests: kotlin.collections.List<PullRequestMinimal>,

    @SerialName(value = "app")
    val app: IssuePerformedViaGithubApp,

    @SerialName(value = "repository")
    val repository: MinimalRepository,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant?,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant?,

    @SerialName(value = "head_commit")
    val headCommit: SimpleCommit,

    @SerialName(value = "latest_check_runs_count")
    val latestCheckRunsCount: kotlin.Int,

    @SerialName(value = "check_runs_url")
    val checkRunsUrl: kotlin.String,

    @SerialName(value = "rerequestable")
    val rerequestable: kotlin.Boolean? = null,

    @SerialName(value = "runs_rerequestable")
    val runsRerequestable: kotlin.Boolean? = null

) {

    /**
     * The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.
     *
     * Values: queued,in_progress,completed,waiting,requested,pending,`null`
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "queued") queued("queued"),
        @SerialName(value = "in_progress") in_progress("in_progress"),
        @SerialName(value = "completed") completed("completed"),
        @SerialName(value = "waiting") waiting("waiting"),
        @SerialName(value = "requested") requested("requested"),
        @SerialName(value = "pending") pending("pending"),
        @SerialName(value = "null") `null`("null");
    }
    /**
     * 
     *
     * Values: success,failure,neutral,cancelled,skipped,timed_out,action_required,startup_failure,stale,`null`
     */
    @Serializable
    enum class Conclusion(val value: kotlin.String) {
        @SerialName(value = "success") success("success"),
        @SerialName(value = "failure") failure("failure"),
        @SerialName(value = "neutral") neutral("neutral"),
        @SerialName(value = "cancelled") cancelled("cancelled"),
        @SerialName(value = "skipped") skipped("skipped"),
        @SerialName(value = "timed_out") timed_out("timed_out"),
        @SerialName(value = "action_required") action_required("action_required"),
        @SerialName(value = "startup_failure") startup_failure("startup_failure"),
        @SerialName(value = "stale") stale("stale"),
        @SerialName(value = "null") `null`("null");
    }
}


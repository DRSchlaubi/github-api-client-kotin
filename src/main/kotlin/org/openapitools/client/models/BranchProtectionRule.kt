/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
 *
 * @param adminEnforced 
 * @param allowDeletionsEnforcementLevel 
 * @param allowForcePushesEnforcementLevel 
 * @param authorizedActorNames 
 * @param authorizedActorsOnly 
 * @param authorizedDismissalActorsOnly 
 * @param createdAt 
 * @param dismissStaleReviewsOnPush 
 * @param id 
 * @param ignoreApprovalsFromContributors 
 * @param linearHistoryRequirementEnforcementLevel 
 * @param mergeQueueEnforcementLevel 
 * @param name 
 * @param pullRequestReviewsEnforcementLevel 
 * @param repositoryId 
 * @param requireCodeOwnerReview 
 * @param requiredApprovingReviewCount 
 * @param requiredConversationResolutionLevel 
 * @param requiredDeploymentsEnforcementLevel 
 * @param requiredStatusChecks 
 * @param requiredStatusChecksEnforcementLevel 
 * @param signatureRequirementEnforcementLevel 
 * @param strictRequiredStatusChecksPolicy 
 * @param updatedAt 
 * @param createProtected 
 * @param requireLastPushApproval Whether the most recent push must be approved by someone other than the person who pushed it
 */
@Serializable

data class BranchProtectionRule (

    @SerialName(value = "admin_enforced")
    val adminEnforced: kotlin.Boolean,

    @SerialName(value = "allow_deletions_enforcement_level")
    val allowDeletionsEnforcementLevel: BranchProtectionRule.AllowDeletionsEnforcementLevel,

    @SerialName(value = "allow_force_pushes_enforcement_level")
    val allowForcePushesEnforcementLevel: BranchProtectionRule.AllowForcePushesEnforcementLevel,

    @SerialName(value = "authorized_actor_names")
    val authorizedActorNames: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "authorized_actors_only")
    val authorizedActorsOnly: kotlin.Boolean,

    @SerialName(value = "authorized_dismissal_actors_only")
    val authorizedDismissalActorsOnly: kotlin.Boolean,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    @SerialName(value = "dismiss_stale_reviews_on_push")
    val dismissStaleReviewsOnPush: kotlin.Boolean,

    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "ignore_approvals_from_contributors")
    val ignoreApprovalsFromContributors: kotlin.Boolean,

    @SerialName(value = "linear_history_requirement_enforcement_level")
    val linearHistoryRequirementEnforcementLevel: BranchProtectionRule.LinearHistoryRequirementEnforcementLevel,

    @SerialName(value = "merge_queue_enforcement_level")
    val mergeQueueEnforcementLevel: BranchProtectionRule.MergeQueueEnforcementLevel,

    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "pull_request_reviews_enforcement_level")
    val pullRequestReviewsEnforcementLevel: BranchProtectionRule.PullRequestReviewsEnforcementLevel,

    @SerialName(value = "repository_id")
    val repositoryId: kotlin.Int,

    @SerialName(value = "require_code_owner_review")
    val requireCodeOwnerReview: kotlin.Boolean,

    @SerialName(value = "required_approving_review_count")
    val requiredApprovingReviewCount: kotlin.Int,

    @SerialName(value = "required_conversation_resolution_level")
    val requiredConversationResolutionLevel: BranchProtectionRule.RequiredConversationResolutionLevel,

    @SerialName(value = "required_deployments_enforcement_level")
    val requiredDeploymentsEnforcementLevel: BranchProtectionRule.RequiredDeploymentsEnforcementLevel,

    @SerialName(value = "required_status_checks")
    val requiredStatusChecks: kotlin.collections.List<kotlin.String>,

    @SerialName(value = "required_status_checks_enforcement_level")
    val requiredStatusChecksEnforcementLevel: BranchProtectionRule.RequiredStatusChecksEnforcementLevel,

    @SerialName(value = "signature_requirement_enforcement_level")
    val signatureRequirementEnforcementLevel: BranchProtectionRule.SignatureRequirementEnforcementLevel,

    @SerialName(value = "strict_required_status_checks_policy")
    val strictRequiredStatusChecksPolicy: kotlin.Boolean,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant,

    @SerialName(value = "create_protected")
    val createProtected: kotlin.Boolean? = null,

    /* Whether the most recent push must be approved by someone other than the person who pushed it */
    @SerialName(value = "require_last_push_approval")
    val requireLastPushApproval: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class AllowDeletionsEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class AllowForcePushesEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class LinearHistoryRequirementEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class MergeQueueEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class PullRequestReviewsEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class RequiredConversationResolutionLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class RequiredDeploymentsEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class RequiredStatusChecksEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
    /**
     * 
     *
     * Values: off,non_admins,everyone
     */
    @Serializable
    enum class SignatureRequirementEnforcementLevel(val value: kotlin.String) {
        @SerialName(value = "off") off("off"),
        @SerialName(value = "non_admins") non_admins("non_admins"),
        @SerialName(value = "everyone") everyone("everyone");
    }
}


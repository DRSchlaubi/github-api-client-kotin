/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CodespaceGitStatus
import org.openapitools.client.models.CodespaceMachine
import org.openapitools.client.models.CodespaceRuntimeConstraints
import org.openapitools.client.models.FullRepository
import org.openapitools.client.models.SimpleUser

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * A codespace.
 *
 * @param id 
 * @param name Automatically generated name of this codespace.
 * @param environmentId UUID identifying this codespace's environment.
 * @param owner 
 * @param billableOwner 
 * @param repository 
 * @param machine 
 * @param prebuild Whether the codespace was created from a prebuild.
 * @param createdAt 
 * @param updatedAt 
 * @param lastUsedAt Last known time this codespace was started.
 * @param state State of this codespace.
 * @param url API URL for this codespace.
 * @param gitStatus 
 * @param location The initally assigned location of a new codespace.
 * @param idleTimeoutMinutes The number of minutes of inactivity after which this codespace will be automatically stopped.
 * @param webUrl URL to access this codespace on the web.
 * @param machinesUrl API URL to access available alternate machine types for this codespace.
 * @param startUrl API URL to start this codespace.
 * @param stopUrl API URL to stop this codespace.
 * @param pullsUrl API URL for the Pull Request associated with this codespace, if any.
 * @param recentFolders 
 * @param displayName Display name for this codespace.
 * @param devcontainerPath Path to devcontainer.json from repo root used to create Codespace.
 * @param publishUrl API URL to publish this codespace to a new repository.
 * @param runtimeConstraints 
 * @param pendingOperation Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
 * @param pendingOperationDisabledReason Text to show user when codespace is disabled by a pending operation
 * @param idleTimeoutNotice Text to show user when codespace idle timeout minutes has been overriden by an organization policy
 * @param retentionPeriodMinutes Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
 * @param retentionExpiresAt When a codespace will be auto-deleted based on the \"retention_period_minutes\" and \"last_used_at\"
 */
@Serializable

data class CodespaceWithFullRepository (

    @SerialName(value = "id")
    val id: kotlin.Int,

    /* Automatically generated name of this codespace. */
    @SerialName(value = "name")
    val name: kotlin.String,

    /* UUID identifying this codespace's environment. */
    @SerialName(value = "environment_id")
    val environmentId: kotlin.String?,

    @SerialName(value = "owner")
    val owner: SimpleUser,

    @SerialName(value = "billable_owner")
    val billableOwner: SimpleUser,

    @SerialName(value = "repository")
    val repository: FullRepository,

    @SerialName(value = "machine")
    val machine: CodespaceMachine,

    /* Whether the codespace was created from a prebuild. */
    @SerialName(value = "prebuild")
    val prebuild: kotlin.Boolean?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant,

    /* Last known time this codespace was started. */
    @Contextual @SerialName(value = "last_used_at")
    val lastUsedAt: kotlinx.datetime.Instant,

    /* State of this codespace. */
    @SerialName(value = "state")
    val state: CodespaceWithFullRepository.State,

    /* API URL for this codespace. */
    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @SerialName(value = "git_status")
    val gitStatus: CodespaceGitStatus,

    /* The initally assigned location of a new codespace. */
    @SerialName(value = "location")
    val location: CodespaceWithFullRepository.Location,

    /* The number of minutes of inactivity after which this codespace will be automatically stopped. */
    @SerialName(value = "idle_timeout_minutes")
    val idleTimeoutMinutes: kotlin.Int?,

    /* URL to access this codespace on the web. */
    @Contextual @SerialName(value = "web_url")
    val webUrl: java.net.URI,

    /* API URL to access available alternate machine types for this codespace. */
    @Contextual @SerialName(value = "machines_url")
    val machinesUrl: java.net.URI,

    /* API URL to start this codespace. */
    @Contextual @SerialName(value = "start_url")
    val startUrl: java.net.URI,

    /* API URL to stop this codespace. */
    @Contextual @SerialName(value = "stop_url")
    val stopUrl: java.net.URI,

    /* API URL for the Pull Request associated with this codespace, if any. */
    @Contextual @SerialName(value = "pulls_url")
    val pullsUrl: java.net.URI?,

    @SerialName(value = "recent_folders")
    val recentFolders: kotlin.collections.List<kotlin.String>,

    /* Display name for this codespace. */
    @SerialName(value = "display_name")
    val displayName: kotlin.String? = null,

    /* Path to devcontainer.json from repo root used to create Codespace. */
    @SerialName(value = "devcontainer_path")
    val devcontainerPath: kotlin.String? = null,

    /* API URL to publish this codespace to a new repository. */
    @Contextual @SerialName(value = "publish_url")
    val publishUrl: java.net.URI? = null,

    @SerialName(value = "runtime_constraints")
    val runtimeConstraints: CodespaceRuntimeConstraints? = null,

    /* Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it. */
    @SerialName(value = "pending_operation")
    val pendingOperation: kotlin.Boolean? = null,

    /* Text to show user when codespace is disabled by a pending operation */
    @SerialName(value = "pending_operation_disabled_reason")
    val pendingOperationDisabledReason: kotlin.String? = null,

    /* Text to show user when codespace idle timeout minutes has been overriden by an organization policy */
    @SerialName(value = "idle_timeout_notice")
    val idleTimeoutNotice: kotlin.String? = null,

    /* Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
    @SerialName(value = "retention_period_minutes")
    val retentionPeriodMinutes: kotlin.Int? = null,

    /* When a codespace will be auto-deleted based on the \"retention_period_minutes\" and \"last_used_at\" */
    @Contextual @SerialName(value = "retention_expires_at")
    val retentionExpiresAt: kotlinx.datetime.Instant? = null

) {

    /**
     * State of this codespace.
     *
     * Values: Unknown,Created,Queued,Provisioning,Available,Awaiting,Unavailable,Deleted,Moved,Shutdown,Archived,Starting,ShuttingDown,Failed,Exporting,Updating,Rebuilding
     */
    @Serializable
    enum class State(val value: kotlin.String) {
        @SerialName(value = "Unknown") Unknown("Unknown"),
        @SerialName(value = "Created") Created("Created"),
        @SerialName(value = "Queued") Queued("Queued"),
        @SerialName(value = "Provisioning") Provisioning("Provisioning"),
        @SerialName(value = "Available") Available("Available"),
        @SerialName(value = "Awaiting") Awaiting("Awaiting"),
        @SerialName(value = "Unavailable") Unavailable("Unavailable"),
        @SerialName(value = "Deleted") Deleted("Deleted"),
        @SerialName(value = "Moved") Moved("Moved"),
        @SerialName(value = "Shutdown") Shutdown("Shutdown"),
        @SerialName(value = "Archived") Archived("Archived"),
        @SerialName(value = "Starting") Starting("Starting"),
        @SerialName(value = "ShuttingDown") ShuttingDown("ShuttingDown"),
        @SerialName(value = "Failed") Failed("Failed"),
        @SerialName(value = "Exporting") Exporting("Exporting"),
        @SerialName(value = "Updating") Updating("Updating"),
        @SerialName(value = "Rebuilding") Rebuilding("Rebuilding");
    }
    /**
     * The initally assigned location of a new codespace.
     *
     * Values: EastUs,SouthEastAsia,WestEurope,WestUs2
     */
    @Serializable
    enum class Location(val value: kotlin.String) {
        @SerialName(value = "EastUs") EastUs("EastUs"),
        @SerialName(value = "SouthEastAsia") SouthEastAsia("SouthEastAsia"),
        @SerialName(value = "WestEurope") WestEurope("WestEurope"),
        @SerialName(value = "WestUs2") WestUs2("WestUs2");
    }
}


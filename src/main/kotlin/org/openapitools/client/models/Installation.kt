/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AppPermissions
import org.openapitools.client.models.IntegrationInstallationRequestAccount
import org.openapitools.client.models.IntegrationOwner

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Installation
 *
 * @param id The ID of the installation.
 * @param account 
 * @param repositorySelection Describe whether all repositories have been selected or there's a selection involved
 * @param accessTokensUrl 
 * @param repositoriesUrl 
 * @param htmlUrl 
 * @param appId 
 * @param targetId The ID of the user or organization this token is being scoped to.
 * @param targetType 
 * @param permissions 
 * @param events 
 * @param createdAt 
 * @param updatedAt 
 * @param singleFileName 
 * @param appSlug 
 * @param suspendedBy 
 * @param suspendedAt 
 * @param hasMultipleSingleFiles 
 * @param singleFilePaths 
 * @param contactEmail 
 */
@Serializable

data class Installation (

    /* The ID of the installation. */
    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "account")
    val account: IntegrationInstallationRequestAccount,

    /* Describe whether all repositories have been selected or there's a selection involved */
    @SerialName(value = "repository_selection")
    val repositorySelection: Installation.RepositorySelection,

    @Contextual @SerialName(value = "access_tokens_url")
    val accessTokensUrl: java.net.URI,

    @Contextual @SerialName(value = "repositories_url")
    val repositoriesUrl: java.net.URI,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI,

    @SerialName(value = "app_id")
    val appId: kotlin.Int,

    /* The ID of the user or organization this token is being scoped to. */
    @SerialName(value = "target_id")
    val targetId: kotlin.Int,

    @SerialName(value = "target_type")
    val targetType: kotlin.String,

    @SerialName(value = "permissions")
    val permissions: AppPermissions,

    @SerialName(value = "events")
    val events: kotlin.collections.List<kotlin.String>,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlinx.datetime.Instant,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlinx.datetime.Instant,

    @SerialName(value = "single_file_name")
    val singleFileName: kotlin.String?,

    @SerialName(value = "app_slug")
    val appSlug: kotlin.String,

    @SerialName(value = "suspended_by")
    val suspendedBy: IntegrationOwner,

    @Contextual @SerialName(value = "suspended_at")
    val suspendedAt: kotlinx.datetime.Instant?,

    @SerialName(value = "has_multiple_single_files")
    val hasMultipleSingleFiles: kotlin.Boolean? = null,

    @SerialName(value = "single_file_paths")
    val singleFilePaths: kotlin.collections.List<kotlin.String>? = null,

    @SerialName(value = "contact_email")
    val contactEmail: kotlin.String? = null

) {

    /**
     * Describe whether all repositories have been selected or there's a selection involved
     *
     * Values: all,selected
     */
    @Serializable
    enum class RepositorySelection(val value: kotlin.String) {
        @SerialName(value = "all") all("all"),
        @SerialName(value = "selected") selected("selected");
    }
}


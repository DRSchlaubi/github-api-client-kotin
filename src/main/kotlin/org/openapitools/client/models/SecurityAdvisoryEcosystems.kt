/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The package's language or package management ecosystem.
 *
 * Values: rubygems,npm,pip,maven,nuget,composer,go,rust,erlang,actions,pub,other,swift
 */
@Serializable
enum class SecurityAdvisoryEcosystems(val value: kotlin.String) {

    @SerialName(value = "rubygems")
    rubygems("rubygems"),

    @SerialName(value = "npm")
    npm("npm"),

    @SerialName(value = "pip")
    pip("pip"),

    @SerialName(value = "maven")
    maven("maven"),

    @SerialName(value = "nuget")
    nuget("nuget"),

    @SerialName(value = "composer")
    composer("composer"),

    @SerialName(value = "go")
    go("go"),

    @SerialName(value = "rust")
    rust("rust"),

    @SerialName(value = "erlang")
    erlang("erlang"),

    @SerialName(value = "actions")
    actions("actions"),

    @SerialName(value = "pub")
    pub("pub"),

    @SerialName(value = "other")
    other("other"),

    @SerialName(value = "swift")
    swift("swift");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SecurityAdvisoryEcosystems) "$data" else null

        /**
         * Returns a valid [SecurityAdvisoryEcosystems] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SecurityAdvisoryEcosystems? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}


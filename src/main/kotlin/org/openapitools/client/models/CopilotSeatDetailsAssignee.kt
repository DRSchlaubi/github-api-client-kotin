/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Organization
import org.openapitools.client.models.OrganizationPlan
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.Team
import org.openapitools.client.models.TeamParent
import org.openapitools.client.models.TeamPermissions

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The assignee that has been granted access to GitHub Copilot.
 *
 * @param name Display name for the organization
 * @param login Unique login name of the organization
 * @param id 
 * @param nodeId 
 * @param avatarUrl 
 * @param gravatarId 
 * @param url URL for the organization
 * @param htmlUrl 
 * @param followersUrl 
 * @param followingUrl 
 * @param gistsUrl 
 * @param starredUrl 
 * @param subscriptionsUrl 
 * @param organizationsUrl 
 * @param reposUrl 
 * @param eventsUrl 
 * @param receivedEventsUrl 
 * @param type 
 * @param siteAdmin 
 * @param slug 
 * @param description 
 * @param permission 
 * @param membersUrl 
 * @param repositoriesUrl 
 * @param parent 
 * @param hooksUrl 
 * @param issuesUrl 
 * @param publicMembersUrl 
 * @param hasOrganizationProjects Specifies if organization projects are enabled for this org
 * @param hasRepositoryProjects Specifies if repository projects are enabled for repositories that belong to this org
 * @param publicRepos 
 * @param publicGists 
 * @param followers 
 * @param following 
 * @param createdAt 
 * @param updatedAt 
 * @param email Display email for the organization
 * @param starredAt 
 * @param privacy 
 * @param notificationSetting 
 * @param permissions 
 * @param blog Display blog url for the organization
 * @param company Display company name for the organization
 * @param location Display location for the organization
 * @param isVerified 
 * @param plan 
 */
@Serializable

data class CopilotSeatDetailsAssignee (

    /* Display name for the organization */
    @Contextual @SerialName(value = "name")
    val name: kotlin.Any?,

    /* Unique login name of the organization */
    @Contextual @SerialName(value = "login")
    val login: kotlin.Any?,

    @Contextual @SerialName(value = "id")
    val id: kotlin.Any?,

    @Contextual @SerialName(value = "node_id")
    val nodeId: kotlin.Any?,

    @Contextual @SerialName(value = "avatar_url")
    val avatarUrl: kotlin.Any?,

    @Contextual @SerialName(value = "gravatar_id")
    val gravatarId: kotlin.Any?,

    /* URL for the organization */
    @Contextual @SerialName(value = "url")
    val url: kotlin.Any?,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: kotlin.Any?,

    @Contextual @SerialName(value = "followers_url")
    val followersUrl: kotlin.Any?,

    @Contextual @SerialName(value = "following_url")
    val followingUrl: kotlin.Any?,

    @Contextual @SerialName(value = "gists_url")
    val gistsUrl: kotlin.Any?,

    @Contextual @SerialName(value = "starred_url")
    val starredUrl: kotlin.Any?,

    @Contextual @SerialName(value = "subscriptions_url")
    val subscriptionsUrl: kotlin.Any?,

    @Contextual @SerialName(value = "organizations_url")
    val organizationsUrl: kotlin.Any?,

    @Contextual @SerialName(value = "repos_url")
    val reposUrl: kotlin.Any?,

    @Contextual @SerialName(value = "events_url")
    val eventsUrl: kotlin.Any?,

    @Contextual @SerialName(value = "received_events_url")
    val receivedEventsUrl: kotlin.Any?,

    @Contextual @SerialName(value = "type")
    val type: kotlin.Any?,

    @Contextual @SerialName(value = "site_admin")
    val siteAdmin: kotlin.Any?,

    @Contextual @SerialName(value = "slug")
    val slug: kotlin.Any?,

    @Contextual @SerialName(value = "description")
    val description: kotlin.Any?,

    @Contextual @SerialName(value = "permission")
    val permission: kotlin.Any?,

    @Contextual @SerialName(value = "members_url")
    val membersUrl: kotlin.Any?,

    @Contextual @SerialName(value = "repositories_url")
    val repositoriesUrl: kotlin.Any?,

    @SerialName(value = "parent")
    val parent: TeamParent,

    @Contextual @SerialName(value = "hooks_url")
    val hooksUrl: kotlin.Any?,

    @Contextual @SerialName(value = "issues_url")
    val issuesUrl: kotlin.Any?,

    @Contextual @SerialName(value = "public_members_url")
    val publicMembersUrl: kotlin.Any?,

    /* Specifies if organization projects are enabled for this org */
    @Contextual @SerialName(value = "has_organization_projects")
    val hasOrganizationProjects: kotlin.Any?,

    /* Specifies if repository projects are enabled for repositories that belong to this org */
    @Contextual @SerialName(value = "has_repository_projects")
    val hasRepositoryProjects: kotlin.Any?,

    @Contextual @SerialName(value = "public_repos")
    val publicRepos: kotlin.Any?,

    @Contextual @SerialName(value = "public_gists")
    val publicGists: kotlin.Any?,

    @Contextual @SerialName(value = "followers")
    val followers: kotlin.Any?,

    @Contextual @SerialName(value = "following")
    val following: kotlin.Any?,

    @Contextual @SerialName(value = "created_at")
    val createdAt: kotlin.Any?,

    @Contextual @SerialName(value = "updated_at")
    val updatedAt: kotlin.Any?,

    /* Display email for the organization */
    @Contextual @SerialName(value = "email")
    val email: kotlin.Any? = null,

    @Contextual @SerialName(value = "starred_at")
    val starredAt: kotlin.Any? = null,

    @Contextual @SerialName(value = "privacy")
    val privacy: kotlin.Any? = null,

    @Contextual @SerialName(value = "notification_setting")
    val notificationSetting: kotlin.Any? = null,

    @SerialName(value = "permissions")
    val permissions: TeamPermissions? = null,

    /* Display blog url for the organization */
    @Contextual @SerialName(value = "blog")
    val blog: kotlin.Any? = null,

    /* Display company name for the organization */
    @Contextual @SerialName(value = "company")
    val company: kotlin.Any? = null,

    /* Display location for the organization */
    @Contextual @SerialName(value = "location")
    val location: kotlin.Any? = null,

    @Contextual @SerialName(value = "is_verified")
    val isVerified: kotlin.Any? = null,

    @SerialName(value = "plan")
    val plan: OrganizationPlan? = null

)


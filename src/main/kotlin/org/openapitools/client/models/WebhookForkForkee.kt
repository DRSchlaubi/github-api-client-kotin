/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.BranchRestrictionPolicyUsersInner
import org.openapitools.client.models.RepositoryPermissions

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.
 *
 * @param archiveUrl 
 * @param archived 
 * @param assigneesUrl 
 * @param blobsUrl 
 * @param branchesUrl 
 * @param cloneUrl 
 * @param collaboratorsUrl 
 * @param commentsUrl 
 * @param commitsUrl 
 * @param compareUrl 
 * @param contentsUrl 
 * @param contributorsUrl 
 * @param createdAt 
 * @param defaultBranch 
 * @param deploymentsUrl 
 * @param description 
 * @param downloadsUrl 
 * @param eventsUrl 
 * @param fork 
 * @param forks 
 * @param forksCount 
 * @param forksUrl 
 * @param fullName 
 * @param gitCommitsUrl 
 * @param gitRefsUrl 
 * @param gitTagsUrl 
 * @param gitUrl 
 * @param hasDownloads 
 * @param hasIssues 
 * @param hasPages 
 * @param hasProjects 
 * @param hasWiki 
 * @param homepage 
 * @param hooksUrl 
 * @param htmlUrl 
 * @param id 
 * @param issueCommentUrl 
 * @param issueEventsUrl 
 * @param issuesUrl 
 * @param keysUrl 
 * @param labelsUrl 
 * @param language 
 * @param languagesUrl 
 * @param license 
 * @param mergesUrl 
 * @param milestonesUrl 
 * @param mirrorUrl 
 * @param name 
 * @param nodeId 
 * @param notificationsUrl 
 * @param openIssues 
 * @param openIssuesCount 
 * @param owner 
 * @param `private` 
 * @param pullsUrl 
 * @param pushedAt 
 * @param releasesUrl 
 * @param propertySize 
 * @param sshUrl 
 * @param stargazersCount 
 * @param stargazersUrl 
 * @param statusesUrl 
 * @param subscribersUrl 
 * @param subscriptionUrl 
 * @param svnUrl 
 * @param tagsUrl 
 * @param teamsUrl 
 * @param topics 
 * @param treesUrl 
 * @param updatedAt 
 * @param url 
 * @param visibility 
 * @param watchers 
 * @param watchersCount 
 * @param allowAutoMerge Whether to allow auto-merge for pull requests.
 * @param allowForking 
 * @param allowMergeCommit Whether to allow merge commits for pull requests.
 * @param allowRebaseMerge Whether to allow rebase merges for pull requests.
 * @param allowSquashMerge Whether to allow squash merges for pull requests.
 * @param allowUpdateBranch 
 * @param customProperties The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
 * @param deleteBranchOnMerge Whether to delete head branches when pull requests are merged
 * @param disabled 
 * @param isTemplate 
 * @param masterBranch 
 * @param organization 
 * @param permissions 
 * @param `public` 
 * @param roleName 
 * @param stargazers 
 * @param webCommitSignoffRequired Whether to require contributors to sign off on web-based commits
 */
@Serializable

data class WebhookForkForkee (

    @SerialName(value = "archive_url")
    val archiveUrl: kotlin.String,

    @SerialName(value = "archived")
    val archived: kotlin.Boolean,

    @SerialName(value = "assignees_url")
    val assigneesUrl: kotlin.String,

    @SerialName(value = "blobs_url")
    val blobsUrl: kotlin.String,

    @SerialName(value = "branches_url")
    val branchesUrl: kotlin.String,

    @SerialName(value = "clone_url")
    val cloneUrl: kotlin.String,

    @SerialName(value = "collaborators_url")
    val collaboratorsUrl: kotlin.String,

    @SerialName(value = "comments_url")
    val commentsUrl: kotlin.String,

    @SerialName(value = "commits_url")
    val commitsUrl: kotlin.String,

    @SerialName(value = "compare_url")
    val compareUrl: kotlin.String,

    @SerialName(value = "contents_url")
    val contentsUrl: kotlin.String,

    @SerialName(value = "contributors_url")
    val contributorsUrl: kotlin.String,

    @SerialName(value = "created_at")
    val createdAt: kotlin.String,

    @SerialName(value = "default_branch")
    val defaultBranch: kotlin.String,

    @SerialName(value = "deployments_url")
    val deploymentsUrl: kotlin.String,

    @SerialName(value = "description")
    val description: kotlin.String?,

    @SerialName(value = "downloads_url")
    val downloadsUrl: kotlin.String,

    @SerialName(value = "events_url")
    val eventsUrl: kotlin.String,

    @SerialName(value = "fork")
    val fork: WebhookForkForkee.Fork,

    @SerialName(value = "forks")
    val forks: kotlin.Int,

    @SerialName(value = "forks_count")
    val forksCount: kotlin.Int,

    @SerialName(value = "forks_url")
    val forksUrl: kotlin.String,

    @SerialName(value = "full_name")
    val fullName: kotlin.String,

    @SerialName(value = "git_commits_url")
    val gitCommitsUrl: kotlin.String,

    @SerialName(value = "git_refs_url")
    val gitRefsUrl: kotlin.String,

    @SerialName(value = "git_tags_url")
    val gitTagsUrl: kotlin.String,

    @SerialName(value = "git_url")
    val gitUrl: kotlin.String,

    @SerialName(value = "has_downloads")
    val hasDownloads: kotlin.Boolean,

    @SerialName(value = "has_issues")
    val hasIssues: kotlin.Boolean,

    @SerialName(value = "has_pages")
    val hasPages: kotlin.Boolean,

    @SerialName(value = "has_projects")
    val hasProjects: kotlin.Boolean,

    @SerialName(value = "has_wiki")
    val hasWiki: kotlin.Boolean,

    @SerialName(value = "homepage")
    val homepage: kotlin.String?,

    @SerialName(value = "hooks_url")
    val hooksUrl: kotlin.String,

    @SerialName(value = "html_url")
    val htmlUrl: kotlin.String,

    @SerialName(value = "id")
    val id: kotlin.Int,

    @SerialName(value = "issue_comment_url")
    val issueCommentUrl: kotlin.String,

    @SerialName(value = "issue_events_url")
    val issueEventsUrl: kotlin.String,

    @SerialName(value = "issues_url")
    val issuesUrl: kotlin.String,

    @SerialName(value = "keys_url")
    val keysUrl: kotlin.String,

    @SerialName(value = "labels_url")
    val labelsUrl: kotlin.String,

    @Contextual @SerialName(value = "language")
    val language: kotlin.Any?,

    @SerialName(value = "languages_url")
    val languagesUrl: kotlin.String,

    @Contextual @SerialName(value = "license")
    val license: kotlin.Any?,

    @SerialName(value = "merges_url")
    val mergesUrl: kotlin.String,

    @SerialName(value = "milestones_url")
    val milestonesUrl: kotlin.String,

    @Contextual @SerialName(value = "mirror_url")
    val mirrorUrl: kotlin.Any?,

    @SerialName(value = "name")
    val name: kotlin.String,

    @SerialName(value = "node_id")
    val nodeId: kotlin.String,

    @SerialName(value = "notifications_url")
    val notificationsUrl: kotlin.String,

    @SerialName(value = "open_issues")
    val openIssues: kotlin.Int,

    @SerialName(value = "open_issues_count")
    val openIssuesCount: kotlin.Int,

    @SerialName(value = "owner")
    val owner: BranchRestrictionPolicyUsersInner,

    @SerialName(value = "private")
    val `private`: kotlin.Boolean,

    @SerialName(value = "pulls_url")
    val pullsUrl: kotlin.String,

    @SerialName(value = "pushed_at")
    val pushedAt: kotlin.String,

    @SerialName(value = "releases_url")
    val releasesUrl: kotlin.String,

    @SerialName(value = "size")
    val propertySize: kotlin.Int,

    @SerialName(value = "ssh_url")
    val sshUrl: kotlin.String,

    @SerialName(value = "stargazers_count")
    val stargazersCount: kotlin.Int,

    @SerialName(value = "stargazers_url")
    val stargazersUrl: kotlin.String,

    @SerialName(value = "statuses_url")
    val statusesUrl: kotlin.String,

    @SerialName(value = "subscribers_url")
    val subscribersUrl: kotlin.String,

    @SerialName(value = "subscription_url")
    val subscriptionUrl: kotlin.String,

    @SerialName(value = "svn_url")
    val svnUrl: kotlin.String,

    @SerialName(value = "tags_url")
    val tagsUrl: kotlin.String,

    @SerialName(value = "teams_url")
    val teamsUrl: kotlin.String,

    @SerialName(value = "topics")
    val topics: kotlin.collections.List<@Contextual kotlin.Any>,

    @SerialName(value = "trees_url")
    val treesUrl: kotlin.String,

    @SerialName(value = "updated_at")
    val updatedAt: kotlin.String,

    @SerialName(value = "url")
    val url: kotlin.String,

    @SerialName(value = "visibility")
    val visibility: kotlin.String,

    @SerialName(value = "watchers")
    val watchers: kotlin.Int,

    @SerialName(value = "watchers_count")
    val watchersCount: kotlin.Int,

    /* Whether to allow auto-merge for pull requests. */
    @SerialName(value = "allow_auto_merge")
    val allowAutoMerge: kotlin.Boolean? = false,

    @SerialName(value = "allow_forking")
    val allowForking: kotlin.Boolean? = null,

    /* Whether to allow merge commits for pull requests. */
    @SerialName(value = "allow_merge_commit")
    val allowMergeCommit: kotlin.Boolean? = true,

    /* Whether to allow rebase merges for pull requests. */
    @SerialName(value = "allow_rebase_merge")
    val allowRebaseMerge: kotlin.Boolean? = true,

    /* Whether to allow squash merges for pull requests. */
    @SerialName(value = "allow_squash_merge")
    val allowSquashMerge: kotlin.Boolean? = true,

    @SerialName(value = "allow_update_branch")
    val allowUpdateBranch: kotlin.Boolean? = null,

    /* The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    @Contextual @SerialName(value = "custom_properties")
    val customProperties: kotlin.Any? = null,

    /* Whether to delete head branches when pull requests are merged */
    @SerialName(value = "delete_branch_on_merge")
    val deleteBranchOnMerge: kotlin.Boolean? = false,

    @SerialName(value = "disabled")
    val disabled: kotlin.Boolean? = null,

    @SerialName(value = "is_template")
    val isTemplate: kotlin.Boolean? = null,

    @SerialName(value = "master_branch")
    val masterBranch: kotlin.String? = null,

    @SerialName(value = "organization")
    val organization: kotlin.String? = null,

    @SerialName(value = "permissions")
    val permissions: RepositoryPermissions? = null,

    @SerialName(value = "public")
    val `public`: kotlin.Boolean? = null,

    @SerialName(value = "role_name")
    val roleName: kotlin.String? = null,

    @SerialName(value = "stargazers")
    val stargazers: kotlin.Int? = null,

    /* Whether to require contributors to sign off on web-based commits */
    @SerialName(value = "web_commit_signoff_required")
    val webCommitSignoffRequired: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: `true`
     */
    @Serializable
    enum class Fork(val value: kotlin.Boolean) {
        @SerialName(value = "true") `true`(true);
    }
}


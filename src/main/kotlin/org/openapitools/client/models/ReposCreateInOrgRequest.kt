/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param name The name of the repository.
 * @param description A short description of the repository.
 * @param homepage A URL with more information about the repository.
 * @param `private` Whether the repository is private.
 * @param visibility The visibility of the repository.
 * @param hasIssues Either `true` to enable issues for this repository or `false` to disable them.
 * @param hasProjects Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
 * @param hasWiki Either `true` to enable the wiki for this repository or `false` to disable it.
 * @param hasDownloads Whether downloads are enabled.
 * @param isTemplate Either `true` to make this repo available as a template repository or `false` to prevent it.
 * @param teamId The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
 * @param autoInit Pass `true` to create an initial commit with empty README.
 * @param gitignoreTemplate Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".
 * @param licenseTemplate Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".
 * @param allowSquashMerge Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
 * @param allowMergeCommit Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
 * @param allowRebaseMerge Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
 * @param allowAutoMerge Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
 * @param deleteBranchOnMerge Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
 * @param useSquashPrTitleAsDefault Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
 * @param squashMergeCommitTitle The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 * @param squashMergeCommitMessage The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
 * @param mergeCommitTitle The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 * @param mergeCommitMessage The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
 * @param customProperties The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
 */
@Serializable

data class ReposCreateInOrgRequest (

    /* The name of the repository. */
    @SerialName(value = "name")
    val name: kotlin.String,

    /* A short description of the repository. */
    @SerialName(value = "description")
    val description: kotlin.String? = null,

    /* A URL with more information about the repository. */
    @SerialName(value = "homepage")
    val homepage: kotlin.String? = null,

    /* Whether the repository is private. */
    @SerialName(value = "private")
    val `private`: kotlin.Boolean? = false,

    /* The visibility of the repository. */
    @SerialName(value = "visibility")
    val visibility: ReposCreateInOrgRequest.Visibility? = null,

    /* Either `true` to enable issues for this repository or `false` to disable them. */
    @SerialName(value = "has_issues")
    val hasIssues: kotlin.Boolean? = true,

    /* Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
    @SerialName(value = "has_projects")
    val hasProjects: kotlin.Boolean? = true,

    /* Either `true` to enable the wiki for this repository or `false` to disable it. */
    @SerialName(value = "has_wiki")
    val hasWiki: kotlin.Boolean? = true,

    /* Whether downloads are enabled. */
    @SerialName(value = "has_downloads")
    val hasDownloads: kotlin.Boolean? = true,

    /* Either `true` to make this repo available as a template repository or `false` to prevent it. */
    @SerialName(value = "is_template")
    val isTemplate: kotlin.Boolean? = false,

    /* The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    @SerialName(value = "team_id")
    val teamId: kotlin.Int? = null,

    /* Pass `true` to create an initial commit with empty README. */
    @SerialName(value = "auto_init")
    val autoInit: kotlin.Boolean? = false,

    /* Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\". */
    @SerialName(value = "gitignore_template")
    val gitignoreTemplate: kotlin.String? = null,

    /* Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\". */
    @SerialName(value = "license_template")
    val licenseTemplate: kotlin.String? = null,

    /* Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
    @SerialName(value = "allow_squash_merge")
    val allowSquashMerge: kotlin.Boolean? = true,

    /* Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
    @SerialName(value = "allow_merge_commit")
    val allowMergeCommit: kotlin.Boolean? = true,

    /* Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
    @SerialName(value = "allow_rebase_merge")
    val allowRebaseMerge: kotlin.Boolean? = true,

    /* Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge. */
    @SerialName(value = "allow_auto_merge")
    val allowAutoMerge: kotlin.Boolean? = false,

    /* Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.** */
    @SerialName(value = "delete_branch_on_merge")
    val deleteBranchOnMerge: kotlin.Boolean? = false,

    /* Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead. */
    @SerialName(value = "use_squash_pr_title_as_default")
    @Deprecated(message = "This property is deprecated.")
    val useSquashPrTitleAsDefault: kotlin.Boolean? = false,

    /* The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit). */
    @SerialName(value = "squash_merge_commit_title")
    val squashMergeCommitTitle: ReposCreateInOrgRequest.SquashMergeCommitTitle? = null,

    /* The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message. */
    @SerialName(value = "squash_merge_commit_message")
    val squashMergeCommitMessage: ReposCreateInOrgRequest.SquashMergeCommitMessage? = null,

    /* The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name). */
    @SerialName(value = "merge_commit_title")
    val mergeCommitTitle: ReposCreateInOrgRequest.MergeCommitTitle? = null,

    /* The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message. */
    @SerialName(value = "merge_commit_message")
    val mergeCommitMessage: ReposCreateInOrgRequest.MergeCommitMessage? = null,

    /* The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values. */
    @Contextual @SerialName(value = "custom_properties")
    val customProperties: kotlin.Any? = null

) {

    /**
     * The visibility of the repository.
     *
     * Values: `public`,`private`
     */
    @Serializable
    enum class Visibility(val value: kotlin.String) {
        @SerialName(value = "public") `public`("public"),
        @SerialName(value = "private") `private`("private");
    }
    /**
     * The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     *
     * Values: PR_TITLE,COMMIT_OR_PR_TITLE
     */
    @Serializable
    enum class SquashMergeCommitTitle(val value: kotlin.String) {
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "COMMIT_OR_PR_TITLE") COMMIT_OR_PR_TITLE("COMMIT_OR_PR_TITLE");
    }
    /**
     * The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.
     *
     * Values: PR_BODY,COMMIT_MESSAGES,BLANK
     */
    @Serializable
    enum class SquashMergeCommitMessage(val value: kotlin.String) {
        @SerialName(value = "PR_BODY") PR_BODY("PR_BODY"),
        @SerialName(value = "COMMIT_MESSAGES") COMMIT_MESSAGES("COMMIT_MESSAGES"),
        @SerialName(value = "BLANK") BLANK("BLANK");
    }
    /**
     * The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     *
     * Values: PR_TITLE,MERGE_MESSAGE
     */
    @Serializable
    enum class MergeCommitTitle(val value: kotlin.String) {
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "MERGE_MESSAGE") MERGE_MESSAGE("MERGE_MESSAGE");
    }
    /**
     * The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.
     *
     * Values: PR_BODY,PR_TITLE,BLANK
     */
    @Serializable
    enum class MergeCommitMessage(val value: kotlin.String) {
        @SerialName(value = "PR_BODY") PR_BODY("PR_BODY"),
        @SerialName(value = "PR_TITLE") PR_TITLE("PR_TITLE"),
        @SerialName(value = "BLANK") BLANK("BLANK");
    }
}


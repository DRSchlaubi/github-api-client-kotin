/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Commit
import org.openapitools.client.models.DiffEntry

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * Commit Comparison
 *
 * @param url 
 * @param htmlUrl 
 * @param permalinkUrl 
 * @param diffUrl 
 * @param patchUrl 
 * @param baseCommit 
 * @param mergeBaseCommit 
 * @param status 
 * @param aheadBy 
 * @param behindBy 
 * @param totalCommits 
 * @param commits 
 * @param files 
 */
@Serializable

data class CommitComparison (

    @Contextual @SerialName(value = "url")
    val url: java.net.URI,

    @Contextual @SerialName(value = "html_url")
    val htmlUrl: java.net.URI,

    @Contextual @SerialName(value = "permalink_url")
    val permalinkUrl: java.net.URI,

    @Contextual @SerialName(value = "diff_url")
    val diffUrl: java.net.URI,

    @Contextual @SerialName(value = "patch_url")
    val patchUrl: java.net.URI,

    @SerialName(value = "base_commit")
    val baseCommit: Commit,

    @SerialName(value = "merge_base_commit")
    val mergeBaseCommit: Commit,

    @SerialName(value = "status")
    val status: CommitComparison.Status,

    @SerialName(value = "ahead_by")
    val aheadBy: kotlin.Int,

    @SerialName(value = "behind_by")
    val behindBy: kotlin.Int,

    @SerialName(value = "total_commits")
    val totalCommits: kotlin.Int,

    @SerialName(value = "commits")
    val commits: kotlin.collections.List<Commit>,

    @SerialName(value = "files")
    val files: kotlin.collections.List<DiffEntry>? = null

) {

    /**
     * 
     *
     * Values: diverged,ahead,behind,identical
     */
    @Serializable
    enum class Status(val value: kotlin.String) {
        @SerialName(value = "diverged") diverged("diverged"),
        @SerialName(value = "ahead") ahead("ahead"),
        @SerialName(value = "behind") behind("behind"),
        @SerialName(value = "identical") identical("identical");
    }
}


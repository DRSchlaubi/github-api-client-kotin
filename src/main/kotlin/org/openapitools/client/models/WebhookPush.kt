/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Commit
import org.openapitools.client.models.Commit1
import org.openapitools.client.models.Committer1
import org.openapitools.client.models.EnterpriseWebhooks
import org.openapitools.client.models.OrganizationSimpleWebhooks
import org.openapitools.client.models.Repository1
import org.openapitools.client.models.SimpleInstallation
import org.openapitools.client.models.SimpleUserWebhooks

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual

/**
 * 
 *
 * @param after The SHA of the most recent commit on `ref` after the push.
 * @param baseRef 
 * @param before The SHA of the most recent commit on `ref` before the push.
 * @param commits An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
 * @param compare URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
 * @param created Whether this push created the `ref`.
 * @param deleted Whether this push deleted the `ref`.
 * @param forced Whether this push was a force push of the `ref`.
 * @param headCommit 
 * @param pusher 
 * @param ref The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
 * @param repository 
 * @param enterprise 
 * @param installation 
 * @param organization 
 * @param sender 
 */
@Serializable

data class WebhookPush (

    /* The SHA of the most recent commit on `ref` after the push. */
    @SerialName(value = "after")
    val after: kotlin.String,

    @SerialName(value = "base_ref")
    val baseRef: kotlin.String?,

    /* The SHA of the most recent commit on `ref` before the push. */
    @SerialName(value = "before")
    val before: kotlin.String,

    /* An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits. */
    @SerialName(value = "commits")
    val commits: kotlin.collections.List<Commit>,

    /* URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit. */
    @SerialName(value = "compare")
    val compare: kotlin.String,

    /* Whether this push created the `ref`. */
    @SerialName(value = "created")
    val created: kotlin.Boolean,

    /* Whether this push deleted the `ref`. */
    @SerialName(value = "deleted")
    val deleted: kotlin.Boolean,

    /* Whether this push was a force push of the `ref`. */
    @SerialName(value = "forced")
    val forced: kotlin.Boolean,

    @SerialName(value = "head_commit")
    val headCommit: Commit1,

    @SerialName(value = "pusher")
    val pusher: Committer1,

    /* The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`. */
    @SerialName(value = "ref")
    val ref: kotlin.String,

    @SerialName(value = "repository")
    val repository: Repository1,

    @SerialName(value = "enterprise")
    val enterprise: EnterpriseWebhooks? = null,

    @SerialName(value = "installation")
    val installation: SimpleInstallation? = null,

    @SerialName(value = "organization")
    val organization: OrganizationSimpleWebhooks? = null,

    @SerialName(value = "sender")
    val sender: SimpleUserWebhooks? = null

)


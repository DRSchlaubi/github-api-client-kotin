/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.DependencyGraphCreateRepositorySnapshot201Response
import org.openapitools.client.models.DependencyGraphDiffInner
import org.openapitools.client.models.DependencyGraphSpdxSbom
import org.openapitools.client.models.Snapshot

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class DependencyGraphApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Create a snapshot of dependencies for a repository
        * Create a new snapshot of a repository&#39;s dependencies.  The authenticated user must have access to the repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param snapshot  
         * @return DependencyGraphCreateRepositorySnapshot201Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependencyGraphCreateRepositorySnapshot(owner: kotlin.String, repo: kotlin.String, snapshot: Snapshot): HttpResponse<DependencyGraphCreateRepositorySnapshot201Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = snapshot

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/dependency-graph/snapshots".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a diff of the dependencies between commits
        * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param basehead The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format &#x60;{base}...{head}&#x60;. 
         * @param name The full path, relative to the repository root, of the dependency manifest file. (optional)
         * @return kotlin.collections.List<DependencyGraphDiffInner>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependencyGraphDiffRange(owner: kotlin.String, repo: kotlin.String, basehead: kotlin.String, name: kotlin.String?): HttpResponse<kotlin.collections.List<DependencyGraphDiffInner>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            name?.apply { localVariableQuery["name"] = listOf("$name") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "basehead" + "}", "$basehead"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Export a software bill of materials (SBOM) for a repository.
        * Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return DependencyGraphSpdxSbom
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependencyGraphExportSbom(owner: kotlin.String, repo: kotlin.String): HttpResponse<DependencyGraphSpdxSbom> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependency-graph/sbom".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.ActionsListSelectedReposForOrgSecret200Response
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.Codespace
import org.openapitools.client.models.CodespaceExportDetails
import org.openapitools.client.models.CodespaceWithFullRepository
import org.openapitools.client.models.CodespacesCreateForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesCreateOrUpdateOrgSecretRequest
import org.openapitools.client.models.CodespacesCreateOrUpdateRepoSecretRequest
import org.openapitools.client.models.CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesCreateWithPrForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesCreateWithRepoForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesDeleteCodespacesAccessUsersRequest
import org.openapitools.client.models.CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response
import org.openapitools.client.models.CodespacesListInOrganization200Response
import org.openapitools.client.models.CodespacesListOrgSecrets200Response
import org.openapitools.client.models.CodespacesListRepoSecrets200Response
import org.openapitools.client.models.CodespacesListSecretsForAuthenticatedUser200Response
import org.openapitools.client.models.CodespacesOrgSecret
import org.openapitools.client.models.CodespacesPermissionsCheckForDevcontainer
import org.openapitools.client.models.CodespacesPreFlightWithRepoForAuthenticatedUser200Response
import org.openapitools.client.models.CodespacesPublicKey
import org.openapitools.client.models.CodespacesPublishForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesRepoMachinesForAuthenticatedUser200Response
import org.openapitools.client.models.CodespacesSecret
import org.openapitools.client.models.CodespacesSetCodespacesAccessRequest
import org.openapitools.client.models.CodespacesSetCodespacesAccessUsersRequest
import org.openapitools.client.models.CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesSetSelectedReposForOrgSecretRequest
import org.openapitools.client.models.CodespacesUpdateForAuthenticatedUserRequest
import org.openapitools.client.models.CodespacesUserPublicKey
import org.openapitools.client.models.RepoCodespacesSecret
import org.openapitools.client.models.ValidationError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class CodespacesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add a selected repository to a user secret
        * Adds a repository to the selected repositories for a user&#39;s development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun codespacesAddRepositoryForSecretForAuthenticatedUser(secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add selected repository to an organization secret
        * Adds a repository to an organization development environment secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret). OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun codespacesAddSelectedRepoToOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if permissions defined by a devcontainer have been accepted by the authenticated user
        * Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The git reference that points to the location of the devcontainer configuration to use for the permission check. The value of &#x60;ref&#x60; will typically be a branch name (&#x60;heads/BRANCH_NAME&#x60;). For more information, see \&quot;[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\&quot; in the Git documentation. 
         * @param devcontainerPath Path to the devcontainer.json configuration to use for the permission check. 
         * @return CodespacesPermissionsCheckForDevcontainer
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCheckPermissionsForDevcontainer(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, devcontainerPath: kotlin.String): HttpResponse<CodespacesPermissionsCheckForDevcontainer> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            devcontainerPath?.apply { localVariableQuery["devcontainer_path"] = listOf("$devcontainerPath") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/permissions_check".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List machine types for a codespace
        * List the machine types a codespace can transition to use.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return CodespacesRepoMachinesForAuthenticatedUser200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCodespaceMachinesForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/{codespace_name}/machines".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a codespace for the authenticated user
        * Creates a new codespace, owned by the authenticated user.  This endpoint requires either a &#x60;repository_id&#x60; OR a &#x60;pull_request&#x60; but not both.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespacesCreateForAuthenticatedUserRequest  
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateForAuthenticatedUser(codespacesCreateForAuthenticatedUserRequest: CodespacesCreateForAuthenticatedUserRequest): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/codespaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update an organization secret
        * Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param codespacesCreateOrUpdateOrgSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateOrUpdateOrgSecret(org: kotlin.String, secretName: kotlin.String, codespacesCreateOrUpdateOrgSecretRequest: CodespacesCreateOrUpdateOrgSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateOrUpdateOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/codespaces/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update a repository secret
        * Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param codespacesCreateOrUpdateRepoSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateOrUpdateRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, codespacesCreateOrUpdateRepoSecretRequest: CodespacesCreateOrUpdateRepoSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateOrUpdateRepoSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update a secret for the authenticated user
        * Creates or updates a development environment secret for a user&#39;s codespace with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @param codespacesCreateOrUpdateSecretForAuthenticatedUserRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateOrUpdateSecretForAuthenticatedUser(secretName: kotlin.String, codespacesCreateOrUpdateSecretForAuthenticatedUserRequest: CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateOrUpdateSecretForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/codespaces/secrets/{secret_name}".replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a codespace from a pull request
        * Creates a codespace owned by the authenticated user for the specified pull request.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param pullNumber The number that identifies the pull request. 
         * @param codespacesCreateWithPrForAuthenticatedUserRequest  
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateWithPrForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, pullNumber: kotlin.Int, codespacesCreateWithPrForAuthenticatedUserRequest: CodespacesCreateWithPrForAuthenticatedUserRequest): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateWithPrForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pulls/{pull_number}/codespaces".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "pull_number" + "}", "$pullNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a codespace in a repository
        * Creates a codespace owned by the authenticated user in the specified repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param codespacesCreateWithRepoForAuthenticatedUserRequest  
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesCreateWithRepoForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, codespacesCreateWithRepoForAuthenticatedUserRequest: CodespacesCreateWithRepoForAuthenticatedUserRequest): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesCreateWithRepoForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/codespaces".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove users from Codespaces access for an organization
        * Codespaces for the specified users will no longer be billed to the organization.  To use this endpoint, the access settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting, see \&quot;[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param codespacesDeleteCodespacesAccessUsersRequest  
         * @return void
        */
        open suspend fun codespacesDeleteCodespacesAccessUsers(org: kotlin.String, codespacesDeleteCodespacesAccessUsersRequest: CodespacesDeleteCodespacesAccessUsersRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesDeleteCodespacesAccessUsersRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/codespaces/access/selected_users".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a codespace for the authenticated user
        * Deletes a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesDeleteForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/codespaces/{codespace_name}".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a codespace from the organization
        * Deletes a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param codespaceName The name of the codespace. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesDeleteFromOrganization(org: kotlin.String, username: kotlin.String, codespaceName: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/members/{username}/codespaces/{codespace_name}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username").replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization secret
        * Deletes an organization development environment secret using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun codespacesDeleteOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/codespaces/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository secret
        * Deletes a development environment secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun codespacesDeleteRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a secret for the authenticated user
        * Deletes a development environment secret from a user&#39;s codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun codespacesDeleteSecretForAuthenticatedUser(secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/codespaces/secrets/{secret_name}".replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Export a codespace for the authenticated user
        * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.  If changes cannot be pushed to the codespace&#39;s repository, they will be pushed to a new or previously-existing fork instead.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return CodespaceExportDetails
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesExportForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<CodespaceExportDetails> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/codespaces/{codespace_name}/exports".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List codespaces for a user in organization
        * Lists the codespaces that a member of an organization has for repositories in that organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListInOrganization200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetCodespacesForUserInOrg(org: kotlin.String, username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListInOrganization200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/members/{username}/codespaces".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get details about a codespace export
        * Gets information about an export of a codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @param exportId The ID of the export operation, or &#x60;latest&#x60;. Currently only &#x60;latest&#x60; is currently supported. 
         * @return CodespaceExportDetails
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetExportDetailsForAuthenticatedUser(codespaceName: kotlin.String, exportId: kotlin.String): HttpResponse<CodespaceExportDetails> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/{codespace_name}/exports/{export_id}".replace("{" + "codespace_name" + "}", "$codespaceName").replace("{" + "export_id" + "}", "$exportId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a codespace for the authenticated user
        * Gets information about a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/{codespace_name}".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization public key
        * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return CodespacesPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetOrgPublicKey(org: kotlin.String): HttpResponse<CodespacesPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/codespaces/secrets/public-key".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization secret
        * Gets an organization development environment secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return CodespacesOrgSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<CodespacesOrgSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/codespaces/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get public key for the authenticated user
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @return CodespacesUserPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetPublicKeyForAuthenticatedUser(): HttpResponse<CodespacesUserPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/secrets/public-key",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository public key
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return CodespacesPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetRepoPublicKey(owner: kotlin.String, repo: kotlin.String): HttpResponse<CodespacesPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/secrets/public-key".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository secret
        * Gets a single repository development environment secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return RepoCodespacesSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<RepoCodespacesSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a secret for the authenticated user
        * Gets a development environment secret available to a user&#39;s codespaces without revealing its encrypted value.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @return CodespacesSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesGetSecretForAuthenticatedUser(secretName: kotlin.String): HttpResponse<CodespacesSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/secrets/{secret_name}".replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List devcontainer configurations in a repository for the authenticated user
        * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files specify launchpoint configurations for codespaces created within the repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListDevcontainersInRepositoryForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListDevcontainersInRepositoryForAuthenticatedUser200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/devcontainers".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List codespaces for the authenticated user
        * Lists the authenticated user&#39;s codespaces.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param repositoryId ID of the Repository to filter on (optional)
         * @return CodespacesListInOrganization200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?, repositoryId: kotlin.Int?): HttpResponse<CodespacesListInOrganization200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            repositoryId?.apply { localVariableQuery["repository_id"] = listOf("$repositoryId") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List codespaces for the organization
        * Lists the codespaces associated to a specified organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListInOrganization200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListInOrganization(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListInOrganization200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/codespaces".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List codespaces in a repository for the authenticated user
        * Lists the codespaces associated to a specified repository and the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListInOrganization200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListInRepositoryForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListInOrganization200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization secrets
        * Lists all Codespaces development environment secrets available at the organization-level without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListOrgSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListOrgSecrets(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListOrgSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/codespaces/secrets".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository secrets
        * Lists all development environment secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListRepoSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListRepoSecrets(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListRepoSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/secrets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories for a user secret
        * List the repositories that have been granted the ability to use a user&#39;s development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @return ActionsListSelectedReposForOrgSecret200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListRepositoriesForSecretForAuthenticatedUser(secretName: kotlin.String): HttpResponse<ActionsListSelectedReposForOrgSecret200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/secrets/{secret_name}/repositories".replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List secrets for the authenticated user
        * Lists all development environment secrets available for a user&#39;s codespaces without revealing their encrypted values.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CodespacesListSecretsForAuthenticatedUser200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListSecretsForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CodespacesListSecretsForAuthenticatedUser200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/codespaces/secrets",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories for an organization secret
        * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return ActionsListSelectedReposForOrgSecret200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesListSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<ActionsListSelectedReposForOrgSecret200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/codespaces/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get default attributes for a codespace
        * Gets the default attributes for codespaces created by the user with the repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. (optional)
         * @param clientIp An alternative IP for default location auto-detection, such as when proxying a request. (optional)
         * @return CodespacesPreFlightWithRepoForAuthenticatedUser200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesPreFlightWithRepoForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String?, clientIp: kotlin.String?): HttpResponse<CodespacesPreFlightWithRepoForAuthenticatedUser200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            clientIp?.apply { localVariableQuery["client_ip"] = listOf("$clientIp") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/new".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository from an unpublished codespace
        * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.  The codespace&#39;s token is granted write permissions to the repository, allowing the user to push their changes.  This will fail for a codespace that is already published, meaning it has an associated repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @param codespacesPublishForAuthenticatedUserRequest  
         * @return CodespaceWithFullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesPublishForAuthenticatedUser(codespaceName: kotlin.String, codespacesPublishForAuthenticatedUserRequest: CodespacesPublishForAuthenticatedUserRequest): HttpResponse<CodespaceWithFullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesPublishForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/codespaces/{codespace_name}/publish".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a selected repository from a user secret
        * Removes a repository from the selected repositories for a user&#39;s development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun codespacesRemoveRepositoryForSecretForAuthenticatedUser(secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove selected repository from an organization secret
        * Removes a repository from an organization development environment secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun codespacesRemoveSelectedRepoFromOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List available machine types for a repository
        * List the machine types available for a given repository based on its configuration.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param location The location to check for available machines. Assigned by IP if not provided. (optional)
         * @param clientIp IP for location auto-detection when proxying a request (optional, default to "push")
         * @param ref The branch or commit to check for prebuild availability and devcontainer restrictions. (optional)
         * @return CodespacesRepoMachinesForAuthenticatedUser200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesRepoMachinesForAuthenticatedUser(owner: kotlin.String, repo: kotlin.String, location: kotlin.String?, clientIp: kotlin.String?, ref: kotlin.String?): HttpResponse<CodespacesRepoMachinesForAuthenticatedUser200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            location?.apply { localVariableQuery["location"] = listOf("$location") }
            clientIp?.apply { localVariableQuery["client_ip"] = listOf("$clientIp") }
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codespaces/machines".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Manage access control for organization codespaces
        * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces access permissions for users according to the visibility. OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param codespacesSetCodespacesAccessRequest  
         * @return void
        */
        open suspend fun codespacesSetCodespacesAccess(org: kotlin.String, codespacesSetCodespacesAccessRequest: CodespacesSetCodespacesAccessRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesSetCodespacesAccessRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/codespaces/access".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add users to Codespaces access for an organization
        * Codespaces for the specified users will be billed to the organization.  To use this endpoint, the access settings for the organization must be set to &#x60;selected_members&#x60;. For information on how to change this setting, see \&quot;[Manage access control for organization codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param codespacesSetCodespacesAccessUsersRequest  
         * @return void
        */
        open suspend fun codespacesSetCodespacesAccessUsers(org: kotlin.String, codespacesSetCodespacesAccessUsersRequest: CodespacesSetCodespacesAccessUsersRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesSetCodespacesAccessUsersRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/codespaces/access/selected_users".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories for a user secret
        * Select the repositories that will use a user&#39;s development environment secret.  The authenticated user must have Codespaces access to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; or &#x60;codespace:secrets&#x60; scope to use this endpoint.
         * @param secretName The name of the secret. 
         * @param codespacesSetRepositoriesForSecretForAuthenticatedUserRequest  
         * @return void
        */
        open suspend fun codespacesSetRepositoriesForSecretForAuthenticatedUser(secretName: kotlin.String, codespacesSetRepositoriesForSecretForAuthenticatedUserRequest: CodespacesSetRepositoriesForSecretForAuthenticatedUserRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesSetRepositoriesForSecretForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/codespaces/secrets/{secret_name}/repositories".replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories for an organization secret
        * Replaces all repositories for an organization development environment secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param codespacesSetSelectedReposForOrgSecretRequest  
         * @return void
        */
        open suspend fun codespacesSetSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, codespacesSetSelectedReposForOrgSecretRequest: CodespacesSetSelectedReposForOrgSecretRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesSetSelectedReposForOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/codespaces/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Start a codespace for the authenticated user
        * Starts a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesStartForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/codespaces/{codespace_name}/start".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Stop a codespace for the authenticated user
        * Stops a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesStopForAuthenticatedUser(codespaceName: kotlin.String): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/codespaces/{codespace_name}/stop".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Stop a codespace for an organization user
        * Stops a user&#39;s codespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param codespaceName The name of the codespace. 
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesStopInOrganization(org: kotlin.String, username: kotlin.String, codespaceName: kotlin.String): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username").replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a codespace for the authenticated user
        * Updates a codespace owned by the authenticated user. Currently only the codespace&#39;s machine type and recent folders can be modified using this endpoint.  If you specify a new machine type it will be applied the next time your codespace is started.  OAuth app tokens and personal access tokens (classic) need the &#x60;codespace&#x60; scope to use this endpoint.
         * @param codespaceName The name of the codespace. 
         * @param codespacesUpdateForAuthenticatedUserRequest  (optional)
         * @return Codespace
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun codespacesUpdateForAuthenticatedUser(codespaceName: kotlin.String, codespacesUpdateForAuthenticatedUserRequest: CodespacesUpdateForAuthenticatedUserRequest?): HttpResponse<Codespace> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = codespacesUpdateForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/user/codespaces/{codespace_name}".replace("{" + "codespace_name" + "}", "$codespaceName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

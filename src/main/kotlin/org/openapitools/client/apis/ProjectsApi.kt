/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.OrgsUpdate422Response
import org.openapitools.client.models.Project
import org.openapitools.client.models.ProjectCard
import org.openapitools.client.models.ProjectCollaboratorPermission
import org.openapitools.client.models.ProjectColumn
import org.openapitools.client.models.ProjectsAddCollaboratorRequest
import org.openapitools.client.models.ProjectsCreateCardRequest
import org.openapitools.client.models.ProjectsCreateForAuthenticatedUserRequest
import org.openapitools.client.models.ProjectsCreateForOrgRequest
import org.openapitools.client.models.ProjectsDeleteCard403Response
import org.openapitools.client.models.ProjectsMoveCard403Response
import org.openapitools.client.models.ProjectsMoveCard503Response
import org.openapitools.client.models.ProjectsMoveCardRequest
import org.openapitools.client.models.ProjectsMoveColumnRequest
import org.openapitools.client.models.ProjectsUpdateCardRequest
import org.openapitools.client.models.ProjectsUpdateColumnRequest
import org.openapitools.client.models.ProjectsUpdateRequest
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.ValidationError
import org.openapitools.client.models.ValidationErrorSimple

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class ProjectsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add project collaborator
        * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project &#x60;admin&#x60; to add a collaborator.
         * @param projectId The unique identifier of the project. 
         * @param username The handle for the GitHub user account. 
         * @param projectsAddCollaboratorRequest  (optional)
         * @return void
        */
        open suspend fun projectsAddCollaborator(projectId: kotlin.Int, username: kotlin.String, projectsAddCollaboratorRequest: ProjectsAddCollaboratorRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsAddCollaboratorRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/projects/{project_id}/collaborators/{username}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a project card
        * 
         * @param columnId The unique identifier of the column. 
         * @param projectsCreateCardRequest  
         * @return ProjectCard
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsCreateCard(columnId: kotlin.Int, projectsCreateCardRequest: ProjectsCreateCardRequest): HttpResponse<ProjectCard> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsCreateCardRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/columns/{column_id}/cards".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a project column
        * Creates a new project column.
         * @param projectId The unique identifier of the project. 
         * @param projectsUpdateColumnRequest  
         * @return ProjectColumn
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsCreateColumn(projectId: kotlin.Int, projectsUpdateColumnRequest: ProjectsUpdateColumnRequest): HttpResponse<ProjectColumn> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsUpdateColumnRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/{project_id}/columns".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a user project
        * Creates a user project board. Returns a &#x60;410 Gone&#x60; status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param projectsCreateForAuthenticatedUserRequest  
         * @return Project
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsCreateForAuthenticatedUser(projectsCreateForAuthenticatedUserRequest: ProjectsCreateForAuthenticatedUserRequest): HttpResponse<Project> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsCreateForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/projects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization project
        * Creates an organization project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param org The organization name. The name is not case sensitive. 
         * @param projectsCreateForOrgRequest  
         * @return Project
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsCreateForOrg(org: kotlin.String, projectsCreateForOrgRequest: ProjectsCreateForOrgRequest): HttpResponse<Project> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsCreateForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/projects".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository project
        * Creates a repository project board. Returns a &#x60;410 Gone&#x60; status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param projectsCreateForOrgRequest  
         * @return Project
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsCreateForRepo(owner: kotlin.String, repo: kotlin.String, projectsCreateForOrgRequest: ProjectsCreateForOrgRequest): HttpResponse<Project> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsCreateForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/projects".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a project
        * Deletes a project board. Returns a &#x60;404 Not Found&#x60; status if projects are disabled.
         * @param projectId The unique identifier of the project. 
         * @return void
        */
        open suspend fun projectsDelete(projectId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a project card
        * Deletes a project card
         * @param cardId The unique identifier of the card. 
         * @return void
        */
        open suspend fun projectsDeleteCard(cardId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/columns/cards/{card_id}".replace("{" + "card_id" + "}", "$cardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a project column
        * Deletes a project column.
         * @param columnId The unique identifier of the column. 
         * @return void
        */
        open suspend fun projectsDeleteColumn(columnId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/columns/{column_id}".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a project
        * Gets a project by its &#x60;id&#x60;. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param projectId The unique identifier of the project. 
         * @return Project
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsGet(projectId: kotlin.Int): HttpResponse<Project> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a project card
        * Gets information about a project card.
         * @param cardId The unique identifier of the card. 
         * @return ProjectCard
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsGetCard(cardId: kotlin.Int): HttpResponse<ProjectCard> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/columns/cards/{card_id}".replace("{" + "card_id" + "}", "$cardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a project column
        * Gets information about a project column.
         * @param columnId The unique identifier of the column. 
         * @return ProjectColumn
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsGetColumn(columnId: kotlin.Int): HttpResponse<ProjectColumn> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/columns/{column_id}".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get project permission for a user
        * Returns the collaborator&#39;s permission level for an organization project. Possible values for the &#x60;permission&#x60; key: &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, &#x60;none&#x60;. You must be an organization owner or a project &#x60;admin&#x60; to review a user&#39;s permission level.
         * @param projectId The unique identifier of the project. 
         * @param username The handle for the GitHub user account. 
         * @return ProjectCollaboratorPermission
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsGetPermissionForUser(projectId: kotlin.Int, username: kotlin.String): HttpResponse<ProjectCollaboratorPermission> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/collaborators/{username}/permission".replace("{" + "project_id" + "}", "$projectId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List project cards
        * Lists the project cards in a project.
         * @param columnId The unique identifier of the column. 
         * @param archivedState Filters the project cards that are returned by the card&#39;s state. (optional, default to not_archived)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<ProjectCard>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListCards(columnId: kotlin.Int, archivedState: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<ProjectCard>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            archivedState?.apply { localVariableQuery["archived_state"] = listOf("$archivedState") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/columns/{column_id}/cards".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List project collaborators
        * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project &#x60;admin&#x60; to list collaborators.
         * @param projectId The unique identifier of the project. 
         * @param affiliation Filters the collaborators by their affiliation. &#x60;outside&#x60; means outside collaborators of a project that are not a member of the project&#39;s organization. &#x60;direct&#x60; means collaborators with permissions to a project, regardless of organization membership status. &#x60;all&#x60; means all collaborators the authenticated user can see. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListCollaborators(projectId: kotlin.Int, affiliation: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            affiliation?.apply { localVariableQuery["affiliation"] = listOf("$affiliation") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/collaborators".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List project columns
        * Lists the project columns in a project.
         * @param projectId The unique identifier of the project. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<ProjectColumn>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListColumns(projectId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<ProjectColumn>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/projects/{project_id}/columns".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization projects
        * Lists the projects in an organization. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param org The organization name. The name is not case sensitive. 
         * @param state Indicates the state of the projects to return. (optional, default to open)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Project>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListForOrg(org: kotlin.String, state: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Project>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/projects".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository projects
        * Lists the projects in a repository. Returns a &#x60;404 Not Found&#x60; status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param state Indicates the state of the projects to return. (optional, default to open)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Project>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListForRepo(owner: kotlin.String, repo: kotlin.String, state: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Project>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/projects".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List user projects
        * Lists projects for a user.
         * @param username The handle for the GitHub user account. 
         * @param state Indicates the state of the projects to return. (optional, default to open)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Project>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsListForUser(username: kotlin.String, state: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Project>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/projects".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Move a project card
        * 
         * @param cardId The unique identifier of the card. 
         * @param projectsMoveCardRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsMoveCard(cardId: kotlin.Int, projectsMoveCardRequest: ProjectsMoveCardRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsMoveCardRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/columns/cards/{card_id}/moves".replace("{" + "card_id" + "}", "$cardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Move a project column
        * 
         * @param columnId The unique identifier of the column. 
         * @param projectsMoveColumnRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsMoveColumn(columnId: kotlin.Int, projectsMoveColumnRequest: ProjectsMoveColumnRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsMoveColumnRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects/columns/{column_id}/moves".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove user as a collaborator
        * Removes a collaborator from an organization project. You must be an organization owner or a project &#x60;admin&#x60; to remove a collaborator.
         * @param projectId The unique identifier of the project. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun projectsRemoveCollaborator(projectId: kotlin.Int, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/projects/{project_id}/collaborators/{username}".replace("{" + "project_id" + "}", "$projectId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a project
        * Updates a project board&#39;s information. Returns a &#x60;404 Not Found&#x60; status if projects are disabled. If you do not have sufficient privileges to perform this action, a &#x60;401 Unauthorized&#x60; or &#x60;410 Gone&#x60; status is returned.
         * @param projectId The unique identifier of the project. 
         * @param projectsUpdateRequest  (optional)
         * @return Project
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsUpdate(projectId: kotlin.Int, projectsUpdateRequest: ProjectsUpdateRequest?): HttpResponse<Project> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsUpdateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/projects/{project_id}".replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an existing project card
        * 
         * @param cardId The unique identifier of the card. 
         * @param projectsUpdateCardRequest  (optional)
         * @return ProjectCard
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsUpdateCard(cardId: kotlin.Int, projectsUpdateCardRequest: ProjectsUpdateCardRequest?): HttpResponse<ProjectCard> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsUpdateCardRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/projects/columns/cards/{card_id}".replace("{" + "card_id" + "}", "$cardId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an existing project column
        * 
         * @param columnId The unique identifier of the column. 
         * @param projectsUpdateColumnRequest  
         * @return ProjectColumn
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun projectsUpdateColumn(columnId: kotlin.Int, projectsUpdateColumnRequest: ProjectsUpdateColumnRequest): HttpResponse<ProjectColumn> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = projectsUpdateColumnRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/projects/columns/{column_id}".replace("{" + "column_id" + "}", "$columnId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.Reaction
import org.openapitools.client.models.ReactionsCreateForCommitCommentRequest
import org.openapitools.client.models.ReactionsCreateForIssueCommentRequest
import org.openapitools.client.models.ReactionsCreateForIssueRequest
import org.openapitools.client.models.ReactionsCreateForPullRequestReviewCommentRequest
import org.openapitools.client.models.ReactionsCreateForReleaseRequest
import org.openapitools.client.models.ReactionsCreateForTeamDiscussionCommentInOrgRequest
import org.openapitools.client.models.ReactionsCreateForTeamDiscussionInOrgRequest
import org.openapitools.client.models.ValidationError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class ReactionsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Create reaction for a commit comment
        * Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this commit comment.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionsCreateForCommitCommentRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionsCreateForCommitCommentRequest: ReactionsCreateForCommitCommentRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForCommitCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for an issue
        * Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param issueNumber The number that identifies the issue. 
         * @param reactionsCreateForIssueRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForIssue(owner: kotlin.String, repo: kotlin.String, issueNumber: kotlin.Int, reactionsCreateForIssueRequest: ReactionsCreateForIssueRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForIssueRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/issues/{issue_number}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "issue_number" + "}", "$issueNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for an issue comment
        * Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this issue comment.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionsCreateForIssueCommentRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForIssueComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionsCreateForIssueCommentRequest: ReactionsCreateForIssueCommentRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForIssueCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a pull request review comment
        * Create a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this pull request review comment.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionsCreateForPullRequestReviewCommentRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForPullRequestReviewComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionsCreateForPullRequestReviewCommentRequest: ReactionsCreateForPullRequestReviewCommentRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForPullRequestReviewCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a release
        * Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a &#x60;Status: 200 OK&#x60; means that you already added the reaction type to this release.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param reactionsCreateForReleaseRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, reactionsCreateForReleaseRequest: ReactionsCreateForReleaseRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForReleaseRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/releases/{release_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a team discussion comment
        * Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).  A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForTeamDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, reactionsCreateForTeamDiscussionCommentInOrgRequest: ReactionsCreateForTeamDiscussionCommentInOrgRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForTeamDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a team discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Create reaction for a team discussion comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)\&quot; endpoint.  Create a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).  A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion comment.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param reactionsCreateForTeamDiscussionCommentInOrgRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForTeamDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, reactionsCreateForTeamDiscussionCommentInOrgRequest: ReactionsCreateForTeamDiscussionCommentInOrgRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForTeamDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a team discussion
        * Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).  A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param reactionsCreateForTeamDiscussionInOrgRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForTeamDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, reactionsCreateForTeamDiscussionInOrgRequest: ReactionsCreateForTeamDiscussionInOrgRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForTeamDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create reaction for a team discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create reaction for a team discussion&#x60;](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.  Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).  A response with an HTTP &#x60;200&#x60; status means that you already added the reaction type to this team discussion.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param reactionsCreateForTeamDiscussionInOrgRequest  
         * @return Reaction
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsCreateForTeamDiscussionLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, reactionsCreateForTeamDiscussionInOrgRequest: ReactionsCreateForTeamDiscussionInOrgRequest): HttpResponse<Reaction> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reactionsCreateForTeamDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/teams/{team_id}/discussions/{discussion_number}/reactions".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a commit comment reaction
        * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an issue reaction
        * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param issueNumber The number that identifies the issue. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForIssue(owner: kotlin.String, repo: kotlin.String, issueNumber: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "issue_number" + "}", "$issueNumber").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an issue comment reaction
        * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id&#x60;.  Delete a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForIssueComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a pull request comment reaction
        * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.&#x60;  Delete a reaction to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForPullRequestComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a release reaction
        * **Note:** You can also specify a repository by &#x60;repository_id&#x60; using the route &#x60;DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id&#x60;.  Delete a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete team discussion reaction
        * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForTeamDiscussion(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete team discussion comment reaction
        * **Note:** You can also specify a team or organization with &#x60;team_id&#x60; and &#x60;org_id&#x60; using the route &#x60;DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id&#x60;.  Delete a reaction to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param reactionId The unique identifier of the reaction. 
         * @return void
        */
        open suspend fun reactionsDeleteForTeamDiscussionComment(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, reactionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber").replace("{" + "reaction_id" + "}", "$reactionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a commit comment
        * List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for an issue
        * List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param issueNumber The number that identifies the issue. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForIssue(owner: kotlin.String, repo: kotlin.String, issueNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/issues/{issue_number}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "issue_number" + "}", "$issueNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for an issue comment
        * List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForIssueComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a pull request review comment
        * List the reactions to a [pull request review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForPullRequestReviewComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a release
        * List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/{release_id}/reactions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a team discussion comment
        * List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForTeamDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a team discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion comment&#x60;](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.  List the reactions to a [team discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForTeamDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a team discussion
        * List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForTeamDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List reactions for a team discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List reactions for a team discussion&#x60;](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.  List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param content Returns a single [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Reaction>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reactionsListForTeamDiscussionLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, content: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Reaction>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            content?.apply { localVariableQuery["content"] = listOf("$content") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions/{discussion_number}/reactions".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

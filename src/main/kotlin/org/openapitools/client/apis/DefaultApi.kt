/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.WebhookBranchProtectionConfigurationDisabled
import org.openapitools.client.models.WebhookBranchProtectionConfigurationEnabled
import org.openapitools.client.models.WebhookBranchProtectionRuleCreated
import org.openapitools.client.models.WebhookBranchProtectionRuleDeleted
import org.openapitools.client.models.WebhookBranchProtectionRuleEdited
import org.openapitools.client.models.WebhookCheckRunCompleted
import org.openapitools.client.models.WebhookCheckRunCompletedFormEncoded
import org.openapitools.client.models.WebhookCheckRunCreated
import org.openapitools.client.models.WebhookCheckRunCreatedFormEncoded
import org.openapitools.client.models.WebhookCheckRunRequestedAction
import org.openapitools.client.models.WebhookCheckRunRequestedActionFormEncoded
import org.openapitools.client.models.WebhookCheckRunRerequested
import org.openapitools.client.models.WebhookCheckRunRerequestedFormEncoded
import org.openapitools.client.models.WebhookCheckSuiteCompleted
import org.openapitools.client.models.WebhookCheckSuiteRequested
import org.openapitools.client.models.WebhookCheckSuiteRerequested
import org.openapitools.client.models.WebhookCodeScanningAlertAppearedInBranch
import org.openapitools.client.models.WebhookCodeScanningAlertClosedByUser
import org.openapitools.client.models.WebhookCodeScanningAlertCreated
import org.openapitools.client.models.WebhookCodeScanningAlertFixed
import org.openapitools.client.models.WebhookCodeScanningAlertReopened
import org.openapitools.client.models.WebhookCodeScanningAlertReopenedByUser
import org.openapitools.client.models.WebhookCommitCommentCreated
import org.openapitools.client.models.WebhookCreate
import org.openapitools.client.models.WebhookCustomPropertyCreated
import org.openapitools.client.models.WebhookCustomPropertyDeleted
import org.openapitools.client.models.WebhookCustomPropertyUpdated
import org.openapitools.client.models.WebhookCustomPropertyValuesUpdated
import org.openapitools.client.models.WebhookDelete
import org.openapitools.client.models.WebhookDependabotAlertAutoDismissed
import org.openapitools.client.models.WebhookDependabotAlertAutoReopened
import org.openapitools.client.models.WebhookDependabotAlertCreated
import org.openapitools.client.models.WebhookDependabotAlertDismissed
import org.openapitools.client.models.WebhookDependabotAlertFixed
import org.openapitools.client.models.WebhookDependabotAlertReintroduced
import org.openapitools.client.models.WebhookDependabotAlertReopened
import org.openapitools.client.models.WebhookDeployKeyCreated
import org.openapitools.client.models.WebhookDeployKeyDeleted
import org.openapitools.client.models.WebhookDeploymentCreated
import org.openapitools.client.models.WebhookDeploymentProtectionRuleRequested
import org.openapitools.client.models.WebhookDeploymentReviewApproved
import org.openapitools.client.models.WebhookDeploymentReviewRejected
import org.openapitools.client.models.WebhookDeploymentReviewRequested
import org.openapitools.client.models.WebhookDeploymentStatusCreated
import org.openapitools.client.models.WebhookDiscussionAnswered
import org.openapitools.client.models.WebhookDiscussionCategoryChanged
import org.openapitools.client.models.WebhookDiscussionClosed
import org.openapitools.client.models.WebhookDiscussionCommentCreated
import org.openapitools.client.models.WebhookDiscussionCommentDeleted
import org.openapitools.client.models.WebhookDiscussionCommentEdited
import org.openapitools.client.models.WebhookDiscussionCreated
import org.openapitools.client.models.WebhookDiscussionDeleted
import org.openapitools.client.models.WebhookDiscussionEdited
import org.openapitools.client.models.WebhookDiscussionLabeled
import org.openapitools.client.models.WebhookDiscussionLocked
import org.openapitools.client.models.WebhookDiscussionPinned
import org.openapitools.client.models.WebhookDiscussionReopened
import org.openapitools.client.models.WebhookDiscussionTransferred
import org.openapitools.client.models.WebhookDiscussionUnanswered
import org.openapitools.client.models.WebhookDiscussionUnlabeled
import org.openapitools.client.models.WebhookDiscussionUnlocked
import org.openapitools.client.models.WebhookDiscussionUnpinned
import org.openapitools.client.models.WebhookFork
import org.openapitools.client.models.WebhookGithubAppAuthorizationRevoked
import org.openapitools.client.models.WebhookGollum
import org.openapitools.client.models.WebhookInstallationCreated
import org.openapitools.client.models.WebhookInstallationDeleted
import org.openapitools.client.models.WebhookInstallationNewPermissionsAccepted
import org.openapitools.client.models.WebhookInstallationRepositoriesAdded
import org.openapitools.client.models.WebhookInstallationRepositoriesRemoved
import org.openapitools.client.models.WebhookInstallationSuspend
import org.openapitools.client.models.WebhookInstallationTargetRenamed
import org.openapitools.client.models.WebhookInstallationUnsuspend
import org.openapitools.client.models.WebhookIssueCommentCreated
import org.openapitools.client.models.WebhookIssueCommentDeleted
import org.openapitools.client.models.WebhookIssueCommentEdited
import org.openapitools.client.models.WebhookIssuesAssigned
import org.openapitools.client.models.WebhookIssuesClosed
import org.openapitools.client.models.WebhookIssuesDeleted
import org.openapitools.client.models.WebhookIssuesDemilestoned
import org.openapitools.client.models.WebhookIssuesEdited
import org.openapitools.client.models.WebhookIssuesLabeled
import org.openapitools.client.models.WebhookIssuesLocked
import org.openapitools.client.models.WebhookIssuesMilestoned
import org.openapitools.client.models.WebhookIssuesOpened
import org.openapitools.client.models.WebhookIssuesPinned
import org.openapitools.client.models.WebhookIssuesReopened
import org.openapitools.client.models.WebhookIssuesTransferred
import org.openapitools.client.models.WebhookIssuesUnassigned
import org.openapitools.client.models.WebhookIssuesUnlabeled
import org.openapitools.client.models.WebhookIssuesUnlocked
import org.openapitools.client.models.WebhookIssuesUnpinned
import org.openapitools.client.models.WebhookLabelCreated
import org.openapitools.client.models.WebhookLabelDeleted
import org.openapitools.client.models.WebhookLabelEdited
import org.openapitools.client.models.WebhookMarketplacePurchaseCancelled
import org.openapitools.client.models.WebhookMarketplacePurchaseChanged
import org.openapitools.client.models.WebhookMarketplacePurchasePendingChange
import org.openapitools.client.models.WebhookMarketplacePurchasePendingChangeCancelled
import org.openapitools.client.models.WebhookMarketplacePurchasePurchased
import org.openapitools.client.models.WebhookMemberAdded
import org.openapitools.client.models.WebhookMemberEdited
import org.openapitools.client.models.WebhookMemberRemoved
import org.openapitools.client.models.WebhookMembershipAdded
import org.openapitools.client.models.WebhookMembershipRemoved
import org.openapitools.client.models.WebhookMetaDeleted
import org.openapitools.client.models.WebhookMilestoneClosed
import org.openapitools.client.models.WebhookMilestoneCreated
import org.openapitools.client.models.WebhookMilestoneDeleted
import org.openapitools.client.models.WebhookMilestoneEdited
import org.openapitools.client.models.WebhookMilestoneOpened
import org.openapitools.client.models.WebhookOrgBlockBlocked
import org.openapitools.client.models.WebhookOrgBlockUnblocked
import org.openapitools.client.models.WebhookOrganizationDeleted
import org.openapitools.client.models.WebhookOrganizationMemberAdded
import org.openapitools.client.models.WebhookOrganizationMemberInvited
import org.openapitools.client.models.WebhookOrganizationMemberRemoved
import org.openapitools.client.models.WebhookOrganizationRenamed
import org.openapitools.client.models.WebhookPackagePublished
import org.openapitools.client.models.WebhookPackageUpdated
import org.openapitools.client.models.WebhookPageBuild
import org.openapitools.client.models.WebhookPersonalAccessTokenRequestApproved
import org.openapitools.client.models.WebhookPersonalAccessTokenRequestCancelled
import org.openapitools.client.models.WebhookPersonalAccessTokenRequestCreated
import org.openapitools.client.models.WebhookPersonalAccessTokenRequestDenied
import org.openapitools.client.models.WebhookPing
import org.openapitools.client.models.WebhookPingFormEncoded
import org.openapitools.client.models.WebhookProjectCardConverted
import org.openapitools.client.models.WebhookProjectCardCreated
import org.openapitools.client.models.WebhookProjectCardDeleted
import org.openapitools.client.models.WebhookProjectCardEdited
import org.openapitools.client.models.WebhookProjectCardMoved
import org.openapitools.client.models.WebhookProjectClosed
import org.openapitools.client.models.WebhookProjectColumnCreated
import org.openapitools.client.models.WebhookProjectColumnDeleted
import org.openapitools.client.models.WebhookProjectColumnEdited
import org.openapitools.client.models.WebhookProjectColumnMoved
import org.openapitools.client.models.WebhookProjectCreated
import org.openapitools.client.models.WebhookProjectDeleted
import org.openapitools.client.models.WebhookProjectEdited
import org.openapitools.client.models.WebhookProjectReopened
import org.openapitools.client.models.WebhookProjectsV2ItemArchived
import org.openapitools.client.models.WebhookProjectsV2ItemConverted
import org.openapitools.client.models.WebhookProjectsV2ItemCreated
import org.openapitools.client.models.WebhookProjectsV2ItemDeleted
import org.openapitools.client.models.WebhookProjectsV2ItemEdited
import org.openapitools.client.models.WebhookProjectsV2ItemReordered
import org.openapitools.client.models.WebhookProjectsV2ItemRestored
import org.openapitools.client.models.WebhookProjectsV2ProjectClosed
import org.openapitools.client.models.WebhookProjectsV2ProjectCreated
import org.openapitools.client.models.WebhookProjectsV2ProjectDeleted
import org.openapitools.client.models.WebhookProjectsV2ProjectEdited
import org.openapitools.client.models.WebhookProjectsV2ProjectReopened
import org.openapitools.client.models.WebhookPublic
import org.openapitools.client.models.WebhookPullRequestAssigned
import org.openapitools.client.models.WebhookPullRequestAutoMergeDisabled
import org.openapitools.client.models.WebhookPullRequestAutoMergeEnabled
import org.openapitools.client.models.WebhookPullRequestClosed
import org.openapitools.client.models.WebhookPullRequestConvertedToDraft
import org.openapitools.client.models.WebhookPullRequestDemilestoned
import org.openapitools.client.models.WebhookPullRequestDequeued
import org.openapitools.client.models.WebhookPullRequestEdited
import org.openapitools.client.models.WebhookPullRequestEnqueued
import org.openapitools.client.models.WebhookPullRequestLabeled
import org.openapitools.client.models.WebhookPullRequestLocked
import org.openapitools.client.models.WebhookPullRequestMilestoned
import org.openapitools.client.models.WebhookPullRequestOpened
import org.openapitools.client.models.WebhookPullRequestReadyForReview
import org.openapitools.client.models.WebhookPullRequestReopened
import org.openapitools.client.models.WebhookPullRequestReviewCommentCreated
import org.openapitools.client.models.WebhookPullRequestReviewCommentDeleted
import org.openapitools.client.models.WebhookPullRequestReviewCommentEdited
import org.openapitools.client.models.WebhookPullRequestReviewDismissed
import org.openapitools.client.models.WebhookPullRequestReviewEdited
import org.openapitools.client.models.WebhookPullRequestReviewRequestRemoved
import org.openapitools.client.models.WebhookPullRequestReviewRequested
import org.openapitools.client.models.WebhookPullRequestReviewSubmitted
import org.openapitools.client.models.WebhookPullRequestReviewThreadResolved
import org.openapitools.client.models.WebhookPullRequestReviewThreadUnresolved
import org.openapitools.client.models.WebhookPullRequestSynchronize
import org.openapitools.client.models.WebhookPullRequestUnassigned
import org.openapitools.client.models.WebhookPullRequestUnlabeled
import org.openapitools.client.models.WebhookPullRequestUnlocked
import org.openapitools.client.models.WebhookPush
import org.openapitools.client.models.WebhookRegistryPackagePublished
import org.openapitools.client.models.WebhookRegistryPackageUpdated
import org.openapitools.client.models.WebhookReleaseCreated
import org.openapitools.client.models.WebhookReleaseDeleted
import org.openapitools.client.models.WebhookReleaseEdited
import org.openapitools.client.models.WebhookReleasePrereleased
import org.openapitools.client.models.WebhookReleasePublished
import org.openapitools.client.models.WebhookReleaseReleased
import org.openapitools.client.models.WebhookReleaseUnpublished
import org.openapitools.client.models.WebhookRepositoryAdvisoryPublished
import org.openapitools.client.models.WebhookRepositoryAdvisoryReported
import org.openapitools.client.models.WebhookRepositoryArchived
import org.openapitools.client.models.WebhookRepositoryCreated
import org.openapitools.client.models.WebhookRepositoryDeleted
import org.openapitools.client.models.WebhookRepositoryDispatchSample
import org.openapitools.client.models.WebhookRepositoryEdited
import org.openapitools.client.models.WebhookRepositoryImport
import org.openapitools.client.models.WebhookRepositoryPrivatized
import org.openapitools.client.models.WebhookRepositoryPublicized
import org.openapitools.client.models.WebhookRepositoryRenamed
import org.openapitools.client.models.WebhookRepositoryRulesetCreated
import org.openapitools.client.models.WebhookRepositoryRulesetDeleted
import org.openapitools.client.models.WebhookRepositoryRulesetEdited
import org.openapitools.client.models.WebhookRepositoryTransferred
import org.openapitools.client.models.WebhookRepositoryUnarchived
import org.openapitools.client.models.WebhookRepositoryVulnerabilityAlertCreate
import org.openapitools.client.models.WebhookRepositoryVulnerabilityAlertDismiss
import org.openapitools.client.models.WebhookRepositoryVulnerabilityAlertReopen
import org.openapitools.client.models.WebhookRepositoryVulnerabilityAlertResolve
import org.openapitools.client.models.WebhookSecretScanningAlertCreated
import org.openapitools.client.models.WebhookSecretScanningAlertLocationCreated
import org.openapitools.client.models.WebhookSecretScanningAlertLocationCreatedFormEncoded
import org.openapitools.client.models.WebhookSecretScanningAlertReopened
import org.openapitools.client.models.WebhookSecretScanningAlertResolved
import org.openapitools.client.models.WebhookSecretScanningAlertRevoked
import org.openapitools.client.models.WebhookSecretScanningAlertValidated
import org.openapitools.client.models.WebhookSecurityAdvisoryPublished
import org.openapitools.client.models.WebhookSecurityAdvisoryUpdated
import org.openapitools.client.models.WebhookSecurityAdvisoryWithdrawn
import org.openapitools.client.models.WebhookSecurityAndAnalysis
import org.openapitools.client.models.WebhookSponsorshipCancelled
import org.openapitools.client.models.WebhookSponsorshipCreated
import org.openapitools.client.models.WebhookSponsorshipEdited
import org.openapitools.client.models.WebhookSponsorshipPendingCancellation
import org.openapitools.client.models.WebhookSponsorshipPendingTierChange
import org.openapitools.client.models.WebhookSponsorshipTierChanged
import org.openapitools.client.models.WebhookStarCreated
import org.openapitools.client.models.WebhookStarDeleted
import org.openapitools.client.models.WebhookStatus
import org.openapitools.client.models.WebhookTeamAdd
import org.openapitools.client.models.WebhookTeamAddedToRepository
import org.openapitools.client.models.WebhookTeamCreated
import org.openapitools.client.models.WebhookTeamDeleted
import org.openapitools.client.models.WebhookTeamEdited
import org.openapitools.client.models.WebhookTeamRemovedFromRepository
import org.openapitools.client.models.WebhookWatchStarted
import org.openapitools.client.models.WebhookWorkflowDispatch
import org.openapitools.client.models.WebhookWorkflowJobCompleted
import org.openapitools.client.models.WebhookWorkflowJobInProgress
import org.openapitools.client.models.WebhookWorkflowJobQueued
import org.openapitools.client.models.WebhookWorkflowJobWaiting
import org.openapitools.client.models.WebhookWorkflowRunCompleted
import org.openapitools.client.models.WebhookWorkflowRunInProgress
import org.openapitools.client.models.WebhookWorkflowRunRequested

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class DefaultApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * This event occurs when there is a change to branch protection configurations for a repository. For more information, see \&quot;[About protected branches](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\&quot; For information about using the APIs to manage branch protection rules, see \&quot;[Branch protection rule](https://docs.github.com/graphql/reference/objects#branchprotectionrule)\&quot; in the GraphQL documentation or \&quot;[Branch protection](https://docs.github.com/rest/branches/branch-protection)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * All branch protections were disabled for a repository.
         * @param webhookBranchProtectionConfigurationDisabled  
         * @param userAgent  (optional, default to "push")
         * @param xGithubHookId  (optional, default to "push")
         * @param xGithubEvent  (optional, default to "push")
         * @param xGithubHookInstallationTargetId  (optional, default to "push")
         * @param xGithubHookInstallationTargetType  (optional, default to "push")
         * @param xGitHubDelivery  (optional, default to "push")
         * @param xHubSignature256  (optional, default to "push")
         * @return void
        */
        open suspend fun branchProtectionConfigurationDisabled(webhookBranchProtectionConfigurationDisabled: WebhookBranchProtectionConfigurationDisabled, userAgent: kotlin.String?, xGithubHookId: kotlin.String?, xGithubEvent: kotlin.String?, xGithubHookInstallationTargetId: kotlin.String?, xGithubHookInstallationTargetType: kotlin.String?, xGitHubDelivery: kotlin.String?, xHubSignature256: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookBranchProtectionConfigurationDisabled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/branch-protection-configuration-disabled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is a change to branch protection configurations for a repository. For more information, see \&quot;[About protected branches](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\&quot; For information about using the APIs to manage branch protection rules, see \&quot;[Branch protection rule](https://docs.github.com/graphql/reference/objects#branchprotectionrule)\&quot; in the GraphQL documentation or \&quot;[Branch protection](https://docs.github.com/rest/branches/branch-protection)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * All branch protections were enabled for a repository.
         * @param webhookBranchProtectionConfigurationEnabled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun branchProtectionConfigurationEnabled(webhookBranchProtectionConfigurationEnabled: WebhookBranchProtectionConfigurationEnabled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookBranchProtectionConfigurationEnabled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/branch-protection-configuration-enabled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to branch protection rules. For more information, see \&quot;[About protected branches](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\&quot; For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#branchprotectionrule) or \&quot;[Branch protection](https://docs.github.com/rest/branches/branch-protection)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * A branch protection rule was created.
         * @param webhookBranchProtectionRuleCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun branchProtectionRuleCreated(webhookBranchProtectionRuleCreated: WebhookBranchProtectionRuleCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookBranchProtectionRuleCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/branch-protection-rule-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to branch protection rules. For more information, see \&quot;[About protected branches](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\&quot; For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#branchprotectionrule) or \&quot;[Branch protection](https://docs.github.com/rest/branches/branch-protection)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * A branch protection rule was deleted.
         * @param webhookBranchProtectionRuleDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun branchProtectionRuleDeleted(webhookBranchProtectionRuleDeleted: WebhookBranchProtectionRuleDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookBranchProtectionRuleDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/branch-protection-rule-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to branch protection rules. For more information, see \&quot;[About protected branches](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\&quot; For information about the APIs to manage branch protection rules, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#branchprotectionrule) or \&quot;[Branch protection](https://docs.github.com/rest/branches/branch-protection)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * A branch protection rule was edited.
         * @param webhookBranchProtectionRuleEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun branchProtectionRuleEdited(webhookBranchProtectionRuleEdited: WebhookBranchProtectionRuleEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookBranchProtectionRuleEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/branch-protection-rule-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when repository visibility changes from private to public. For more information, see \&quot;[Setting repository visibility](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/setting-repository-visibility).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * 
         * @param webhookPublic  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun callPublic(webhookPublic: WebhookPublic, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPublic

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/public",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check run. For information about check runs, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checkrun) or \&quot;[Check Runs](https://docs.github.com/rest/checks/runs)\&quot; in the REST API documentation.  For activity relating to check suites, use the &#x60;check-suite&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; repository permission. To receive the &#x60;rerequested&#x60; and &#x60;requested_action&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;created&#x60; and &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * A check run was completed, and a conclusion is available.
         * @param webhookCheckRunCompleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkRunCompleted(webhookCheckRunCompleted: WebhookCheckRunCompleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckRunCompleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-run-completed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check run. For information about check runs, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checkrun) or \&quot;[Check Runs](https://docs.github.com/rest/checks/runs)\&quot; in the REST API documentation.  For activity relating to check suites, use the &#x60;check-suite&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; repository permission. To receive the &#x60;rerequested&#x60; and &#x60;requested_action&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;created&#x60; and &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * A new check run was created.
         * @param webhookCheckRunCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkRunCreated(webhookCheckRunCreated: WebhookCheckRunCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckRunCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-run-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check run. For information about check runs, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checkrun) or \&quot;[Check Runs](https://docs.github.com/rest/checks/runs)\&quot; in the REST API documentation.  For activity relating to check suites, use the &#x60;check-suite&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; repository permission. To receive the &#x60;rerequested&#x60; and &#x60;requested_action&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;created&#x60; and &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * A check run completed, and someone requested a followup action that your app provides. Only the GitHub App someone requests to perform an action will receive the &#x60;requested_action&#x60; payload. For more information, see \&quot;[Creating CI tests with the Checks API](https://docs.github.com/developers/apps/guides/creating-ci-tests-with-the-checks-api).\&quot;
         * @param webhookCheckRunRequestedAction  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkRunRequestedAction(webhookCheckRunRequestedAction: WebhookCheckRunRequestedAction, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckRunRequestedAction

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-run-requested-action",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check run. For information about check runs, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check runs, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checkrun) or \&quot;[Check Runs](https://docs.github.com/rest/checks/runs)\&quot; in the REST API documentation.  For activity relating to check suites, use the &#x60;check-suite&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; repository permission. To receive the &#x60;rerequested&#x60; and &#x60;requested_action&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;created&#x60; and &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * Someone requested to re-run a check run. Only the GitHub App that someone requests to re-run the check will receive the &#x60;rerequested&#x60; payload.
         * @param webhookCheckRunRerequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkRunRerequested(webhookCheckRunRerequested: WebhookCheckRunRerequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckRunRerequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-run-rerequested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check suite. For information about check suites, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checksuite) or \&quot;[Check Suites](https://docs.github.com/rest/checks/suites)\&quot; in the REST API documentation.  For activity relating to check runs, use the &#x60;check_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; permission. To receive the &#x60;requested&#x60; and &#x60;rerequested&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * All check runs in a check suite have completed, and a conclusion is available.
         * @param webhookCheckSuiteCompleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkSuiteCompleted(webhookCheckSuiteCompleted: WebhookCheckSuiteCompleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckSuiteCompleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-suite-completed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check suite. For information about check suites, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checksuite) or \&quot;[Check Suites](https://docs.github.com/rest/checks/suites)\&quot; in the REST API documentation.  For activity relating to check runs, use the &#x60;check_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; permission. To receive the &#x60;requested&#x60; and &#x60;rerequested&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * Someone requested to run a check suite. By default, check suites are automatically created when you create a check run. For more information, see [the GraphQL API documentation for creating a check run](https://docs.github.com/graphql/reference/mutations#createcheckrun) or \&quot;[Create a check run](https://docs.github.com/rest/checks/runs#create-a-check-run)\&quot; in the REST API documentation.
         * @param webhookCheckSuiteRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkSuiteRequested(webhookCheckSuiteRequested: WebhookCheckSuiteRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckSuiteRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-suite-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a check suite. For information about check suites, see \&quot;[Getting started with the Checks API](https://docs.github.com/rest/guides/getting-started-with-the-checks-api).\&quot; For information about the APIs to manage check suites, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#checksuite) or \&quot;[Check Suites](https://docs.github.com/rest/checks/suites)\&quot; in the REST API documentation.  For activity relating to check runs, use the &#x60;check_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Checks\&quot; permission. To receive the &#x60;requested&#x60; and &#x60;rerequested&#x60; event types, the app must have at least write-level access for the \&quot;Checks\&quot; permission. GitHub Apps with write-level access for the \&quot;Checks\&quot; permission are automatically subscribed to this webhook event.  Repository and organization webhooks only receive payloads for the &#x60;completed&#x60; event types in repositories.  **Note**: The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty &#x60;pull_requests&#x60; array and a &#x60;null&#x60; value for &#x60;head_branch&#x60;.
        * Someone requested to re-run the check runs in a check suite. For more information, see [the GraphQL API documentation for creating a check suite](https://docs.github.com/graphql/reference/mutations#createchecksuite) or \&quot;[Create a check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite)\&quot; in the REST API documentation.
         * @param webhookCheckSuiteRerequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun checkSuiteRerequested(webhookCheckSuiteRerequested: WebhookCheckSuiteRerequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCheckSuiteRerequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/check-suite-rerequested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * A previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.
         * @param webhookCodeScanningAlertAppearedInBranch  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertAppearedInBranch(webhookCodeScanningAlertAppearedInBranch: WebhookCodeScanningAlertAppearedInBranch, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertAppearedInBranch

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-appeared-in-branch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * Someone closed a code scanning alert.
         * @param webhookCodeScanningAlertClosedByUser  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertClosedByUser(webhookCodeScanningAlertClosedByUser: WebhookCodeScanningAlertClosedByUser, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertClosedByUser

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-closed-by-user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * A code scanning alert was created in a repository.
         * @param webhookCodeScanningAlertCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertCreated(webhookCodeScanningAlertCreated: WebhookCodeScanningAlertCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * A code scanning alert was fixed in a branch by a commit.
         * @param webhookCodeScanningAlertFixed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertFixed(webhookCodeScanningAlertFixed: WebhookCodeScanningAlertFixed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertFixed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-fixed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * A previously fixed code scanning alert reappeared in a branch.
         * @param webhookCodeScanningAlertReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertReopened(webhookCodeScanningAlertReopened: WebhookCodeScanningAlertReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to code scanning alerts in a repository. For more information, see \&quot;[About code scanning](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning)\&quot; and \&quot;[About code scanning alerts](https://docs.github.com/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts).\&quot; For information about the API to manage code scanning, see \&quot;[Code scanning](https://docs.github.com/rest/code-scanning)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Code scanning alerts\&quot; repository permission.
        * Someone reopened a code scanning alert.
         * @param webhookCodeScanningAlertReopenedByUser  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun codeScanningAlertReopenedByUser(webhookCodeScanningAlertReopenedByUser: WebhookCodeScanningAlertReopenedByUser, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCodeScanningAlertReopenedByUser

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/code-scanning-alert-reopened-by-user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to commit comments. For more information about commit comments, see \&quot;[Commenting on a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request).\&quot; For information about the APIs to manage commit comments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#commitcomment) or \&quot;[Commit comments](https://docs.github.com/rest/commits/comments)\&quot; in the REST API documentation.  For activity relating to comments on pull request reviews, use the &#x60;pull_request_review_comment&#x60; event. For activity relating to issue comments, use the &#x60;issue_comment&#x60; event. For activity relating to discussion comments, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * Someone commented on a commit.
         * @param webhookCommitCommentCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun commitCommentCreated(webhookCommitCommentCreated: WebhookCommitCommentCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCommitCommentCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/commit-comment-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a Git branch or tag is created.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.  **Notes**: - This event will not occur when more than three tags are created at once. - Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
        * 
         * @param webhookCreate  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun create(webhookCreate: WebhookCreate, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCreate

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a custom property.  For more information, see \&quot;[Managing custom properties for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-custom-properties-for-repositories-in-your-organization)\&quot;. For information about the APIs to manage custom properties, see \&quot;[Custom properties](https://docs.github.com/rest/orgs/custom-properties)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Custom properties\&quot; organization permission.
        * A new custom property was created.
         * @param webhookCustomPropertyCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun customPropertyCreated(webhookCustomPropertyCreated: WebhookCustomPropertyCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCustomPropertyCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/custom-property-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a custom property.  For more information, see \&quot;[Managing custom properties for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-custom-properties-for-repositories-in-your-organization)\&quot;. For information about the APIs to manage custom properties, see \&quot;[Custom properties](https://docs.github.com/rest/orgs/custom-properties)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Custom properties\&quot; organization permission.
        * A custom property was deleted.
         * @param webhookCustomPropertyDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun customPropertyDeleted(webhookCustomPropertyDeleted: WebhookCustomPropertyDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCustomPropertyDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/custom-property-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a custom property.  For more information, see \&quot;[Managing custom properties for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-custom-properties-for-repositories-in-your-organization)\&quot;. For information about the APIs to manage custom properties, see \&quot;[Custom properties](https://docs.github.com/rest/orgs/custom-properties)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Custom properties\&quot; organization permission.
        * A custom property was updated.
         * @param webhookCustomPropertyUpdated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun customPropertyUpdated(webhookCustomPropertyUpdated: WebhookCustomPropertyUpdated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCustomPropertyUpdated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/custom-property-updated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to custom property values for a repository.  For more information, see \&quot;[Managing custom properties for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-custom-properties-for-repositories-in-your-organization)\&quot;. For information about the APIs to manage custom properties for a repository, see \&quot;[Custom properties](https://docs.github.com/rest/repos/custom-properties)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Custom properties\&quot; organization permission.
        * The custom property values of a repository were updated.
         * @param webhookCustomPropertyValuesUpdated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun customPropertyValuesUpdated(webhookCustomPropertyValuesUpdated: WebhookCustomPropertyValuesUpdated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookCustomPropertyValuesUpdated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/custom-property-values-updated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including branch and tag deletions, use the [&#x60;push&#x60;](#push) webhook event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.  **Note**: This event will not occur when more than three tags are deleted at once.
        * 
         * @param webhookDelete  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun delete(webhookDelete: WebhookDelete, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDelete

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A Dependabot alert was automatically closed by a Dependabot auto-triage rule.
         * @param webhookDependabotAlertAutoDismissed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertAutoDismissed(webhookDependabotAlertAutoDismissed: WebhookDependabotAlertAutoDismissed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertAutoDismissed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-auto-dismissed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A Dependabot alert, that had been automatically closed by a Dependabot auto-triage rule, was automatically reopened because the alert metadata or rule changed.
         * @param webhookDependabotAlertAutoReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertAutoReopened(webhookDependabotAlertAutoReopened: WebhookDependabotAlertAutoReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertAutoReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-auto-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A manifest file change introduced a vulnerable dependency, or a GitHub Security Advisory was published and an existing dependency was found to be vulnerable.
         * @param webhookDependabotAlertCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertCreated(webhookDependabotAlertCreated: WebhookDependabotAlertCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A Dependabot alert was manually closed.
         * @param webhookDependabotAlertDismissed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertDismissed(webhookDependabotAlertDismissed: WebhookDependabotAlertDismissed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertDismissed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-dismissed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A manifest file change removed a vulnerability.
         * @param webhookDependabotAlertFixed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertFixed(webhookDependabotAlertFixed: WebhookDependabotAlertFixed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertFixed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-fixed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A manifest file change introduced a vulnerable dependency that had previously been fixed.
         * @param webhookDependabotAlertReintroduced  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertReintroduced(webhookDependabotAlertReintroduced: WebhookDependabotAlertReintroduced, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertReintroduced

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-reintroduced",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to Dependabot alerts.  For more information about Dependabot alerts, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot; For information about the API to manage Dependabot alerts, see \&quot;[Dependabot alerts](https://docs.github.com/rest/dependabot/alerts)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Dependabot alerts\&quot; repository permission.  **Note**: Webhook events for Dependabot alerts are currently in beta and subject to change.
        * A Dependabot alert was manually reopened.
         * @param webhookDependabotAlertReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun dependabotAlertReopened(webhookDependabotAlertReopened: WebhookDependabotAlertReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDependabotAlertReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/dependabot-alert-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deploy keys. For more information, see \&quot;[Managing deploy keys](https://docs.github.com/developers/overview/managing-deploy-keys).\&quot; For information about the APIs to manage deploy keys, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deploykey) or \&quot;[Deploy keys](https://docs.github.com/rest/deploy-keys)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deploy key was created.
         * @param webhookDeployKeyCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deployKeyCreated(webhookDeployKeyCreated: WebhookDeployKeyCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeployKeyCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deploy-key-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deploy keys. For more information, see \&quot;[Managing deploy keys](https://docs.github.com/developers/overview/managing-deploy-keys).\&quot; For information about the APIs to manage deploy keys, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deploykey) or \&quot;[Deploy keys](https://docs.github.com/rest/deploy-keys)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deploy key was deleted.
         * @param webhookDeployKeyDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deployKeyDeleted(webhookDeployKeyDeleted: WebhookDeployKeyDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeployKeyDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deploy-key-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployments. For more information, see \&quot;[About deployments](https://docs.github.com/actions/deployment/about-deployments).\&quot; For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deployment) or \&quot;[Deployments](https://docs.github.com/rest/deployments/deployments)\&quot; in the REST API documentation.  For activity relating to deployment status, use the &#x60;deployment_status&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deployment was created.
         * @param webhookDeploymentCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentCreated(webhookDeploymentCreated: WebhookDeploymentCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployment protection rules. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment#environment-protection-rules).\&quot; For information about the API to manage deployment protection rules, see [the REST API documentation](https://docs.github.com/rest/deployments/environments).  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deployment protection rule was requested for an environment.
         * @param webhookDeploymentProtectionRuleRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentProtectionRuleRequested(webhookDeploymentProtectionRuleRequested: WebhookDeploymentProtectionRuleRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentProtectionRuleRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-protection-rule-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployment reviews. For more information, see \&quot;[About deployments](https://docs.github.com/actions/deployment/about-deployments).\&quot; For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deployment) or \&quot;[Deployments](https://docs.github.com/rest/deployments/deployments)\&quot; in the REST API documentation.  For activity relating to deployment creation or deployment status, use the &#x60;deployment&#x60; or &#x60;deployment_status&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deployment review was approved.
         * @param webhookDeploymentReviewApproved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentReviewApproved(webhookDeploymentReviewApproved: WebhookDeploymentReviewApproved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentReviewApproved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-review-approved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployment reviews. For more information, see \&quot;[About deployments](https://docs.github.com/actions/deployment/about-deployments).\&quot; For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deployment) or \&quot;[Deployments](https://docs.github.com/rest/deployments/deployments)\&quot; in the REST API documentation.  For activity relating to deployment creation or deployment status, use the &#x60;deployment&#x60; or &#x60;deployment_status&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deployment review was rejected.
         * @param webhookDeploymentReviewRejected  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentReviewRejected(webhookDeploymentReviewRejected: WebhookDeploymentReviewRejected, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentReviewRejected

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-review-rejected",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployment reviews. For more information, see \&quot;[About deployments](https://docs.github.com/actions/deployment/about-deployments).\&quot; For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deployment) or \&quot;[Deployments](https://docs.github.com/rest/deployments/deployments)\&quot; in the REST API documentation.  For activity relating to deployment creation or deployment status, use the &#x60;deployment&#x60; or &#x60;deployment_status&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A deployment review was requested.
         * @param webhookDeploymentReviewRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentReviewRequested(webhookDeploymentReviewRequested: WebhookDeploymentReviewRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentReviewRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-review-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to deployment statuses. For more information, see \&quot;[About deployments](https://docs.github.com/actions/deployment/about-deployments).\&quot; For information about the APIs to manage deployments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#deployment) or \&quot;[Deployments](https://docs.github.com/rest/deployments/deployments)\&quot; in the REST API documentation.  For activity relating to deployment creation, use the &#x60;deployment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Deployments\&quot; repository permission.
        * A new deployment status was created.
         * @param webhookDeploymentStatusCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun deploymentStatusCreated(webhookDeploymentStatusCreated: WebhookDeploymentStatusCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDeploymentStatusCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/deployment-status-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A comment on the discussion was marked as the answer.
         * @param webhookDiscussionAnswered  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionAnswered(webhookDiscussionAnswered: WebhookDiscussionAnswered, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionAnswered

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-answered",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * The category of a discussion was changed.
         * @param webhookDiscussionCategoryChanged  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionCategoryChanged(webhookDiscussionCategoryChanged: WebhookDiscussionCategoryChanged, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionCategoryChanged

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-category-changed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was closed.
         * @param webhookDiscussionClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional, default to "push")
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionClosed(webhookDiscussionClosed: WebhookDiscussionClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.String?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a discussion as opposed to comments on a discussion, use the &#x60;discussion&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A comment on a discussion was created.
         * @param webhookDiscussionCommentCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionCommentCreated(webhookDiscussionCommentCreated: WebhookDiscussionCommentCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionCommentCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-comment-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a discussion as opposed to comments on a discussion, use the &#x60;discussion&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A comment on a discussion was deleted.
         * @param webhookDiscussionCommentDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionCommentDeleted(webhookDiscussionCommentDeleted: WebhookDiscussionCommentDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionCommentDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-comment-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a discussion as opposed to comments on a discussion, use the &#x60;discussion&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A comment on a discussion was edited.
         * @param webhookDiscussionCommentEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionCommentEdited(webhookDiscussionCommentEdited: WebhookDiscussionCommentEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionCommentEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-comment-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was created.
         * @param webhookDiscussionCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionCreated(webhookDiscussionCreated: WebhookDiscussionCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was deleted.
         * @param webhookDiscussionDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionDeleted(webhookDiscussionDeleted: WebhookDiscussionDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * The title or body on a discussion was edited, or the category of the discussion was changed.
         * @param webhookDiscussionEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionEdited(webhookDiscussionEdited: WebhookDiscussionEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A label was added to a discussion.
         * @param webhookDiscussionLabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionLabeled(webhookDiscussionLabeled: WebhookDiscussionLabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionLabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-labeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was locked.
         * @param webhookDiscussionLocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionLocked(webhookDiscussionLocked: WebhookDiscussionLocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionLocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-locked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was pinned.
         * @param webhookDiscussionPinned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionPinned(webhookDiscussionPinned: WebhookDiscussionPinned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionPinned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-pinned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was reopened.
         * @param webhookDiscussionReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionReopened(webhookDiscussionReopened: WebhookDiscussionReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was transferred to another repository.
         * @param webhookDiscussionTransferred  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionTransferred(webhookDiscussionTransferred: WebhookDiscussionTransferred, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionTransferred

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-transferred",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A comment on the discussion was unmarked as the answer.
         * @param webhookDiscussionUnanswered  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionUnanswered(webhookDiscussionUnanswered: WebhookDiscussionUnanswered, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionUnanswered

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-unanswered",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A label was removed from a discussion.
         * @param webhookDiscussionUnlabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionUnlabeled(webhookDiscussionUnlabeled: WebhookDiscussionUnlabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionUnlabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-unlabeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was unlocked.
         * @param webhookDiscussionUnlocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionUnlocked(webhookDiscussionUnlocked: WebhookDiscussionUnlocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionUnlocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-unlocked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a discussion. For more information about discussions, see \&quot;[GitHub Discussions](https://docs.github.com/discussions).\&quot; For information about the API to manage discussions, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#discussion).  For activity relating to a comment on a discussion, use the &#x60;discussion_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Discussions\&quot; repository permission.  **Note**: Webhook events for GitHub Discussions are currently in beta and subject to change.
        * A discussion was unpinned.
         * @param webhookDiscussionUnpinned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun discussionUnpinned(webhookDiscussionUnpinned: WebhookDiscussionUnpinned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookDiscussionUnpinned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/discussion-unpinned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when someone forks a repository. For more information, see \&quot;[Fork a repo](https://docs.github.com/get-started/quickstart/fork-a-repo).\&quot; For information about the API to manage forks, see \&quot;[Forks](https://docs.github.com/rest/repos/forks)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * 
         * @param webhookFork  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun fork(webhookFork: WebhookFork, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookFork

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/fork",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a user revokes their authorization of a GitHub App. For more information, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the API to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.  A GitHub App receives this webhook by default and cannot unsubscribe from this event.  Anyone can revoke their authorization of a GitHub App from their [GitHub account settings page](https://github.com/settings/apps/authorizations). Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the &#x60;401 Bad Credentials&#x60; error. For details about requests with a user access token, which require GitHub App authorization, see \&quot;[Authenticating with a GitHub App on behalf of a user](https://docs.github.com/apps/creating-github-apps/authenticating-with-a-github-app/authenticating-with-a-github-app-on-behalf-of-a-user).\&quot;
        * Someone revoked their authorization of a GitHub App.
         * @param webhookGithubAppAuthorizationRevoked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun githubAppAuthorizationRevoked(webhookGithubAppAuthorizationRevoked: WebhookGithubAppAuthorizationRevoked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookGithubAppAuthorizationRevoked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/github-app-authorization-revoked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when someone creates or updates a wiki page. For more information, see \&quot;[About wikis](https://docs.github.com/communities/documenting-your-project-with-wikis/about-wikis).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * 
         * @param webhookGollum  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun gollum(webhookGollum: WebhookGollum, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookGollum

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/gollum",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Someone installed a GitHub App on a user or organization account.
         * @param webhookInstallationCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationCreated(webhookInstallationCreated: WebhookInstallationCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Someone uninstalled a GitHub App from their user or organization account.
         * @param webhookInstallationDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationDeleted(webhookInstallationDeleted: WebhookInstallationDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Someone granted new permissions to a GitHub App.
         * @param webhookInstallationNewPermissionsAccepted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationNewPermissionsAccepted(webhookInstallationNewPermissionsAccepted: WebhookInstallationNewPermissionsAccepted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationNewPermissionsAccepted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-new-permissions-accepted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * A GitHub App installation was granted access to one or more repositories.
         * @param webhookInstallationRepositoriesAdded  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationRepositoriesAdded(webhookInstallationRepositoriesAdded: WebhookInstallationRepositoriesAdded, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationRepositoriesAdded

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-repositories-added",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Access to one or more repositories was revoked for a GitHub App installation.
         * @param webhookInstallationRepositoriesRemoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationRepositoriesRemoved(webhookInstallationRepositoriesRemoved: WebhookInstallationRepositoriesRemoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationRepositoriesRemoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-repositories-removed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Someone blocked access by a GitHub App to their user or organization account.
         * @param webhookInstallationSuspend  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationSuspend(webhookInstallationSuspend: WebhookInstallationSuspend, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationSuspend

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-suspend",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * Somebody renamed the user or organization account that a GitHub App is installed on.
         * @param webhookInstallationTargetRenamed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationTargetRenamed(webhookInstallationTargetRenamed: WebhookInstallationTargetRenamed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationTargetRenamed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-target-renamed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.  For more information about GitHub Apps, see \&quot;[About apps](https://docs.github.com/developers/apps/getting-started-with-apps/about-apps#about-github-apps).\&quot; For information about the APIs to manage GitHub Apps, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#app) or \&quot;[Apps](https://docs.github.com/rest/apps)\&quot; in the REST API documentation.
        * A GitHub App that was blocked from accessing a user or organization account was given access the account again.
         * @param webhookInstallationUnsuspend  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun installationUnsuspend(webhookInstallationUnsuspend: WebhookInstallationUnsuspend, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookInstallationUnsuspend

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/installation-unsuspend",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)\&quot; and \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) or \&quot;[Issue comments](https://docs.github.com/rest/issues/comments)\&quot; in the REST API documentation.  For activity relating to an issue as opposed to comments on an issue, use the &#x60;issue&#x60; event. For activity related to pull request reviews or pull request review comments, use the &#x60;pull_request_review&#x60; or &#x60;pull_request_review_comment&#x60; events. For more information about the different types of pull request comments, see \&quot;[Working with comments](https://docs.github.com/rest/guides/working-with-comments).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A comment on an issue or pull request was created.
         * @param webhookIssueCommentCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issueCommentCreated(webhookIssueCommentCreated: WebhookIssueCommentCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssueCommentCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issue-comment-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)\&quot; and \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) or \&quot;[Issue comments](https://docs.github.com/rest/issues/comments)\&quot; in the REST API documentation.  For activity relating to an issue as opposed to comments on an issue, use the &#x60;issue&#x60; event. For activity related to pull request reviews or pull request review comments, use the &#x60;pull_request_review&#x60; or &#x60;pull_request_review_comment&#x60; events. For more information about the different types of pull request comments, see \&quot;[Working with comments](https://docs.github.com/rest/guides/working-with-comments).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A comment on an issue or pull request was deleted.
         * @param webhookIssueCommentDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issueCommentDeleted(webhookIssueCommentDeleted: WebhookIssueCommentDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssueCommentDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issue-comment-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues)\&quot; and \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage issue comments, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issuecomment) or \&quot;[Issue comments](https://docs.github.com/rest/issues/comments)\&quot; in the REST API documentation.  For activity relating to an issue as opposed to comments on an issue, use the &#x60;issue&#x60; event. For activity related to pull request reviews or pull request review comments, use the &#x60;pull_request_review&#x60; or &#x60;pull_request_review_comment&#x60; events. For more information about the different types of pull request comments, see \&quot;[Working with comments](https://docs.github.com/rest/guides/working-with-comments).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A comment on an issue or pull request was edited.
         * @param webhookIssueCommentEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issueCommentEdited(webhookIssueCommentEdited: WebhookIssueCommentEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssueCommentEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issue-comment-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was assigned to a user.
         * @param webhookIssuesAssigned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesAssigned(webhookIssuesAssigned: WebhookIssuesAssigned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesAssigned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-assigned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was closed.
         * @param webhookIssuesClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesClosed(webhookIssuesClosed: WebhookIssuesClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was deleted.
         * @param webhookIssuesDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesDeleted(webhookIssuesDeleted: WebhookIssuesDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was removed from a milestone.
         * @param webhookIssuesDemilestoned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesDemilestoned(webhookIssuesDemilestoned: WebhookIssuesDemilestoned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesDemilestoned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-demilestoned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * The title or body on an issue was edited.
         * @param webhookIssuesEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesEdited(webhookIssuesEdited: WebhookIssuesEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A label was added to an issue.
         * @param webhookIssuesLabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesLabeled(webhookIssuesLabeled: WebhookIssuesLabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesLabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-labeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * Conversation on an issue was locked. For more information, see \&quot;[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations).\&quot;
         * @param webhookIssuesLocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesLocked(webhookIssuesLocked: WebhookIssuesLocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesLocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-locked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was added to a milestone.
         * @param webhookIssuesMilestoned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesMilestoned(webhookIssuesMilestoned: WebhookIssuesMilestoned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesMilestoned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-milestoned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was created. When a closed issue is reopened, the action will be &#x60;reopened&#x60; instead.
         * @param webhookIssuesOpened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesOpened(webhookIssuesOpened: WebhookIssuesOpened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesOpened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-opened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was pinned to a repository. For more information, see \&quot;[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository).\&quot;
         * @param webhookIssuesPinned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesPinned(webhookIssuesPinned: WebhookIssuesPinned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesPinned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-pinned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A closed issue was reopened.
         * @param webhookIssuesReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesReopened(webhookIssuesReopened: WebhookIssuesReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was transferred to another repository. For more information, see \&quot;[Transferring an issue to another repository](https://docs.github.com/issues/tracking-your-work-with-issues/transferring-an-issue-to-another-repository).\&quot;
         * @param webhookIssuesTransferred  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesTransferred(webhookIssuesTransferred: WebhookIssuesTransferred, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesTransferred

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-transferred",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A user was unassigned from an issue.
         * @param webhookIssuesUnassigned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesUnassigned(webhookIssuesUnassigned: WebhookIssuesUnassigned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesUnassigned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-unassigned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * A label was removed from an issue.
         * @param webhookIssuesUnlabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesUnlabeled(webhookIssuesUnlabeled: WebhookIssuesUnlabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesUnlabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-unlabeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * Conversation on an issue was locked. For more information, see \&quot;[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations).\&quot;
         * @param webhookIssuesUnlocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesUnlocked(webhookIssuesUnlocked: WebhookIssuesUnlocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesUnlocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-unlocked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an issue. For more information about issues, see \&quot;[About issues](https://docs.github.com/issues/tracking-your-work-with-issues/about-issues).\&quot; For information about the APIs to manage issues, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#issue) or \&quot;[Issues](https://docs.github.com/rest/issues)\&quot; in the REST API documentation.  For activity relating to a comment on an issue, use the &#x60;issue_comment&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; repository permission.
        * An issue was unpinned from a repository. For more information, see \&quot;[Pinning an issue to your repository](https://docs.github.com/issues/tracking-your-work-with-issues/pinning-an-issue-to-your-repository).\&quot;
         * @param webhookIssuesUnpinned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun issuesUnpinned(webhookIssuesUnpinned: WebhookIssuesUnpinned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookIssuesUnpinned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/issues-unpinned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to labels. For more information, see \&quot;[Managing labels](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/managing-labels).\&quot; For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#label) or \&quot;[Labels](https://docs.github.com/rest/issues/labels)\&quot; in the REST API documentation.  If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the &#x60;labeled&#x60; or &#x60;unlabeled&#x60; action type for the &#x60;issues&#x60;, &#x60;pull_request&#x60;, or &#x60;discussion&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A label was created.
         * @param webhookLabelCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun labelCreated(webhookLabelCreated: WebhookLabelCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookLabelCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/label-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to labels. For more information, see \&quot;[Managing labels](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/managing-labels).\&quot; For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#label) or \&quot;[Labels](https://docs.github.com/rest/issues/labels)\&quot; in the REST API documentation.  If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the &#x60;labeled&#x60; or &#x60;unlabeled&#x60; action type for the &#x60;issues&#x60;, &#x60;pull_request&#x60;, or &#x60;discussion&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A label was deleted.
         * @param webhookLabelDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun labelDeleted(webhookLabelDeleted: WebhookLabelDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookLabelDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/label-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to labels. For more information, see \&quot;[Managing labels](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/managing-labels).\&quot; For information about the APIs to manage labels, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#label) or \&quot;[Labels](https://docs.github.com/rest/issues/labels)\&quot; in the REST API documentation.  If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the &#x60;labeled&#x60; or &#x60;unlabeled&#x60; action type for the &#x60;issues&#x60;, &#x60;pull_request&#x60;, or &#x60;discussion&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A label&#39;s name, description, or color was changed.
         * @param webhookLabelEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun labelEdited(webhookLabelEdited: WebhookLabelEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookLabelEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/label-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see \&quot;[GitHub Marketplace](https://docs.github.com/marketplace).\&quot; For information about the APIs to manage GitHub Marketplace listings, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#marketplacelisting) or \&quot;[GitHub Marketplace](https://docs.github.com/rest/apps/marketplace)\&quot; in the REST API documentation.
        * Someone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.
         * @param webhookMarketplacePurchaseCancelled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun marketplacePurchaseCancelled(webhookMarketplacePurchaseCancelled: WebhookMarketplacePurchaseCancelled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMarketplacePurchaseCancelled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/marketplace-purchase-cancelled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see \&quot;[GitHub Marketplace](https://docs.github.com/marketplace).\&quot; For information about the APIs to manage GitHub Marketplace listings, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#marketplacelisting) or \&quot;[GitHub Marketplace](https://docs.github.com/rest/apps/marketplace)\&quot; in the REST API documentation.
        * Someone upgraded or downgraded a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.
         * @param webhookMarketplacePurchaseChanged  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun marketplacePurchaseChanged(webhookMarketplacePurchaseChanged: WebhookMarketplacePurchaseChanged, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMarketplacePurchaseChanged

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/marketplace-purchase-changed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see \&quot;[GitHub Marketplace](https://docs.github.com/marketplace).\&quot; For information about the APIs to manage GitHub Marketplace listings, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#marketplacelisting) or \&quot;[GitHub Marketplace](https://docs.github.com/rest/apps/marketplace)\&quot; in the REST API documentation.
        * Someone downgraded or cancelled a GitHub Marketplace plan. The new plan or cancellation will take effect at the end of the current billing cycle. When the change takes effect, the &#x60;changed&#x60; or &#x60;cancelled&#x60; event will be sent.
         * @param webhookMarketplacePurchasePendingChange  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun marketplacePurchasePendingChange(webhookMarketplacePurchasePendingChange: WebhookMarketplacePurchasePendingChange, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMarketplacePurchasePendingChange

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/marketplace-purchase-pending-change",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see \&quot;[GitHub Marketplace](https://docs.github.com/marketplace).\&quot; For information about the APIs to manage GitHub Marketplace listings, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#marketplacelisting) or \&quot;[GitHub Marketplace](https://docs.github.com/rest/apps/marketplace)\&quot; in the REST API documentation.
        * Someone cancelled a pending change to a GitHub Marketplace plan. Pending changes include plan cancellations and downgrades that will take effect at the end of a billing cycle.
         * @param webhookMarketplacePurchasePendingChangeCancelled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun marketplacePurchasePendingChangeCancelled(webhookMarketplacePurchasePendingChangeCancelled: WebhookMarketplacePurchasePendingChangeCancelled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMarketplacePurchasePendingChangeCancelled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/marketplace-purchase-pending-change-cancelled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see \&quot;[GitHub Marketplace](https://docs.github.com/marketplace).\&quot; For information about the APIs to manage GitHub Marketplace listings, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#marketplacelisting) or \&quot;[GitHub Marketplace](https://docs.github.com/rest/apps/marketplace)\&quot; in the REST API documentation.
        * Someone purchased a GitHub Marketplace plan. The change will take effect on the account immediately.
         * @param webhookMarketplacePurchasePurchased  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun marketplacePurchasePurchased(webhookMarketplacePurchasePurchased: WebhookMarketplacePurchasePurchased, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMarketplacePurchasePurchased

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/marketplace-purchase-purchased",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to collaborators in a repository. For more information, see \&quot;[Adding outside collaborators to repositories in your organization](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\&quot; For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#repositorycollaboratorconnection) or \&quot;[Collaborators](https://docs.github.com/rest/collaborators/collaborators)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A GitHub user accepted an invitation to a repository.
         * @param webhookMemberAdded  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun memberAdded(webhookMemberAdded: WebhookMemberAdded, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMemberAdded

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/member-added",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to collaborators in a repository. For more information, see \&quot;[Adding outside collaborators to repositories in your organization](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\&quot; For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#repositorycollaboratorconnection) or \&quot;[Collaborators](https://docs.github.com/rest/collaborators/collaborators)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * Permissions were changed for a collaborator on a repository.
         * @param webhookMemberEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun memberEdited(webhookMemberEdited: WebhookMemberEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMemberEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/member-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to collaborators in a repository. For more information, see \&quot;[Adding outside collaborators to repositories in your organization](https://docs.github.com/organizations/managing-user-access-to-your-organizations-repositories/adding-outside-collaborators-to-repositories-in-your-organization).\&quot; For more information about the API to manage repository collaborators, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#repositorycollaboratorconnection) or \&quot;[Collaborators](https://docs.github.com/rest/collaborators/collaborators)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A collaborator was removed from a repository.
         * @param webhookMemberRemoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun memberRemoved(webhookMemberRemoved: WebhookMemberRemoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMemberRemoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/member-removed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to team membership. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot; For more information about the APIs to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#team) or \&quot;[Team members](https://docs.github.com/rest/teams/members)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * An organization member was added to a team.
         * @param webhookMembershipAdded  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun membershipAdded(webhookMembershipAdded: WebhookMembershipAdded, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMembershipAdded

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/membership-added",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to team membership. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot; For more information about the APIs to manage team memberships, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#team) or \&quot;[Team members](https://docs.github.com/rest/teams/members)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * An organization member was removed from a team.
         * @param webhookMembershipRemoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun membershipRemoved(webhookMembershipRemoved: WebhookMembershipRemoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMembershipRemoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/membership-removed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a webhook itself.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Meta\&quot; app permission.
        * The webhook was deleted.
         * @param webhookMetaDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun metaDeleted(webhookMetaDeleted: WebhookMetaDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMetaDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/meta-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to milestones. For more information, see \&quot;[About milestones](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/about-milestones).\&quot; For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#milestone) or \&quot;[Milestones](https://docs.github.com/rest/issues/milestones)\&quot; in the REST API documentation.  If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the &#x60;milestoned&#x60; or &#x60;demilestoned&#x60; action type for the &#x60;issues&#x60; or &#x60;pull_request&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; or \&quot;Pull requests\&quot; repository permissions.
        * A milestone was closed.
         * @param webhookMilestoneClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun milestoneClosed(webhookMilestoneClosed: WebhookMilestoneClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMilestoneClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/milestone-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to milestones. For more information, see \&quot;[About milestones](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/about-milestones).\&quot; For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#milestone) or \&quot;[Milestones](https://docs.github.com/rest/issues/milestones)\&quot; in the REST API documentation.  If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the &#x60;milestoned&#x60; or &#x60;demilestoned&#x60; action type for the &#x60;issues&#x60; or &#x60;pull_request&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; or \&quot;Pull requests\&quot; repository permissions.
        * A milestone was created.
         * @param webhookMilestoneCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun milestoneCreated(webhookMilestoneCreated: WebhookMilestoneCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMilestoneCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/milestone-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to milestones. For more information, see \&quot;[About milestones](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/about-milestones).\&quot; For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#milestone) or \&quot;[Milestones](https://docs.github.com/rest/issues/milestones)\&quot; in the REST API documentation.  If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the &#x60;milestoned&#x60; or &#x60;demilestoned&#x60; action type for the &#x60;issues&#x60; or &#x60;pull_request&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; or \&quot;Pull requests\&quot; repository permissions.
        * A milestone was deleted.
         * @param webhookMilestoneDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun milestoneDeleted(webhookMilestoneDeleted: WebhookMilestoneDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMilestoneDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/milestone-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to milestones. For more information, see \&quot;[About milestones](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/about-milestones).\&quot; For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#milestone) or \&quot;[Milestones](https://docs.github.com/rest/issues/milestones)\&quot; in the REST API documentation.  If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the &#x60;milestoned&#x60; or &#x60;demilestoned&#x60; action type for the &#x60;issues&#x60; or &#x60;pull_request&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; or \&quot;Pull requests\&quot; repository permissions.
        * A milestone was edited.
         * @param webhookMilestoneEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun milestoneEdited(webhookMilestoneEdited: WebhookMilestoneEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMilestoneEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/milestone-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to milestones. For more information, see \&quot;[About milestones](https://docs.github.com/issues/using-labels-and-milestones-to-track-work/about-milestones).\&quot; For information about the APIs to manage milestones, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#milestone) or \&quot;[Milestones](https://docs.github.com/rest/issues/milestones)\&quot; in the REST API documentation.  If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the &#x60;milestoned&#x60; or &#x60;demilestoned&#x60; action type for the &#x60;issues&#x60; or &#x60;pull_request&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Issues\&quot; or \&quot;Pull requests\&quot; repository permissions.
        * A milestone was opened.
         * @param webhookMilestoneOpened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun milestoneOpened(webhookMilestoneOpened: WebhookMilestoneOpened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMilestoneOpened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/milestone-opened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization&#39;s repositories. For more information, see \&quot;[Blocking a user from your organization](https://docs.github.com/communities/maintaining-your-safety-on-github/blocking-a-user-from-your-organization).\&quot; For information about the APIs to manage blocked users, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#userblockedevent) or \&quot;[Blocking users](https://docs.github.com/rest/orgs/blocking)\&quot; in the REST API documentation.  If you want to receive an event when members are added or removed from an organization, use the &#x60;organization&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; organization permission.
        * A user was blocked from the organization.
         * @param webhookOrgBlockBlocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun orgBlockBlocked(webhookOrgBlockBlocked: WebhookOrgBlockBlocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrgBlockBlocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/org-block-blocked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization&#39;s repositories. For more information, see \&quot;[Blocking a user from your organization](https://docs.github.com/communities/maintaining-your-safety-on-github/blocking-a-user-from-your-organization).\&quot; For information about the APIs to manage blocked users, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#userblockedevent) or \&quot;[Blocking users](https://docs.github.com/rest/orgs/blocking)\&quot; in the REST API documentation.  If you want to receive an event when members are added or removed from an organization, use the &#x60;organization&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; organization permission.
        * A previously blocked user was unblocked from the organization.
         * @param webhookOrgBlockUnblocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun orgBlockUnblocked(webhookOrgBlockUnblocked: WebhookOrgBlockUnblocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrgBlockUnblocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/org-block-unblocked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization and its members. For more information, see \&quot;[About organizations](https://docs.github.com/organizations/collaborating-with-groups-in-organizations/about-organizations).\&quot; For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#organization) or \&quot;[Organizations](https://docs.github.com/rest/orgs)\&quot; in the REST API documentation.  If you want to receive an event when a non-member is blocked or unblocked from an organization, use the &#x60;org_block&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * An organization was deleted.
         * @param webhookOrganizationDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun organizationDeleted(webhookOrganizationDeleted: WebhookOrganizationDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrganizationDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/organization-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization and its members. For more information, see \&quot;[About organizations](https://docs.github.com/organizations/collaborating-with-groups-in-organizations/about-organizations).\&quot; For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#organization) or \&quot;[Organizations](https://docs.github.com/rest/orgs)\&quot; in the REST API documentation.  If you want to receive an event when a non-member is blocked or unblocked from an organization, use the &#x60;org_block&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A member accepted an invitation to join an organization.
         * @param webhookOrganizationMemberAdded  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun organizationMemberAdded(webhookOrganizationMemberAdded: WebhookOrganizationMemberAdded, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrganizationMemberAdded

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/organization-member-added",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization and its members. For more information, see \&quot;[About organizations](https://docs.github.com/organizations/collaborating-with-groups-in-organizations/about-organizations).\&quot; For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#organization) or \&quot;[Organizations](https://docs.github.com/rest/orgs)\&quot; in the REST API documentation.  If you want to receive an event when a non-member is blocked or unblocked from an organization, use the &#x60;org_block&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A member was invited to join the organization.
         * @param webhookOrganizationMemberInvited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun organizationMemberInvited(webhookOrganizationMemberInvited: WebhookOrganizationMemberInvited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrganizationMemberInvited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/organization-member-invited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization and its members. For more information, see \&quot;[About organizations](https://docs.github.com/organizations/collaborating-with-groups-in-organizations/about-organizations).\&quot; For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#organization) or \&quot;[Organizations](https://docs.github.com/rest/orgs)\&quot; in the REST API documentation.  If you want to receive an event when a non-member is blocked or unblocked from an organization, use the &#x60;org_block&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A member was removed from the organization.
         * @param webhookOrganizationMemberRemoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun organizationMemberRemoved(webhookOrganizationMemberRemoved: WebhookOrganizationMemberRemoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrganizationMemberRemoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/organization-member-removed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization and its members. For more information, see \&quot;[About organizations](https://docs.github.com/organizations/collaborating-with-groups-in-organizations/about-organizations).\&quot; For information about the APIs to manage organizations, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#organization) or \&quot;[Organizations](https://docs.github.com/rest/orgs)\&quot; in the REST API documentation.  If you want to receive an event when a non-member is blocked or unblocked from an organization, use the &#x60;org_block&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * The name of an organization was changed.
         * @param webhookOrganizationRenamed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun organizationRenamed(webhookOrganizationRenamed: WebhookOrganizationRenamed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookOrganizationRenamed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/organization-renamed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to GitHub Packages. For more information, see \&quot;[Introduction to GitHub Packages](https://docs.github.com/packages/learn-github-packages/introduction-to-github-packages).\&quot; For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#package) or \&quot;[Packages](https://docs.github.com/rest/packages)\&quot; in the REST API documentation.  To install this event on a GitHub App, the app must have at least read-level access for the \&quot;Packages\&quot; repository permission.
        * A package was published to a registry.
         * @param webhookPackagePublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun packagePublished(webhookPackagePublished: WebhookPackagePublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPackagePublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/package-published",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to GitHub Packages. For more information, see \&quot;[Introduction to GitHub Packages](https://docs.github.com/packages/learn-github-packages/introduction-to-github-packages).\&quot; For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#package) or \&quot;[Packages](https://docs.github.com/rest/packages)\&quot; in the REST API documentation.  To install this event on a GitHub App, the app must have at least read-level access for the \&quot;Packages\&quot; repository permission.
        * A previously published package was updated.
         * @param webhookPackageUpdated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun packageUpdated(webhookPackageUpdated: WebhookPackageUpdated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPackageUpdated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/package-updated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see \&quot;[Configuring a publishing source for your GitHub Pages site](https://docs.github.com/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site).\&quot; For information about the API to manage GitHub Pages, see \&quot;[Pages](https://docs.github.com/rest/pages)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pages\&quot; repository permission.
        * 
         * @param webhookPageBuild  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pageBuild(webhookPageBuild: WebhookPageBuild, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPageBuild

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/page-build",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see \&quot;[Creating a personal access token](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Personal access token requests\&quot; organization permission.  **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
        * A fine-grained personal access token request was approved.
         * @param webhookPersonalAccessTokenRequestApproved  
         * @param userAgent  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xGithubEvent  (optional, default to "push")
         * @param xGithubHookId  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional, default to "push")
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun personalAccessTokenRequestApproved(webhookPersonalAccessTokenRequestApproved: WebhookPersonalAccessTokenRequestApproved, userAgent: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xGithubEvent: kotlin.String?, xGithubHookId: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.String?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPersonalAccessTokenRequestApproved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/personal-access-token-request-approved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see \&quot;[Creating a personal access token](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Personal access token requests\&quot; organization permission.  **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
        * A fine-grained personal access token request was cancelled by the requester.
         * @param webhookPersonalAccessTokenRequestCancelled  
         * @param userAgent  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun personalAccessTokenRequestCancelled(webhookPersonalAccessTokenRequestCancelled: WebhookPersonalAccessTokenRequestCancelled, userAgent: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPersonalAccessTokenRequestCancelled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/personal-access-token-request-cancelled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see \&quot;[Creating a personal access token](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Personal access token requests\&quot; organization permission.  **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
        * A fine-grained personal access token request was created.
         * @param webhookPersonalAccessTokenRequestCreated  
         * @param userAgent  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun personalAccessTokenRequestCreated(webhookPersonalAccessTokenRequestCreated: WebhookPersonalAccessTokenRequestCreated, userAgent: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPersonalAccessTokenRequestCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/personal-access-token-request-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see \&quot;[Creating a personal access token](https://docs.github.com/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Personal access token requests\&quot; organization permission.  **Note**: Fine-grained PATs are in public beta. Related APIs, events, and functionality are subject to change.
        * A fine-grained personal access token request was denied.
         * @param webhookPersonalAccessTokenRequestDenied  
         * @param userAgent  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun personalAccessTokenRequestDenied(webhookPersonalAccessTokenRequestDenied: WebhookPersonalAccessTokenRequestDenied, userAgent: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPersonalAccessTokenRequestDenied

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/personal-access-token-request-denied",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.
        * 
         * @param webhookPing  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun ping(webhookPing: WebhookPing, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPing

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/ping",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a card on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a column on a project (classic), use the &#x60;project&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A note in a project (classic) was converted to an issue.
         * @param webhookProjectCardConverted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCardConverted(webhookProjectCardConverted: WebhookProjectCardConverted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCardConverted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-card-converted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a card on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a column on a project (classic), use the &#x60;project&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A card was added to a project (classic).
         * @param webhookProjectCardCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCardCreated(webhookProjectCardCreated: WebhookProjectCardCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCardCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-card-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a card on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a column on a project (classic), use the &#x60;project&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A card on a project (classic) was deleted.
         * @param webhookProjectCardDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCardDeleted(webhookProjectCardDeleted: WebhookProjectCardDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCardDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-card-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a card on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a column on a project (classic), use the &#x60;project&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A note on a project (classic) was edited.
         * @param webhookProjectCardEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCardEdited(webhookProjectCardEdited: WebhookProjectCardEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCardEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-card-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a card on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a column on a project (classic), use the &#x60;project&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A card on a project (classic) was moved to another column or to another position in its column.
         * @param webhookProjectCardMoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCardMoved(webhookProjectCardMoved: WebhookProjectCardMoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCardMoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-card-moved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a card or column on a project (classic), use the &#x60;project_card&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A project (classic) was closed.
         * @param webhookProjectClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectClosed(webhookProjectClosed: WebhookProjectClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a column on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a card on a project (classic), use the &#x60;project&#x60; and &#x60;project_card&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A column was added to a project (classic).
         * @param webhookProjectColumnCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectColumnCreated(webhookProjectColumnCreated: WebhookProjectColumnCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectColumnCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-column-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a column on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a card on a project (classic), use the &#x60;project&#x60; and &#x60;project_card&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A column was deleted from a project (classic).
         * @param webhookProjectColumnDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectColumnDeleted(webhookProjectColumnDeleted: WebhookProjectColumnDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectColumnDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-column-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a column on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a card on a project (classic), use the &#x60;project&#x60; and &#x60;project_card&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * The name of a column on a project (classic) was changed.
         * @param webhookProjectColumnEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectColumnEdited(webhookProjectColumnEdited: WebhookProjectColumnEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectColumnEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-column-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a column on a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a project (classic) or a card on a project (classic), use the &#x60;project&#x60; and &#x60;project_card&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A column was moved to a new position on a project (classic).
         * @param webhookProjectColumnMoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectColumnMoved(webhookProjectColumnMoved: WebhookProjectColumnMoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectColumnMoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-column-moved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a card or column on a project (classic), use the &#x60;project_card&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A project (classic) was created.
         * @param webhookProjectCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectCreated(webhookProjectCreated: WebhookProjectCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a card or column on a project (classic), use the &#x60;project_card&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A project (classic) was deleted.
         * @param webhookProjectDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectDeleted(webhookProjectDeleted: WebhookProjectDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a card or column on a project (classic), use the &#x60;project_card&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * The name or description of a project (classic) was changed.
         * @param webhookProjectEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectEdited(webhookProjectEdited: WebhookProjectEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a project (classic). For more information, see \&quot;[About projects (classic)](https://docs.github.com/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards).\&quot; For information about the API to manage classic projects, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#project) or \&quot;[Projects (classic)](https://docs.github.com/rest/projects)\&quot; in the REST API documentation.  For activity relating to a card or column on a project (classic), use the &#x60;project_card&#x60; and &#x60;project_column&#x60; event.  This event relates to projects (classic) only. For activity relating to the new Projects experience, use the &#x60;projects_v2&#x60; event instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; repository or organization permission.
        * A project (classic) was closed.
         * @param webhookProjectReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectReopened(webhookProjectReopened: WebhookProjectReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/project-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2).  For activity relating to a item on a project, use the &#x60;projects_v2_item&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * A project in the organization was closed.
         * @param webhookProjectsV2ProjectClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional, default to "push")
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2Closed(webhookProjectsV2ProjectClosed: WebhookProjectsV2ProjectClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.String?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ProjectClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2).  For activity relating to a item on a project, use the &#x60;projects_v2_item&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * A project in the organization was created.
         * @param webhookProjectsV2ProjectCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2Created(webhookProjectsV2ProjectCreated: WebhookProjectsV2ProjectCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ProjectCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2).  For activity relating to a item on a project, use the &#x60;projects_v2_item&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * A project in the organization was deleted.
         * @param webhookProjectsV2ProjectDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2Deleted(webhookProjectsV2ProjectDeleted: WebhookProjectsV2ProjectDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ProjectDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2).  For activity relating to a item on a project, use the &#x60;projects_v2_item&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * The title, description, or README of a project in the organization was changed.
         * @param webhookProjectsV2ProjectEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2Edited(webhookProjectsV2ProjectEdited: WebhookProjectsV2ProjectEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ProjectEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * An item on an organization project was archived. For more information, see \&quot;[Archiving items from your project](https://docs.github.com/issues/planning-and-tracking-with-projects/managing-items-in-your-project/archiving-items-from-your-project).\&quot;
         * @param webhookProjectsV2ItemArchived  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional, default to "push")
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemArchived(webhookProjectsV2ItemArchived: WebhookProjectsV2ItemArchived, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.String?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemArchived

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-archived",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * A draft issue in an organization project was converted to an issue.
         * @param webhookProjectsV2ItemConverted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemConverted(webhookProjectsV2ItemConverted: WebhookProjectsV2ItemConverted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemConverted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-converted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * An item was added to a project in the organization.
         * @param webhookProjectsV2ItemCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemCreated(webhookProjectsV2ItemCreated: WebhookProjectsV2ItemCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * An item was deleted from a project in the organization.
         * @param webhookProjectsV2ItemDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemDeleted(webhookProjectsV2ItemDeleted: WebhookProjectsV2ItemDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * The values or state of an item in an organization project were changed. For example, the value of a field was updated, the body of a draft issue was changed, or a draft issue was converted to an issue.
         * @param webhookProjectsV2ItemEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemEdited(webhookProjectsV2ItemEdited: WebhookProjectsV2ItemEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * The position of an item in an organization project was changed. For example, an item was moved above or below another item in the table or board layout.
         * @param webhookProjectsV2ItemReordered  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemReordered(webhookProjectsV2ItemReordered: WebhookProjectsV2ItemReordered, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemReordered

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-reordered",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an item on an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2item).  For activity relating to a project (instead of an item on a project), use the &#x60;projects_v2&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * An archived item on an organization project was restored from the archive. For more information, see \&quot;[Archiving items from your project](https://docs.github.com/issues/planning-and-tracking-with-projects/managing-items-in-your-project/archiving-items-from-your-project).\&quot;
         * @param webhookProjectsV2ItemRestored  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2ItemRestored(webhookProjectsV2ItemRestored: WebhookProjectsV2ItemRestored, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ItemRestored

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-item-restored",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to an organization-level project. For more information, see \&quot;[About Projects](https://docs.github.com/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).\&quot; For information about the Projects API, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#projectv2).  For activity relating to a item on a project, use the &#x60;projects_v2_item&#x60; event. For activity relating to Projects (classic), use the &#x60;project&#x60;, &#x60;project_card&#x60;, and &#x60;project_column&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Projects\&quot; organization permission.  **Note**: Webhook events for projects are currently in beta and subject to change. To share feedback about projects webhooks with GitHub, see the [Projects webhook feedback discussion](https://github.com/orgs/community/discussions/17405).
        * A project in the organization was reopened.
         * @param webhookProjectsV2ProjectReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun projectsV2Reopened(webhookProjectsV2ProjectReopened: WebhookProjectsV2ProjectReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookProjectsV2ProjectReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/projects-v2-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was assigned to a user.
         * @param webhookPullRequestAssigned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestAssigned(webhookPullRequestAssigned: WebhookPullRequestAssigned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestAssigned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-assigned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * Auto merge was disabled for a pull request. For more information, see \&quot;[Automatically merging a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request).\&quot;
         * @param webhookPullRequestAutoMergeDisabled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestAutoMergeDisabled(webhookPullRequestAutoMergeDisabled: WebhookPullRequestAutoMergeDisabled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestAutoMergeDisabled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-auto-merge-disabled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * Auto merge was enabled for a pull request. For more information, see \&quot;[Automatically merging a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/automatically-merging-a-pull-request).\&quot;
         * @param webhookPullRequestAutoMergeEnabled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestAutoMergeEnabled(webhookPullRequestAutoMergeEnabled: WebhookPullRequestAutoMergeEnabled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestAutoMergeEnabled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-auto-merge-enabled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was closed. If &#x60;merged&#x60; is false in the webhook payload, the pull request was closed with unmerged commits. If &#x60;merged&#x60; is true in the webhook payload, the pull request was merged.
         * @param webhookPullRequestClosed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestClosed(webhookPullRequestClosed: WebhookPullRequestClosed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestClosed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-closed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was converted to a draft. For more information, see \&quot;[Changing the stage of a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request).\&quot;
         * @param webhookPullRequestConvertedToDraft  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestConvertedToDraft(webhookPullRequestConvertedToDraft: WebhookPullRequestConvertedToDraft, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestConvertedToDraft

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-converted-to-draft",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was removed from a milestone.
         * @param webhookPullRequestDemilestoned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestDemilestoned(webhookPullRequestDemilestoned: WebhookPullRequestDemilestoned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestDemilestoned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-demilestoned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was removed from the merge queue.
         * @param webhookPullRequestDequeued  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestDequeued(webhookPullRequestDequeued: WebhookPullRequestDequeued, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestDequeued

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-dequeued",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * The title or body of a pull request was edited, or the base branch of a pull request was changed.
         * @param webhookPullRequestEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestEdited(webhookPullRequestEdited: WebhookPullRequestEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was added to the merge queue.
         * @param webhookPullRequestEnqueued  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestEnqueued(webhookPullRequestEnqueued: WebhookPullRequestEnqueued, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestEnqueued

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-enqueued",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A label was added to a pull request.
         * @param webhookPullRequestLabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestLabeled(webhookPullRequestLabeled: WebhookPullRequestLabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestLabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-labeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * Conversation on a pull request was locked. For more information, see \&quot;[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations).\&quot;
         * @param webhookPullRequestLocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestLocked(webhookPullRequestLocked: WebhookPullRequestLocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestLocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-locked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was added to a milestone.
         * @param webhookPullRequestMilestoned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestMilestoned(webhookPullRequestMilestoned: WebhookPullRequestMilestoned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestMilestoned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-milestoned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request was created
         * @param webhookPullRequestOpened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestOpened(webhookPullRequestOpened: WebhookPullRequestOpened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestOpened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-opened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A draft pull request was marked as ready for review. For more information, see \&quot;[Changing the stage of a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request).\&quot;
         * @param webhookPullRequestReadyForReview  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReadyForReview(webhookPullRequestReadyForReview: WebhookPullRequestReadyForReview, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReadyForReview

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-ready-for-review",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A previously closed pull request was reopened.
         * @param webhookPullRequestReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReopened(webhookPullRequestReopened: WebhookPullRequestReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request&#39;s diff. For more information, see \&quot;[Commenting on a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\&quot; For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreviewcomment) or \&quot;[Pull request review comments](https://docs.github.com/rest/pulls/comments)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A comment on a pull request diff was created.
         * @param webhookPullRequestReviewCommentCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewCommentCreated(webhookPullRequestReviewCommentCreated: WebhookPullRequestReviewCommentCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewCommentCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-comment-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request&#39;s diff. For more information, see \&quot;[Commenting on a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\&quot; For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreviewcomment) or \&quot;[Pull request review comments](https://docs.github.com/rest/pulls/comments)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A comment on a pull request diff was deleted.
         * @param webhookPullRequestReviewCommentDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewCommentDeleted(webhookPullRequestReviewCommentDeleted: WebhookPullRequestReviewCommentDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewCommentDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-comment-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request&#39;s diff. For more information, see \&quot;[Commenting on a pull request](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request).\&quot; For information about the APIs to manage pull request review comments, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreviewcomment) or \&quot;[Pull request review comments](https://docs.github.com/rest/pulls/comments)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * The content of a comment on a pull request diff was changed.
         * @param webhookPullRequestReviewCommentEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewCommentEdited(webhookPullRequestReviewCommentEdited: WebhookPullRequestReviewCommentEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewCommentEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-comment-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \&quot;[About pull request reviews](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\&quot; For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreview) or \&quot;[Pull request reviews](https://docs.github.com/rest/pulls/reviews)\&quot; in the REST API documentation.  For activity related to pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A review on a pull request was dismissed.
         * @param webhookPullRequestReviewDismissed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewDismissed(webhookPullRequestReviewDismissed: WebhookPullRequestReviewDismissed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewDismissed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-dismissed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \&quot;[About pull request reviews](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\&quot; For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreview) or \&quot;[Pull request reviews](https://docs.github.com/rest/pulls/reviews)\&quot; in the REST API documentation.  For activity related to pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * The body comment on a pull request review was edited.
         * @param webhookPullRequestReviewEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewEdited(webhookPullRequestReviewEdited: WebhookPullRequestReviewEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A request for review by a person or team was removed from a pull request.
         * @param webhookPullRequestReviewRequestRemoved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewRequestRemoved(webhookPullRequestReviewRequestRemoved: WebhookPullRequestReviewRequestRemoved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewRequestRemoved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-request-removed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * Review by a person or team was requested for a pull request. For more information, see \&quot;[Requesting a pull request review](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/requesting-a-pull-request-review).\&quot;
         * @param webhookPullRequestReviewRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewRequested(webhookPullRequestReviewRequested: WebhookPullRequestReviewRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see \&quot;[About pull request reviews](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\&quot; For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreview) or \&quot;[Pull request reviews](https://docs.github.com/rest/pulls/reviews)\&quot; in the REST API documentation.  For activity related to pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A review on a pull request was submitted.
         * @param webhookPullRequestReviewSubmitted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewSubmitted(webhookPullRequestReviewSubmitted: WebhookPullRequestReviewSubmitted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewSubmitted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-submitted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see \&quot;[About pull request reviews](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\&quot; For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreviewthread) or \&quot;[Pull request review comments](https://docs.github.com/rest/pulls/comments)\&quot; in the REST API documentation.  For activity related to pull request review comments, pull request comments, or pull request reviews, use the &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A comment thread on a pull request was marked as resolved.
         * @param webhookPullRequestReviewThreadResolved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewThreadResolved(webhookPullRequestReviewThreadResolved: WebhookPullRequestReviewThreadResolved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewThreadResolved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-thread-resolved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a comment thread on a pull request. For more information, see \&quot;[About pull request reviews](https://docs.github.com/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews).\&quot; For information about the APIs to manage pull request reviews, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequestreviewthread) or \&quot;[Pull request review comments](https://docs.github.com/rest/pulls/comments)\&quot; in the REST API documentation.  For activity related to pull request review comments, pull request comments, or pull request reviews, use the &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A previously resolved comment thread on a pull request was marked as unresolved.
         * @param webhookPullRequestReviewThreadUnresolved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestReviewThreadUnresolved(webhookPullRequestReviewThreadUnresolved: WebhookPullRequestReviewThreadUnresolved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestReviewThreadUnresolved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-review-thread-unresolved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A pull request&#39;s head branch was updated. For example, the head branch was updated from the base branch or new commits were pushed to the head branch.
         * @param webhookPullRequestSynchronize  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestSynchronize(webhookPullRequestSynchronize: WebhookPullRequestSynchronize, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestSynchronize

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-synchronize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A user was unassigned from a pull request.
         * @param webhookPullRequestUnassigned  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestUnassigned(webhookPullRequestUnassigned: WebhookPullRequestUnassigned, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestUnassigned

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-unassigned",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * A label was removed from a pull request.
         * @param webhookPullRequestUnlabeled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestUnlabeled(webhookPullRequestUnlabeled: WebhookPullRequestUnlabeled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestUnlabeled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-unlabeled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity on a pull request. For more information, see \&quot;[About pull requests](https://docs.github.com/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests).\&quot; For information about the APIs to manage pull requests, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#pullrequest) or \&quot;[Pulls](https://docs.github.com/rest/pulls/pulls)\&quot; in the REST API documentation.  For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the &#x60;pull_request_review&#x60;, &#x60;pull_request_review_comment&#x60;, &#x60;issue_comment&#x60;, or &#x60;pull_request_review_thread&#x60; events instead.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Pull requests\&quot; repository permission.
        * Conversation on a pull request was unlocked. For more information, see \&quot;[Locking conversations](https://docs.github.com/communities/moderating-comments-and-conversations/locking-conversations).\&quot;
         * @param webhookPullRequestUnlocked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun pullRequestUnlocked(webhookPullRequestUnlocked: WebhookPullRequestUnlocked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPullRequestUnlocked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/pull-request-unlocked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed, when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch and tag deletions, use the [&#x60;delete&#x60;](#delete) webhook event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.  **Note**: An event will not be created when more than three tags are pushed at once.
        * 
         * @param webhookPush  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun push(webhookPush: WebhookPush, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookPush

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/push",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to GitHub Packages. For more information, see \&quot;[Introduction to GitHub Packages](https://docs.github.com/packages/learn-github-packages/introduction-to-github-packages).\&quot; For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#package) or \&quot;[Packages](https://docs.github.com/rest/packages)\&quot; in the REST API documentation.  To install this event on a GitHub App, the app must have at least read-level access for the \&quot;Packages\&quot; repository permission.  **Note**: GitHub recommends that you use the newer &#x60;package&#x60; event instead.
        * A package was published to a registry.
         * @param webhookRegistryPackagePublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun registryPackagePublished(webhookRegistryPackagePublished: WebhookRegistryPackagePublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRegistryPackagePublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/registry-package-published",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to GitHub Packages. For more information, see \&quot;[Introduction to GitHub Packages](https://docs.github.com/packages/learn-github-packages/introduction-to-github-packages).\&quot; For information about the APIs to manage GitHub Packages, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#package) or \&quot;[Packages](https://docs.github.com/rest/packages)\&quot; in the REST API documentation.  To install this event on a GitHub App, the app must have at least read-level access for the \&quot;Packages\&quot; repository permission.  **Note**: GitHub recommends that you use the newer &#x60;package&#x60; event instead.
        * A package that was previously published to a registry was updated.
         * @param webhookRegistryPackageUpdated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun registryPackageUpdated(webhookRegistryPackageUpdated: WebhookRegistryPackageUpdated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRegistryPackageUpdated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/registry-package-updated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A draft was saved, or a release or pre-release was published without previously being saved as a draft.
         * @param webhookReleaseCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releaseCreated(webhookReleaseCreated: WebhookReleaseCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleaseCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A release, pre-release, or draft release was deleted.
         * @param webhookReleaseDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releaseDeleted(webhookReleaseDeleted: WebhookReleaseDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleaseDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * The details of a release, pre-release, or draft release were edited. For more information, see \&quot;[Managing releases in a repository](https://docs.github.com/repositories/releasing-projects-on-github/managing-releases-in-a-repository#editing-a-release).\&quot;
         * @param webhookReleaseEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releaseEdited(webhookReleaseEdited: WebhookReleaseEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleaseEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A release was created and identified as a pre-release. A pre-release is a release that is not ready for production and may be unstable.
         * @param webhookReleasePrereleased  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releasePrereleased(webhookReleasePrereleased: WebhookReleasePrereleased, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleasePrereleased

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-prereleased",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A release, pre-release, or draft of a release was published.
         * @param webhookReleasePublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releasePublished(webhookReleasePublished: WebhookReleasePublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleasePublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-published",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A release was published, or a pre-release was changed to a release.
         * @param webhookReleaseReleased  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releaseReleased(webhookReleaseReleased: WebhookReleaseReleased, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleaseReleased

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-released",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to releases. For more information, see \&quot;[About releases](https://docs.github.com/repositories/releasing-projects-on-github/about-releases).\&quot; For information about the APIs to manage releases, see [the GraphQL API documentation](https://docs.github.com/graphql/reference/objects#release) or \&quot;[Releases](https://docs.github.com/rest/releases)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * A release or pre-release was unpublished.
         * @param webhookReleaseUnpublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun releaseUnpublished(webhookReleaseUnpublished: WebhookReleaseUnpublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookReleaseUnpublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/release-unpublished",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see \&quot;[About GitHub Security Advisories for repositories](https://docs.github.com/code-security/repository-security-advisories/about-github-security-advisories-for-repositories).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Repository security advisories\&quot; permission.
        * A repository security advisory was published.
         * @param webhookRepositoryAdvisoryPublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryAdvisoryPublished(webhookRepositoryAdvisoryPublished: WebhookRepositoryAdvisoryPublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryAdvisoryPublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-advisory-published",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see \&quot;[About GitHub Security Advisories for repositories](https://docs.github.com/code-security/repository-security-advisories/about-github-security-advisories-for-repositories).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Repository security advisories\&quot; permission.
        * A private vulnerability report was submitted.
         * @param webhookRepositoryAdvisoryReported  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryAdvisoryReported(webhookRepositoryAdvisoryReported: WebhookRepositoryAdvisoryReported, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryAdvisoryReported

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-advisory-reported",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A repository was archived.
         * @param webhookRepositoryArchived  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryArchived(webhookRepositoryArchived: WebhookRepositoryArchived, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryArchived

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-archived",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A repository was created.
         * @param webhookRepositoryCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryCreated(webhookRepositoryCreated: WebhookRepositoryCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A repository was deleted. GitHub Apps and repository webhooks will not receive this event.
         * @param webhookRepositoryDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryDeleted(webhookRepositoryDeleted: WebhookRepositoryDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a GitHub App sends a &#x60;POST&#x60; request to &#x60;/repos/{owner}/{repo}/dispatches&#x60;. For more information, see [the REST API documentation for creating a repository dispatch event](https://docs.github.com/rest/repos/repos#create-a-repository-dispatch-event).  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * The &#x60;event_type&#x60; that was specified in the &#x60;POST /repos/{owner}/{repo}/dispatches&#x60; request body.
         * @param webhookRepositoryDispatchSample  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryDispatchSampleCollected(webhookRepositoryDispatchSample: WebhookRepositoryDispatchSample, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryDispatchSample

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-dispatch-sample.collected",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * The topics, default branch, description, or homepage of a repository was changed.
         * @param webhookRepositoryEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryEdited(webhookRepositoryEdited: WebhookRepositoryEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a repository is imported to GitHub. For more information, see \&quot;[Importing a repository with GitHub Importer](https://docs.github.com/get-started/importing-your-projects-to-github/importing-source-code-to-github/importing-a-repository-with-github-importer).\&quot; For more information about the API to manage imports, see [the REST API documentation](https://docs.github.com/rest/migrations/source-imports).
        * 
         * @param webhookRepositoryImport  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryImport(webhookRepositoryImport: WebhookRepositoryImport, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryImport

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-import",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * The visibility of a repository was changed to &#x60;private&#x60;.
         * @param webhookRepositoryPrivatized  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryPrivatized(webhookRepositoryPrivatized: WebhookRepositoryPrivatized, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryPrivatized

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-privatized",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * The visibility of a repository was changed to &#x60;public&#x60;.
         * @param webhookRepositoryPublicized  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryPublicized(webhookRepositoryPublicized: WebhookRepositoryPublicized, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryPublicized

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-publicized",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * The name of a repository was changed.
         * @param webhookRepositoryRenamed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryRenamed(webhookRepositoryRenamed: WebhookRepositoryRenamed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryRenamed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-renamed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repository rulesets. For more information about repository rulesets, see \&quot;[Managing rulesets](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets).\&quot; For more information on managing rulesets via the APIs, see [Repository ruleset](https://docs.github.com/graphql/reference/objects#repositoryruleset) in the GraphQL documentation or \&quot;[Repository rules](https://docs.github.com/rest/repos/rules)\&quot; and \&quot;[Organization rules](https://docs.github.com/rest/orgs/rules) in the REST API documentation.\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository or organization permission.
        * A repository ruleset was created.
         * @param webhookRepositoryRulesetCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryRulesetCreated(webhookRepositoryRulesetCreated: WebhookRepositoryRulesetCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryRulesetCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-ruleset-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repository rulesets. For more information about repository rulesets, see \&quot;[Managing rulesets](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets).\&quot; For more information on managing rulesets via the APIs, see [Repository ruleset](https://docs.github.com/graphql/reference/objects#repositoryruleset) in the GraphQL documentation or \&quot;[Repository rules](https://docs.github.com/rest/repos/rules)\&quot; and \&quot;[Organization rules](https://docs.github.com/rest/orgs/rules) in the REST API documentation.\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository or organization permission.
        * A repository ruleset was deleted.
         * @param webhookRepositoryRulesetDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryRulesetDeleted(webhookRepositoryRulesetDeleted: WebhookRepositoryRulesetDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryRulesetDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-ruleset-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repository rulesets. For more information about repository rulesets, see \&quot;[Managing rulesets](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets).\&quot; For more information on managing rulesets via the APIs, see [Repository ruleset](https://docs.github.com/graphql/reference/objects#repositoryruleset) in the GraphQL documentation or \&quot;[Repository rules](https://docs.github.com/rest/repos/rules)\&quot; and \&quot;[Organization rules](https://docs.github.com/rest/orgs/rules) in the REST API documentation.\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository or organization permission.
        * A repository ruleset was edited.
         * @param webhookRepositoryRulesetEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryRulesetEdited(webhookRepositoryRulesetEdited: WebhookRepositoryRulesetEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryRulesetEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-ruleset-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * Ownership of the repository was transferred to a user or organization account. This event is only sent to the account where the ownership is transferred. To receive the &#x60;repository.transferred&#x60; event, the new owner account must have the GitHub App installed, and the App must be subscribed to \&quot;Repository\&quot; events.
         * @param webhookRepositoryTransferred  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryTransferred(webhookRepositoryTransferred: WebhookRepositoryTransferred, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryTransferred

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-transferred",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repositories. For more information, see \&quot;[About repositories](https://docs.github.com/repositories/creating-and-managing-repositories/about-repositories).\&quot; For information about the APIs to manage repositories, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#repository) or \&quot;[Repositories](https://docs.github.com/rest/repos)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * A previously archived repository was unarchived.
         * @param webhookRepositoryUnarchived  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryUnarchived(webhookRepositoryUnarchived: WebhookRepositoryUnarchived, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryUnarchived

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-unarchived",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a security vulnerability alert in a repository.  **Note**: This event is deprecated. Use the &#x60;dependabot_alert&#x60; event instead.
        * A repository vulnerability alert was created.
         * @param webhookRepositoryVulnerabilityAlertCreate  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryVulnerabilityAlertCreate(webhookRepositoryVulnerabilityAlertCreate: WebhookRepositoryVulnerabilityAlertCreate, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryVulnerabilityAlertCreate

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-vulnerability-alert-create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a security vulnerability alert in a repository.  **Note**: This event is deprecated. Use the &#x60;dependabot_alert&#x60; event instead.
        * A repository vulnerability alert was dismissed.
         * @param webhookRepositoryVulnerabilityAlertDismiss  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryVulnerabilityAlertDismiss(webhookRepositoryVulnerabilityAlertDismiss: WebhookRepositoryVulnerabilityAlertDismiss, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryVulnerabilityAlertDismiss

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-vulnerability-alert-dismiss",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a security vulnerability alert in a repository.  **Note**: This event is deprecated. Use the &#x60;dependabot_alert&#x60; event instead.
        * A previously dismissed or resolved repository vulnerability alert was reopened.
         * @param webhookRepositoryVulnerabilityAlertReopen  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryVulnerabilityAlertReopen(webhookRepositoryVulnerabilityAlertReopen: WebhookRepositoryVulnerabilityAlertReopen, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryVulnerabilityAlertReopen

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-vulnerability-alert-reopen",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a security vulnerability alert in a repository.  **Note**: This event is deprecated. Use the &#x60;dependabot_alert&#x60; event instead.
        * A repository vulnerability alert was marked as resolved.
         * @param webhookRepositoryVulnerabilityAlertResolve  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun repositoryVulnerabilityAlertResolve(webhookRepositoryVulnerabilityAlertResolve: WebhookRepositoryVulnerabilityAlertResolve, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookRepositoryVulnerabilityAlertResolve

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repository-vulnerability-alert-resolve",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alert locations, use the &#x60;secret_scanning_alert_location&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A secret scanning alert was created.
         * @param webhookSecretScanningAlertCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertCreated(webhookSecretScanningAlertCreated: WebhookSecretScanningAlertCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to the locations of a secret in a secret scanning alert.  For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alerts, use the &#x60;secret_scanning_alert&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.
         * @param webhookSecretScanningAlertLocationCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertLocationCreated(webhookSecretScanningAlertLocationCreated: WebhookSecretScanningAlertLocationCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertLocationCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-location-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alert locations, use the &#x60;secret_scanning_alert_location&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A previously closed secret scanning alert was reopened.
         * @param webhookSecretScanningAlertReopened  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertReopened(webhookSecretScanningAlertReopened: WebhookSecretScanningAlertReopened, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertReopened

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-reopened",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alert locations, use the &#x60;secret_scanning_alert_location&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A secret scanning alert was closed.
         * @param webhookSecretScanningAlertResolved  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertResolved(webhookSecretScanningAlertResolved: WebhookSecretScanningAlertResolved, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertResolved

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-resolved",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alert locations, use the &#x60;secret_scanning_alert_location&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A secret scanning alert was marked as revoked.
         * @param webhookSecretScanningAlertRevoked  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertRevoked(webhookSecretScanningAlertRevoked: WebhookSecretScanningAlertRevoked, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertRevoked

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-revoked",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see \&quot;[About secret scanning](https://docs.github.com/code-security/secret-scanning/about-secret-scanning).\&quot; For information about the API to manage secret scanning alerts, see \&quot;[Secret scanning](https://docs.github.com/rest/secret-scanning)\&quot; in the REST API documentation.  For activity relating to secret scanning alert locations, use the &#x60;secret_scanning_alert_location&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Secret scanning alerts\&quot; repository permission.
        * A secret scanning alert was validated.
         * @param webhookSecretScanningAlertValidated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun secretScanningAlertValidated(webhookSecretScanningAlertValidated: WebhookSecretScanningAlertValidated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecretScanningAlertValidated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/secret-scanning-alert-validated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see \&quot;[About global security advisories](https://docs.github.com/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories).\&quot; For information about the API to manage security advisories, see [the REST API documentation](https://docs.github.com/rest/security-advisories/global-advisories) or [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#securityadvisory).  GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot;
        * A security advisory was published to the GitHub community.
         * @param webhookSecurityAdvisoryPublished  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun securityAdvisoryPublished(webhookSecurityAdvisoryPublished: WebhookSecurityAdvisoryPublished, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecurityAdvisoryPublished

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/security-advisory-published",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see \&quot;[About global security advisories](https://docs.github.com/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories).\&quot; For information about the API to manage security advisories, see [the REST API documentation](https://docs.github.com/rest/security-advisories/global-advisories) or [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#securityadvisory).  GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot;
        * The metadata or description of a security advisory was changed.
         * @param webhookSecurityAdvisoryUpdated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun securityAdvisoryUpdated(webhookSecurityAdvisoryUpdated: WebhookSecurityAdvisoryUpdated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecurityAdvisoryUpdated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/security-advisory-updated",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see \&quot;[About global security advisories](https://docs.github.com/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-global-security-advisories).\&quot; For information about the API to manage security advisories, see [the REST API documentation](https://docs.github.com/rest/security-advisories/global-advisories) or [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#securityadvisory).  GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see \&quot;[About Dependabot alerts](https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\&quot;
        * A previously published security advisory was withdrawn.
         * @param webhookSecurityAdvisoryWithdrawn  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun securityAdvisoryWithdrawn(webhookSecurityAdvisoryWithdrawn: WebhookSecurityAdvisoryWithdrawn, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecurityAdvisoryWithdrawn

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/security-advisory-withdrawn",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see \&quot;[GitHub security features](https://docs.github.com/code-security/getting-started/github-security-features).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Administration\&quot; repository permission.
        * 
         * @param webhookSecurityAndAnalysis  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun securityAndAnalysis(webhookSecurityAndAnalysis: WebhookSecurityAndAnalysis, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSecurityAndAnalysis

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/security-and-analysis",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A sponsorship was cancelled and the last billing cycle has ended.  This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
         * @param webhookSponsorshipCancelled  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipCancelled(webhookSponsorshipCancelled: WebhookSponsorshipCancelled, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipCancelled

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-cancelled",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A sponsor created a sponsorship for a sponsored account. This event occurs once the payment is successfully processed.
         * @param webhookSponsorshipCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipCreated(webhookSponsorshipCreated: WebhookSponsorshipCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A monthly sponsor changed who can see their sponsorship. If you recognize your sponsors publicly, you may want to update your sponsor recognition to reflect the change when this event occurs.
         * @param webhookSponsorshipEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipEdited(webhookSponsorshipEdited: WebhookSponsorshipEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A sponsor scheduled a cancellation for their sponsorship. The cancellation will become effective on their next billing date.  This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.
         * @param webhookSponsorshipPendingCancellation  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipPendingCancellation(webhookSponsorshipPendingCancellation: WebhookSponsorshipPendingCancellation, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipPendingCancellation

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-pending-cancellation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A sponsor scheduled a downgrade to a lower sponsorship tier. The new tier will become effective on their next billing date.
         * @param webhookSponsorshipPendingTierChange  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipPendingTierChange(webhookSponsorshipPendingTierChange: WebhookSponsorshipPendingTierChange, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipPendingTierChange

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-pending-tier-change",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a sponsorship listing. For more information, see \&quot;[About GitHub Sponsors](https://docs.github.com/sponsors/getting-started-with-github-sponsors/about-github-sponsors).\&quot; For information about the API to manage sponsors, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#sponsorship).  You can only create a sponsorship webhook on GitHub.com. For more information, see \&quot;[Configuring webhooks for events in your sponsored account](https://docs.github.com/sponsors/integrating-with-github-sponsors/configuring-webhooks-for-events-in-your-sponsored-account).\&quot;
        * A sponsor changed the tier of their sponsorship and the change has taken effect. If a sponsor upgraded their tier, the change took effect immediately. If a sponsor downgraded their tier, the change took effect at the beginning of the sponsor&#39;s next billing cycle.
         * @param webhookSponsorshipTierChanged  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun sponsorshipTierChanged(webhookSponsorshipTierChanged: WebhookSponsorshipTierChanged, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookSponsorshipTierChanged

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/sponsorship-tier-changed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repository stars. For more information about stars, see \&quot;[Saving repositories with stars](https://docs.github.com/get-started/exploring-projects-on-github/saving-repositories-with-stars).\&quot; For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#starredrepositoryconnection) or \&quot;[Starring](https://docs.github.com/rest/activity/starring)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * Someone starred a repository.
         * @param webhookStarCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun starCreated(webhookStarCreated: WebhookStarCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookStarCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/star-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to repository stars. For more information about stars, see \&quot;[Saving repositories with stars](https://docs.github.com/get-started/exploring-projects-on-github/saving-repositories-with-stars).\&quot; For information about the APIs to manage stars, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#starredrepositoryconnection) or \&quot;[Starring](https://docs.github.com/rest/activity/starring)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * Someone unstarred the repository.
         * @param webhookStarDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun starDeleted(webhookStarDeleted: WebhookStarDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookStarDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/star-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when the status of a Git commit changes. For example, commits can be marked as &#x60;error&#x60;, &#x60;failure&#x60;, &#x60;pending&#x60;, or &#x60;success&#x60;. For more information, see \&quot;[About status checks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks).\&quot; For information about the APIs to manage commit statuses, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#status) or \&quot;[Commit statuses](https://docs.github.com/rest/commits/statuses)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Commit statuses\&quot; repository permission.
        * 
         * @param webhookStatus  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun status(webhookStatus: WebhookStatus, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookStatus

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a team is added to a repository. For more information, see \&quot;[Managing teams and people with access to your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-teams-and-people-with-access-to-your-repository).\&quot;  For activity relating to teams, see the &#x60;teams&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * 
         * @param webhookTeamAdd  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamAdd(webhookTeamAdd: WebhookTeamAdd, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamAdd

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-add",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to teams in an organization. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A team was granted access to a repository.
         * @param webhookTeamAddedToRepository  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamAddedToRepository(webhookTeamAddedToRepository: WebhookTeamAddedToRepository, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamAddedToRepository

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-added-to-repository",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to teams in an organization. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A team was created.
         * @param webhookTeamCreated  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamCreated(webhookTeamCreated: WebhookTeamCreated, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamCreated

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-created",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to teams in an organization. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A team was deleted.
         * @param webhookTeamDeleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamDeleted(webhookTeamDeleted: WebhookTeamDeleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamDeleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-deleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to teams in an organization. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * The name, description, or visibility of a team was changed.
         * @param webhookTeamEdited  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamEdited(webhookTeamEdited: WebhookTeamEdited, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamEdited

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-edited",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to teams in an organization. For more information, see \&quot;[About teams](https://docs.github.com/organizations/organizing-members-into-teams/about-teams).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Members\&quot; organization permission.
        * A team&#39;s access to a repository was removed.
         * @param webhookTeamRemovedFromRepository  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun teamRemovedFromRepository(webhookTeamRemovedFromRepository: WebhookTeamRemovedFromRepository, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookTeamRemovedFromRepository

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/team-removed-from-repository",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see \&quot;[Managing your subscriptions](https://docs.github.com/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/managing-your-subscriptions).\&quot; For information about the APIs to manage watching, see \&quot;[Watching](https://docs.github.com/rest/activity/watching)\&quot; in the REST API documentation.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Metadata\&quot; repository permission.
        * Someone started watching the repository.
         * @param webhookWatchStarted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun watchStarted(webhookWatchStarted: WebhookWatchStarted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWatchStarted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/watch-started",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when a GitHub Actions workflow is manually triggered. For more information, see \&quot;[Manually running a workflow](https://docs.github.com/actions/managing-workflow-runs/manually-running-a-workflow).\&quot;  For activity relating to workflow runs, use the &#x60;workflow_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Contents\&quot; repository permission.
        * 
         * @param webhookWorkflowDispatch  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowDispatch(webhookWorkflowDispatch: WebhookWorkflowDispatch, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowDispatch

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-dispatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \&quot;[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow).\&quot; For information about the API to manage workflow jobs, see \&quot;[Workflow jobs](https://docs.github.com/rest/actions/workflow-jobs)\&quot; in the REST API documentation.  For activity relating to a workflow run instead of a job in a workflow run, use the &#x60;workflow_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.
         * @param webhookWorkflowJobCompleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowJobCompleted(webhookWorkflowJobCompleted: WebhookWorkflowJobCompleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowJobCompleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-job-completed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \&quot;[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow).\&quot; For information about the API to manage workflow jobs, see \&quot;[Workflow jobs](https://docs.github.com/rest/actions/workflow-jobs)\&quot; in the REST API documentation.  For activity relating to a workflow run instead of a job in a workflow run, use the &#x60;workflow_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A job in a workflow run started processing on a runner.
         * @param webhookWorkflowJobInProgress  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowJobInProgress(webhookWorkflowJobInProgress: WebhookWorkflowJobInProgress, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowJobInProgress

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-job-in-progress",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \&quot;[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow).\&quot; For information about the API to manage workflow jobs, see \&quot;[Workflow jobs](https://docs.github.com/rest/actions/workflow-jobs)\&quot; in the REST API documentation.  For activity relating to a workflow run instead of a job in a workflow run, use the &#x60;workflow_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A job in a workflow run was created.
         * @param webhookWorkflowJobQueued  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowJobQueued(webhookWorkflowJobQueued: WebhookWorkflowJobQueued, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowJobQueued

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-job-queued",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see \&quot;[Using jobs in a workflow](https://docs.github.com/actions/using-jobs/using-jobs-in-a-workflow).\&quot; For information about the API to manage workflow jobs, see \&quot;[Workflow jobs](https://docs.github.com/rest/actions/workflow-jobs)\&quot; in the REST API documentation.  For activity relating to a workflow run instead of a job in a workflow run, use the &#x60;workflow_run&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A job in a workflow run was created and is waiting for approvals.
         * @param webhookWorkflowJobWaiting  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowJobWaiting(webhookWorkflowJobWaiting: WebhookWorkflowJobWaiting, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowJobWaiting

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-job-waiting",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \&quot;[About workflows](https://docs.github.com/actions/using-workflows/about-workflows).\&quot; For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) or \&quot;[Workflow runs](https://docs.github.com/rest/actions/workflow-runs)\&quot; in the REST API documentation.  For activity relating to a job in a workflow run, use the &#x60;workflow_job&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.
         * @param webhookWorkflowRunCompleted  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowRunCompleted(webhookWorkflowRunCompleted: WebhookWorkflowRunCompleted, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowRunCompleted

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-run-completed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \&quot;[About workflows](https://docs.github.com/actions/using-workflows/about-workflows).\&quot; For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) or \&quot;[Workflow runs](https://docs.github.com/rest/actions/workflow-runs)\&quot; in the REST API documentation.  For activity relating to a job in a workflow run, use the &#x60;workflow_job&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A workflow run started processing on a runner.
         * @param webhookWorkflowRunInProgress  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowRunInProgress(webhookWorkflowRunInProgress: WebhookWorkflowRunInProgress, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowRunInProgress

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-run-in-progress",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see \&quot;[About workflows](https://docs.github.com/actions/using-workflows/about-workflows).\&quot; For information about the APIs to manage workflow runs, see [the GraphQL documentation](https://docs.github.com/graphql/reference/objects#workflowrun) or \&quot;[Workflow runs](https://docs.github.com/rest/actions/workflow-runs)\&quot; in the REST API documentation.  For activity relating to a job in a workflow run, use the &#x60;workflow_job&#x60; event.  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Actions\&quot; repository permission.
        * A workflow run was triggered.
         * @param webhookWorkflowRunRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun workflowRunRequested(webhookWorkflowRunRequested: WebhookWorkflowRunRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookWorkflowRunRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/workflow-run-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

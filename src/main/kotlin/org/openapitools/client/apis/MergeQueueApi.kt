/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.WebhookMergeGroupChecksRequested
import org.openapitools.client.models.WebhookMergeGroupDestroyed

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class MergeQueueApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * This event occurs when there is activity relating to a merge group in a merge queue. For more information, see \&quot;[Managing a merge queue](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Merge queues\&quot; repository permission.
        * Status checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.  When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.
         * @param webhookMergeGroupChecksRequested  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun mergeGroupChecksRequested(webhookMergeGroupChecksRequested: WebhookMergeGroupChecksRequested, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMergeGroupChecksRequested

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merge-group-checks-requested",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * This event occurs when there is activity relating to a merge group in a merge queue. For more information, see \&quot;[Managing a merge queue](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue).\&quot;  To subscribe to this event, a GitHub App must have at least read-level access for the \&quot;Merge queues\&quot; repository permission.
        * The merge queue groups pull requests together to be merged. This event indicates that one of those merge groups was destroyed. This happens when a pull request is removed from the queue: any group containing that pull request is also destroyed.  When you receive this event, you may want to cancel any checks that are running on the head SHA to avoid wasting computing resources on a merge group that will not be used.
         * @param webhookMergeGroupDestroyed  
         * @param userAgent  (optional)
         * @param xGithubHookId  (optional)
         * @param xGithubEvent  (optional)
         * @param xGithubHookInstallationTargetId  (optional)
         * @param xGithubHookInstallationTargetType  (optional)
         * @param xGitHubDelivery  (optional)
         * @param xHubSignature256  (optional)
         * @return void
        */
        open suspend fun mergeGroupDestroyed(webhookMergeGroupDestroyed: WebhookMergeGroupDestroyed, userAgent: kotlin.Any?, xGithubHookId: kotlin.Any?, xGithubEvent: kotlin.Any?, xGithubHookInstallationTargetId: kotlin.Any?, xGithubHookInstallationTargetType: kotlin.Any?, xGitHubDelivery: kotlin.Any?, xHubSignature256: kotlin.Any?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = webhookMergeGroupDestroyed

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xGithubHookId?.apply { localVariableHeaders["X-Github-Hook-Id"] = this.toString() }
            xGithubEvent?.apply { localVariableHeaders["X-Github-Event"] = this.toString() }
            xGithubHookInstallationTargetId?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Id"] = this.toString() }
            xGithubHookInstallationTargetType?.apply { localVariableHeaders["X-Github-Hook-Installation-Target-Type"] = this.toString() }
            xGitHubDelivery?.apply { localVariableHeaders["X-GitHub-Delivery"] = this.toString() }
            xHubSignature256?.apply { localVariableHeaders["X-Hub-Signature-256"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/merge-group-destroyed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.CopilotAddCopilotSeatsForTeams201Response
import org.openapitools.client.models.CopilotAddCopilotSeatsForTeamsRequest
import org.openapitools.client.models.CopilotAddCopilotSeatsForUsersRequest
import org.openapitools.client.models.CopilotCancelCopilotSeatAssignmentForTeams200Response
import org.openapitools.client.models.CopilotCancelCopilotSeatAssignmentForTeamsRequest
import org.openapitools.client.models.CopilotCancelCopilotSeatAssignmentForUsersRequest
import org.openapitools.client.models.CopilotListCopilotSeats200Response
import org.openapitools.client.models.CopilotOrganizationDetails
import org.openapitools.client.models.CopilotSeatDetails

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class CopilotApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add teams to the Copilot subscription for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Purchases a GitHub Copilot seat for all users within each specified team. The organization will be billed accordingly. For more information about Copilot pricing, see \&quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\&quot;.  Only organization owners can configure GitHub Copilot in their organization.  In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \&quot;[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)\&quot;. For more information about setting a suggestion matching policy, see \&quot;[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)\&quot;.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param copilotAddCopilotSeatsForTeamsRequest  
         * @return CopilotAddCopilotSeatsForTeams201Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotAddCopilotSeatsForTeams(org: kotlin.String, copilotAddCopilotSeatsForTeamsRequest: CopilotAddCopilotSeatsForTeamsRequest): HttpResponse<CopilotAddCopilotSeatsForTeams201Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = copilotAddCopilotSeatsForTeamsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/copilot/billing/selected_teams".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add users to the Copilot subscription for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Purchases a GitHub Copilot seat for each user specified. The organization will be billed accordingly. For more information about Copilot pricing, see \&quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\&quot;.  Only organization owners can configure GitHub Copilot in their organization.  In order for an admin to use this endpoint, the organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy. For more information about setting up a Copilot subscription, see \&quot;[Setting up a Copilot subscription for your organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)\&quot;. For more information about setting a suggestion matching policy, see \&quot;[Configuring suggestion matching policies for GitHub Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)\&quot;.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param copilotAddCopilotSeatsForUsersRequest  
         * @return CopilotAddCopilotSeatsForTeams201Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotAddCopilotSeatsForUsers(org: kotlin.String, copilotAddCopilotSeatsForUsersRequest: CopilotAddCopilotSeatsForUsersRequest): HttpResponse<CopilotAddCopilotSeatsForTeams201Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = copilotAddCopilotSeatsForUsersRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/copilot/billing/selected_users".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove teams from the Copilot subscription for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Cancels the Copilot seat assignment for all members of each team specified. This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.  For more information about Copilot pricing, see \&quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\&quot;.  For more information about disabling access to Copilot Business or Enterprise, see \&quot;[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)\&quot;.  Only organization owners can configure GitHub Copilot in their organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param copilotCancelCopilotSeatAssignmentForTeamsRequest  
         * @return CopilotCancelCopilotSeatAssignmentForTeams200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotCancelCopilotSeatAssignmentForTeams(org: kotlin.String, copilotCancelCopilotSeatAssignmentForTeamsRequest: CopilotCancelCopilotSeatAssignmentForTeamsRequest): HttpResponse<CopilotCancelCopilotSeatAssignmentForTeams200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = copilotCancelCopilotSeatAssignmentForTeamsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/copilot/billing/selected_teams".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove users from the Copilot subscription for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Cancels the Copilot seat assignment for each user specified. This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle, and the organization will not be billed further for those users.  For more information about Copilot pricing, see \&quot;[Pricing for GitHub Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)\&quot;.  For more information about disabling access to Copilot Business or Enterprise, see \&quot;[Revoking access to GitHub Copilot for specific users in your organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)\&quot;.  Only organization owners can configure GitHub Copilot in their organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param copilotCancelCopilotSeatAssignmentForUsersRequest  
         * @return CopilotCancelCopilotSeatAssignmentForTeams200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotCancelCopilotSeatAssignmentForUsers(org: kotlin.String, copilotCancelCopilotSeatAssignmentForUsersRequest: CopilotCancelCopilotSeatAssignmentForUsersRequest): HttpResponse<CopilotCancelCopilotSeatAssignmentForTeams200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = copilotCancelCopilotSeatAssignmentForUsersRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/copilot/billing/selected_users".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Copilot seat information and settings for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Gets information about an organization&#39;s Copilot subscription, including seat breakdown and code matching policies. To configure these settings, go to your organization&#39;s settings on GitHub.com. For more information, see \&quot;[Managing policies for Copilot in your organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)\&quot;.  Only organization owners can configure and view details about the organization&#39;s Copilot Business subscription.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return CopilotOrganizationDetails
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotGetCopilotOrganizationDetails(org: kotlin.String): HttpResponse<CopilotOrganizationDetails> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/copilot/billing".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Copilot seat assignment details for a user
        * **Note**: This endpoint is in beta and is subject to change.  Gets the GitHub Copilot seat assignment details for a member of an organization who currently has access to GitHub Copilot.  Organization owners can view GitHub Copilot seat assignment details for members in their organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return CopilotSeatDetails
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotGetCopilotSeatDetailsForUser(org: kotlin.String, username: kotlin.String): HttpResponse<CopilotSeatDetails> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/members/{username}/copilot".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List all Copilot seat assignments for an organization
        * **Note**: This endpoint is in beta and is subject to change.  Lists all Copilot seat assignments for an organization that are currently being billed (either active or pending cancellation at the start of the next billing cycle).  Only organization owners can configure and view details about the organization&#39;s Copilot Business or Enterprise subscription.  OAuth app tokens and personal access tokens (classic) need the &#x60;manage_billing:copilot&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 50)
         * @return CopilotListCopilotSeats200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun copilotListCopilotSeats(org: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<CopilotListCopilotSeats200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/copilot/billing/seats".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

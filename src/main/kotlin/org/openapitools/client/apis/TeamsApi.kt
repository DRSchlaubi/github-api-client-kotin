/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.MinimalRepository
import org.openapitools.client.models.OrganizationInvitation
import org.openapitools.client.models.OrgsRemoveOutsideCollaborator422Response
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.Team
import org.openapitools.client.models.TeamDiscussion
import org.openapitools.client.models.TeamDiscussionComment
import org.openapitools.client.models.TeamFull
import org.openapitools.client.models.TeamMembership
import org.openapitools.client.models.TeamProject
import org.openapitools.client.models.TeamRepository
import org.openapitools.client.models.TeamsAddOrUpdateMembershipForUserInOrgRequest
import org.openapitools.client.models.TeamsAddOrUpdateProjectPermissionsInOrgRequest
import org.openapitools.client.models.TeamsAddOrUpdateRepoPermissionsInOrgRequest
import org.openapitools.client.models.TeamsAddOrUpdateRepoPermissionsLegacyRequest
import org.openapitools.client.models.TeamsCreateDiscussionCommentInOrgRequest
import org.openapitools.client.models.TeamsCreateDiscussionInOrgRequest
import org.openapitools.client.models.TeamsCreateRequest
import org.openapitools.client.models.TeamsUpdateDiscussionInOrgRequest
import org.openapitools.client.models.TeamsUpdateInOrgRequest
import org.openapitools.client.models.TeamsUpdateLegacyRequest
import org.openapitools.client.models.ValidationError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class TeamsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add team member (Legacy)
        * The \&quot;Add team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they&#39;re changing. The person being added to the team must be a member of the team&#39;s organization.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun teamsAddMemberLegacy(teamId: kotlin.Int, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/teams/{team_id}/members/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team membership for a user
        * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  An organization owner can add someone who is not part of the team&#39;s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \&quot;pending\&quot; state until the person accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param username The handle for the GitHub user account. 
         * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
         * @return TeamMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsAddOrUpdateMembershipForUserInOrg(org: kotlin.String, teamSlug: kotlin.String, username: kotlin.String, teamsAddOrUpdateMembershipForUserInOrgRequest: TeamsAddOrUpdateMembershipForUserInOrgRequest?): HttpResponse<TeamMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateMembershipForUserInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/teams/{team_slug}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team membership for a user (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  If the user is already a member of the team&#39;s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  If the user is unaffiliated with the team&#39;s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \&quot;pending\&quot; state until the user accepts the invitation, at which point the membership will transition to the \&quot;active\&quot; state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.  If the user is already a member of the team, this endpoint will update the role of the team member&#39;s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @param teamsAddOrUpdateMembershipForUserInOrgRequest  (optional)
         * @return TeamMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsAddOrUpdateMembershipForUserLegacy(teamId: kotlin.Int, username: kotlin.String, teamsAddOrUpdateMembershipForUserInOrgRequest: TeamsAddOrUpdateMembershipForUserInOrgRequest?): HttpResponse<TeamMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateMembershipForUserInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/teams/{team_id}/memberships/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team project permissions
        * Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param projectId The unique identifier of the project. 
         * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
         * @return void
        */
        open suspend fun teamsAddOrUpdateProjectPermissionsInOrg(org: kotlin.String, teamSlug: kotlin.String, projectId: kotlin.Int, teamsAddOrUpdateProjectPermissionsInOrgRequest: TeamsAddOrUpdateProjectPermissionsInOrgRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateProjectPermissionsInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/teams/{team_slug}/projects/{project_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team project permissions (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.  Adds an organization project to a team. To add a project to a team or update the team&#39;s permission on a project, the authenticated user must have &#x60;admin&#x60; permissions for the project. The project and team must be part of the same organization.
         * @param teamId The unique identifier of the team. 
         * @param projectId The unique identifier of the project. 
         * @param teamsAddOrUpdateProjectPermissionsInOrgRequest  (optional)
         * @return void
        */
        open suspend fun teamsAddOrUpdateProjectPermissionsLegacy(teamId: kotlin.Int, projectId: kotlin.Int, teamsAddOrUpdateProjectPermissionsInOrgRequest: TeamsAddOrUpdateProjectPermissionsInOrgRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateProjectPermissionsInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/teams/{team_id}/projects/{project_id}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team repository permissions
        * To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.  For more information about the permission levels, see \&quot;[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param teamsAddOrUpdateRepoPermissionsInOrgRequest  (optional)
         * @return void
        */
        open suspend fun teamsAddOrUpdateRepoPermissionsInOrg(org: kotlin.String, teamSlug: kotlin.String, owner: kotlin.String, repo: kotlin.String, teamsAddOrUpdateRepoPermissionsInOrgRequest: TeamsAddOrUpdateRepoPermissionsInOrgRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateRepoPermissionsInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add or update team repository permissions (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \&quot;[Add or update team repository permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)\&quot; endpoint.  To add a repository to a team or update the team&#39;s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a &#x60;422 Unprocessable Entity&#x60; status if you attempt to add a repository to a team that is not owned by the organization.  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;
         * @param teamId The unique identifier of the team. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param teamsAddOrUpdateRepoPermissionsLegacyRequest  (optional)
         * @return void
        */
        open suspend fun teamsAddOrUpdateRepoPermissionsLegacy(teamId: kotlin.Int, owner: kotlin.String, repo: kotlin.String, teamsAddOrUpdateRepoPermissionsLegacyRequest: TeamsAddOrUpdateRepoPermissionsLegacyRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsAddOrUpdateRepoPermissionsLegacyRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/teams/{team_id}/repos/{owner}/{repo}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check team permissions for a project
        * Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param projectId The unique identifier of the project. 
         * @return TeamProject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCheckPermissionsForProjectInOrg(org: kotlin.String, teamSlug: kotlin.String, projectId: kotlin.Int): HttpResponse<TeamProject> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/projects/{project_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check team permissions for a project (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.  Checks whether a team has &#x60;read&#x60;, &#x60;write&#x60;, or &#x60;admin&#x60; permissions for an organization project. The response includes projects inherited from a parent team.
         * @param teamId The unique identifier of the team. 
         * @param projectId The unique identifier of the project. 
         * @return TeamProject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCheckPermissionsForProjectLegacy(teamId: kotlin.Int, projectId: kotlin.Int): HttpResponse<TeamProject> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/projects/{project_id}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check team permissions for a repository
        * Checks whether a team has &#x60;admin&#x60;, &#x60;push&#x60;, &#x60;maintain&#x60;, &#x60;triage&#x60;, or &#x60;pull&#x60; permission for a repository. Repositories inherited through a parent team will also be checked.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the &#x60;application/vnd.github.v3.repository+json&#x60; accept header.  If a team doesn&#39;t have permission for the repository, you will receive a &#x60;404 Not Found&#x60; response status.  If the repository is private, you must have at least &#x60;read&#x60; permission for that repository, and your token must have the &#x60;repo&#x60; or &#x60;admin:org&#x60; scope. Otherwise, you will receive a &#x60;404 Not Found&#x60; response status.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return TeamRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCheckPermissionsForRepoInOrg(org: kotlin.String, teamSlug: kotlin.String, owner: kotlin.String, repo: kotlin.String): HttpResponse<TeamRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check team permissions for a repository (Legacy)
        * **Note**: Repositories inherited through a parent team will also be checked.  **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.  You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the &#x60;Accept&#x60; header:
         * @param teamId The unique identifier of the team. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return TeamRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCheckPermissionsForRepoLegacy(teamId: kotlin.Int, owner: kotlin.String, repo: kotlin.String): HttpResponse<TeamRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/repos/{owner}/{repo}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a team
        * To create a team, the authenticated user must be a member or owner of &#x60;{org}&#x60;. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \&quot;[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization).\&quot;  When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of &#x60;maintainers&#x60;. For more information, see \&quot;[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)\&quot;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamsCreateRequest  
         * @return TeamFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCreate(org: kotlin.String, teamsCreateRequest: TeamsCreateRequest): HttpResponse<TeamFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/teams".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a discussion comment
        * Creates a new comment on a team discussion.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param teamsCreateDiscussionCommentInOrgRequest  
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCreateDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, teamsCreateDiscussionCommentInOrgRequest: TeamsCreateDiscussionCommentInOrgRequest): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.  Creates a new comment on a team discussion.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param teamsCreateDiscussionCommentInOrgRequest  
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCreateDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, teamsCreateDiscussionCommentInOrgRequest: TeamsCreateDiscussionCommentInOrgRequest): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/teams/{team_id}/discussions/{discussion_number}/comments".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a discussion
        * Creates a new discussion post on a team&#39;s page.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;POST /organizations/{org_id}/team/{team_id}/discussions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param teamsCreateDiscussionInOrgRequest  
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCreateDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, teamsCreateDiscussionInOrgRequest: TeamsCreateDiscussionInOrgRequest): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/teams/{team_slug}/discussions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Create a discussion&#x60;](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.  Creates a new discussion post on a team&#39;s page.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param teamsCreateDiscussionInOrgRequest  
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsCreateDiscussionLegacy(teamId: kotlin.Int, teamsCreateDiscussionInOrgRequest: TeamsCreateDiscussionInOrgRequest): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/teams/{team_id}/discussions".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a discussion comment
        * Deletes a comment on a team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @return void
        */
        open suspend fun teamsDeleteDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.  Deletes a comment on a team discussion.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @return void
        */
        open suspend fun teamsDeleteDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a discussion
        * Delete a discussion from a team&#39;s page.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @return void
        */
        open suspend fun teamsDeleteDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;Delete a discussion&#x60;](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.  Delete a discussion from a team&#39;s page.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @return void
        */
        open suspend fun teamsDeleteDiscussionLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/discussions/{discussion_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a team
        * To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @return void
        */
        open suspend fun teamsDeleteInOrg(org: kotlin.String, teamSlug: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a team (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.  To delete a team, the authenticated user must be an organization owner or team maintainer.  If you are an organization owner, deleting a parent team will delete all of its child teams as well.
         * @param teamId The unique identifier of the team. 
         * @return void
        */
        open suspend fun teamsDeleteLegacy(teamId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a team by name
        * Gets a team using the team&#39;s &#x60;slug&#x60;. To create the &#x60;slug&#x60;, GitHub replaces special characters in the &#x60;name&#x60; string, changes all words to lowercase, and replaces spaces with a &#x60;-&#x60; separator. For example, &#x60;\&quot;My TEam Näme\&quot;&#x60; would become &#x60;my-team-name&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @return TeamFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetByName(org: kotlin.String, teamSlug: kotlin.String): HttpResponse<TeamFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a discussion comment
        * Get a specific comment on a team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.  Get a specific comment on a team discussion.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a discussion
        * Get a specific discussion on a team&#39;s page.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion) endpoint.  Get a specific discussion on a team&#39;s page.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetDiscussionLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions/{discussion_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a team (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name) endpoint.
         * @param teamId The unique identifier of the team. 
         * @return TeamFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetLegacy(teamId: kotlin.Int): HttpResponse<TeamFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get team member (Legacy)
        * The \&quot;Get team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.  To list members in a team, the team must be visible to the authenticated user.
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun teamsGetMemberLegacy(teamId: kotlin.Int, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/members/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get team membership for a user
        * Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param username The handle for the GitHub user account. 
         * @return TeamMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetMembershipForUserInOrg(org: kotlin.String, teamSlug: kotlin.String, username: kotlin.String): HttpResponse<TeamMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get team membership for a user (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.  Team members will include the members of child teams.  To get a user&#39;s membership with a team, the team must be visible to the authenticated user.  **Note:** The response contains the &#x60;state&#x60; of the membership and the member&#39;s &#x60;role&#x60;.  The &#x60;role&#x60; for organization owners is set to &#x60;maintainer&#x60;. For more information about &#x60;maintainer&#x60; roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @return TeamMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsGetMembershipForUserLegacy(teamId: kotlin.Int, username: kotlin.String): HttpResponse<TeamMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/memberships/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List teams
        * Lists all teams in an organization that are visible to the authenticated user.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsList(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List child teams
        * Lists the child teams of the team specified by &#x60;{team_slug}&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/teams&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListChildInOrg(org: kotlin.String, teamSlug: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/teams".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List child teams (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List child teams&#x60;](https://docs.github.com/rest/teams/teams#list-child-teams) endpoint.
         * @param teamId The unique identifier of the team. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListChildLegacy(teamId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/teams".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List discussion comments
        * List all comments on a team discussion.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamDiscussionComment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListDiscussionCommentsInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamDiscussionComment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List discussion comments (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.  List all comments on a team discussion.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamDiscussionComment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListDiscussionCommentsLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamDiscussionComment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions/{discussion_number}/comments".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List discussions
        * List all discussions on a team&#39;s page.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/discussions&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param pinned Pinned discussions only filter (optional, default to "push")
         * @return kotlin.collections.List<TeamDiscussion>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListDiscussionsInOrg(org: kotlin.String, teamSlug: kotlin.String, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, pinned: kotlin.String?): HttpResponse<kotlin.collections.List<TeamDiscussion>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            pinned?.apply { localVariableQuery["pinned"] = listOf("$pinned") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/discussions".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List discussions (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List discussions&#x60;](https://docs.github.com/rest/teams/discussions#list-discussions) endpoint.  List all discussions on a team&#39;s page.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamDiscussion>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListDiscussionsLegacy(teamId: kotlin.Int, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamDiscussion>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/discussions".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List teams for the authenticated user
        * List all of the teams across all of the organizations to which the authenticated user belongs.  OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60;, &#x60;repo&#x60;, or &#x60;read:org&#x60; scope to use this endpoint.  When using a fine-grained personal access token, the resource owner of the token must be a single organization, and the response will only include the teams from that organization.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamFull>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamFull>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/teams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team members
        * Team members will include the members of child teams.  To list members in a team, the team must be visible to the authenticated user.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param role Filters members returned by their role in the team. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListMembersInOrg(org: kotlin.String, teamSlug: kotlin.String, role: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            role?.apply { localVariableQuery["role"] = listOf("$role") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/members".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team members (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team members&#x60;](https://docs.github.com/rest/teams/members#list-team-members) endpoint.  Team members will include the members of child teams.
         * @param teamId The unique identifier of the team. 
         * @param role Filters members returned by their role in the team. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListMembersLegacy(teamId: kotlin.Int, role: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            role?.apply { localVariableQuery["role"] = listOf("$role") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/members".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List pending team invitations
        * The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/invitations&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrganizationInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListPendingInvitationsInOrg(org: kotlin.String, teamSlug: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/invitations".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List pending team invitations (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List pending team invitations&#x60;](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.  The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, &#x60;hiring_manager&#x60;, or &#x60;reinstate&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
         * @param teamId The unique identifier of the team. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrganizationInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListPendingInvitationsLegacy(teamId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/invitations".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team projects
        * Lists the organization projects for a team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/projects&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamProject>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListProjectsInOrg(org: kotlin.String, teamSlug: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamProject>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/projects".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team projects (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [&#x60;List team projects&#x60;](https://docs.github.com/rest/teams/teams#list-team-projects) endpoint.  Lists the organization projects for a team.
         * @param teamId The unique identifier of the team. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<TeamProject>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListProjectsLegacy(teamId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<TeamProject>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/projects".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team repositories
        * Lists a team&#39;s repositories visible to the authenticated user.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;GET /organizations/{org_id}/team/{team_id}/repos&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListReposInOrg(org: kotlin.String, teamSlug: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/teams/{team_slug}/repos".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List team repositories (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
         * @param teamId The unique identifier of the team. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsListReposLegacy(teamId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/teams/{team_id}/repos".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove team member (Legacy)
        * The \&quot;Remove team member\&quot; endpoint (described below) is deprecated.  We recommend using the [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a team member, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun teamsRemoveMemberLegacy(teamId: kotlin.Int, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/members/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove team membership for a user
        * To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun teamsRemoveMembershipForUserInOrg(org: kotlin.String, teamSlug: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove team membership for a user (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.  Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  To remove a membership between a user and a team, the authenticated user must have &#39;admin&#39; permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.  **Note:** When you have team synchronization set up for a team with your organization&#39;s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team&#39;s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \&quot;[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\&quot;
         * @param teamId The unique identifier of the team. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun teamsRemoveMembershipForUserLegacy(teamId: kotlin.Int, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/memberships/{username}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a project from a team
        * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. This endpoint removes the project from the team, but does not delete the project.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param projectId The unique identifier of the project. 
         * @return void
        */
        open suspend fun teamsRemoveProjectInOrg(org: kotlin.String, teamSlug: kotlin.String, projectId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/projects/{project_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a project from a team (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.  Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have &#x60;read&#x60; access to both the team and project, or &#x60;admin&#x60; access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
         * @param teamId The unique identifier of the team. 
         * @param projectId The unique identifier of the project. 
         * @return void
        */
        open suspend fun teamsRemoveProjectLegacy(teamId: kotlin.Int, projectId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/projects/{project_id}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "project_id" + "}", "$projectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a repository from a team
        * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun teamsRemoveRepoInOrg(org: kotlin.String, teamSlug: kotlin.String, owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a repository from a team (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.  If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
         * @param teamId The unique identifier of the team. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun teamsRemoveRepoLegacy(teamId: kotlin.Int, owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/teams/{team_id}/repos/{owner}/{repo}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a discussion comment
        * Edits the body text of a discussion comment.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param teamsCreateDiscussionCommentInOrgRequest  
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateDiscussionCommentInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, teamsCreateDiscussionCommentInOrgRequest: TeamsCreateDiscussionCommentInOrgRequest): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a discussion comment (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.  Edits the body text of a discussion comment.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param commentNumber The number that identifies the comment. 
         * @param teamsCreateDiscussionCommentInOrgRequest  
         * @return TeamDiscussionComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateDiscussionCommentLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, commentNumber: kotlin.Int, teamsCreateDiscussionCommentInOrgRequest: TeamsCreateDiscussionCommentInOrgRequest): HttpResponse<TeamDiscussionComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsCreateDiscussionCommentInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber").replace("{" + "comment_number" + "}", "$commentNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a discussion
        * Edits the title and body text of a discussion post. Only the parameters you provide are updated.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param teamsUpdateDiscussionInOrgRequest  (optional)
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateDiscussionInOrg(org: kotlin.String, teamSlug: kotlin.String, discussionNumber: kotlin.Int, teamsUpdateDiscussionInOrgRequest: TeamsUpdateDiscussionInOrgRequest?): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsUpdateDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a discussion (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.  Edits the title and body text of a discussion post. Only the parameters you provide are updated.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:discussion&#x60; scope to use this endpoint.
         * @param teamId The unique identifier of the team. 
         * @param discussionNumber The number that identifies the discussion. 
         * @param teamsUpdateDiscussionInOrgRequest  (optional)
         * @return TeamDiscussion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateDiscussionLegacy(teamId: kotlin.Int, discussionNumber: kotlin.Int, teamsUpdateDiscussionInOrgRequest: TeamsUpdateDiscussionInOrgRequest?): HttpResponse<TeamDiscussion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsUpdateDiscussionInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/teams/{team_id}/discussions/{discussion_number}".replace("{" + "team_id" + "}", "$teamId").replace("{" + "discussion_number" + "}", "$discussionNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a team
        * To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** You can also specify a team by &#x60;org_id&#x60; and &#x60;team_id&#x60; using the route &#x60;PATCH /organizations/{org_id}/team/{team_id}&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param teamsUpdateInOrgRequest  (optional)
         * @return TeamFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateInOrg(org: kotlin.String, teamSlug: kotlin.String, teamsUpdateInOrgRequest: TeamsUpdateInOrgRequest?): HttpResponse<TeamFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsUpdateInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a team (Legacy)
        * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.  To edit a team, the authenticated user must either be an organization owner or a team maintainer.  **Note:** With nested teams, the &#x60;privacy&#x60; for parent teams cannot be &#x60;secret&#x60;.
         * @param teamId The unique identifier of the team. 
         * @param teamsUpdateLegacyRequest  
         * @return TeamFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun teamsUpdateLegacy(teamId: kotlin.Int, teamsUpdateLegacyRequest: TeamsUpdateLegacyRequest): HttpResponse<TeamFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = teamsUpdateLegacyRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/teams/{team_id}".replace("{" + "team_id" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.Email
import org.openapitools.client.models.GpgKey
import org.openapitools.client.models.Hovercard
import org.openapitools.client.models.Key
import org.openapitools.client.models.KeySimple
import org.openapitools.client.models.PrivateUser
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.SocialAccount
import org.openapitools.client.models.SshSigningKey
import org.openapitools.client.models.UsersAddEmailForAuthenticatedUserRequest
import org.openapitools.client.models.UsersAddSocialAccountForAuthenticatedUserRequest
import org.openapitools.client.models.UsersCreateGpgKeyForAuthenticatedUserRequest
import org.openapitools.client.models.UsersCreatePublicSshKeyForAuthenticatedUserRequest
import org.openapitools.client.models.UsersCreateSshSigningKeyForAuthenticatedUserRequest
import org.openapitools.client.models.UsersDeleteEmailForAuthenticatedUserRequest
import org.openapitools.client.models.UsersDeleteSocialAccountForAuthenticatedUserRequest
import org.openapitools.client.models.UsersGetAuthenticated200Response
import org.openapitools.client.models.UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest
import org.openapitools.client.models.UsersUpdateAuthenticatedRequest
import org.openapitools.client.models.ValidationError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class UsersApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add an email address for the authenticated user
        * OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
         * @param usersAddEmailForAuthenticatedUserRequest  (optional)
         * @return kotlin.collections.List<Email>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersAddEmailForAuthenticatedUser(usersAddEmailForAuthenticatedUserRequest: UsersAddEmailForAuthenticatedUserRequest?): HttpResponse<kotlin.collections.List<Email>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersAddEmailForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/emails",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add social accounts for the authenticated user
        * Add one or more social accounts to the authenticated user&#39;s profile.  OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
         * @param usersAddSocialAccountForAuthenticatedUserRequest  
         * @return kotlin.collections.List<SocialAccount>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersAddSocialAccountForAuthenticatedUser(usersAddSocialAccountForAuthenticatedUserRequest: UsersAddSocialAccountForAuthenticatedUserRequest): HttpResponse<kotlin.collections.List<SocialAccount>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersAddSocialAccountForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Block a user
        * Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersBlock(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/blocks/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if a user is blocked by the authenticated user
        * Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by the authenticated user, or if the given user account has been identified as spam by GitHub.
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersCheckBlocked(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/blocks/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if a user follows another user
        * 
         * @param username The handle for the GitHub user account. 
         * @param targetUser  
         * @return void
        */
        open suspend fun usersCheckFollowingForUser(username: kotlin.String, targetUser: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/following/{target_user}".replace("{" + "username" + "}", "$username").replace("{" + "target_user" + "}", "$targetUser"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if a person is followed by the authenticated user
        * 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersCheckPersonIsFollowedByAuthenticated(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/following/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a GPG key for the authenticated user
        * Adds a GPG key to the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.
         * @param usersCreateGpgKeyForAuthenticatedUserRequest  
         * @return GpgKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersCreateGpgKeyForAuthenticatedUser(usersCreateGpgKeyForAuthenticatedUserRequest: UsersCreateGpgKeyForAuthenticatedUserRequest): HttpResponse<GpgKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersCreateGpgKeyForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/gpg_keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a public SSH key for the authenticated user
        * Adds a public SSH key to the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:gpg_key&#x60; scope to use this endpoint.
         * @param usersCreatePublicSshKeyForAuthenticatedUserRequest  
         * @return Key
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersCreatePublicSshKeyForAuthenticatedUser(usersCreatePublicSshKeyForAuthenticatedUserRequest: UsersCreatePublicSshKeyForAuthenticatedUserRequest): HttpResponse<Key> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersCreatePublicSshKeyForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a SSH signing key for the authenticated user
        * Creates an SSH signing key for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:ssh_signing_key&#x60; scope to use this endpoint.
         * @param usersCreateSshSigningKeyForAuthenticatedUserRequest  
         * @return SshSigningKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersCreateSshSigningKeyForAuthenticatedUser(usersCreateSshSigningKeyForAuthenticatedUserRequest: UsersCreateSshSigningKeyForAuthenticatedUserRequest): HttpResponse<SshSigningKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersCreateSshSigningKeyForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/ssh_signing_keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an email address for the authenticated user
        * OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
         * @param usersDeleteEmailForAuthenticatedUserRequest  (optional)
         * @return void
        */
        open suspend fun usersDeleteEmailForAuthenticatedUser(usersDeleteEmailForAuthenticatedUserRequest: UsersDeleteEmailForAuthenticatedUserRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersDeleteEmailForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/emails",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a GPG key for the authenticated user
        * Removes a GPG key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:gpg_key&#x60; scope to use this endpoint.
         * @param gpgKeyId The unique identifier of the GPG key. 
         * @return void
        */
        open suspend fun usersDeleteGpgKeyForAuthenticatedUser(gpgKeyId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/gpg_keys/{gpg_key_id}".replace("{" + "gpg_key_id" + "}", "$gpgKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a public SSH key for the authenticated user
        * Removes a public SSH key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:public_key&#x60; scope to use this endpoint.
         * @param keyId The unique identifier of the key. 
         * @return void
        */
        open suspend fun usersDeletePublicSshKeyForAuthenticatedUser(keyId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/keys/{key_id}".replace("{" + "key_id" + "}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete social accounts for the authenticated user
        * Deletes one or more social accounts from the authenticated user&#39;s profile.  OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope to use this endpoint.
         * @param usersDeleteSocialAccountForAuthenticatedUserRequest  
         * @return void
        */
        open suspend fun usersDeleteSocialAccountForAuthenticatedUser(usersDeleteSocialAccountForAuthenticatedUserRequest: UsersDeleteSocialAccountForAuthenticatedUserRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersDeleteSocialAccountForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an SSH signing key for the authenticated user
        * Deletes an SSH signing key from the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:ssh_signing_key&#x60; scope to use this endpoint.
         * @param sshSigningKeyId The unique identifier of the SSH signing key. 
         * @return void
        */
        open suspend fun usersDeleteSshSigningKeyForAuthenticatedUser(sshSigningKeyId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/ssh_signing_keys/{ssh_signing_key_id}".replace("{" + "ssh_signing_key_id" + "}", "$sshSigningKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Follow a user
        * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersFollow(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/user/following/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the authenticated user
        * OAuth app tokens and personal access tokens (classic) need the &#x60;user&#x60; scope in order for the response to include private profile information.
         * @return UsersGetAuthenticated200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetAuthenticated(): HttpResponse<UsersGetAuthenticated200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a user
        * Provides publicly available information about someone with a GitHub account.  The &#x60;email&#x60; key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for &#x60;email&#x60;, then it will have a value of &#x60;null&#x60;. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).  The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \&quot;[Emails API](https://docs.github.com/rest/users/emails)\&quot;.
         * @param username The handle for the GitHub user account. 
         * @return UsersGetAuthenticated200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetByUsername(username: kotlin.String): HttpResponse<UsersGetAuthenticated200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get contextual information for a user
        * Provides hovercard information. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.    The &#x60;subject_type&#x60; and &#x60;subject_id&#x60; parameters provide context for the person&#39;s hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about &#x60;octocat&#x60; who owns the &#x60;Spoon-Knife&#x60; repository, you would use a &#x60;subject_type&#x60; value of &#x60;repository&#x60; and a &#x60;subject_id&#x60; value of &#x60;1300192&#x60; (the ID of the &#x60;Spoon-Knife&#x60; repository).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param username The handle for the GitHub user account. 
         * @param subjectType Identifies which additional information you&#39;d like to receive about the person&#39;s hovercard. Can be &#x60;organization&#x60;, &#x60;repository&#x60;, &#x60;issue&#x60;, &#x60;pull_request&#x60;. **Required** when using &#x60;subject_id&#x60;. (optional)
         * @param subjectId Uses the ID for the &#x60;subject_type&#x60; you specified. **Required** when using &#x60;subject_type&#x60;. (optional, default to "push")
         * @return Hovercard
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetContextForUser(username: kotlin.String, subjectType: kotlin.String?, subjectId: kotlin.String?): HttpResponse<Hovercard> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectType?.apply { localVariableQuery["subject_type"] = listOf("$subjectType") }
            subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/hovercard".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a GPG key for the authenticated user
        * View extended details for a single GPG key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.
         * @param gpgKeyId The unique identifier of the GPG key. 
         * @return GpgKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetGpgKeyForAuthenticatedUser(gpgKeyId: kotlin.Int): HttpResponse<GpgKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/gpg_keys/{gpg_key_id}".replace("{" + "gpg_key_id" + "}", "$gpgKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a public SSH key for the authenticated user
        * View extended details for a single public SSH key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.
         * @param keyId The unique identifier of the key. 
         * @return Key
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetPublicSshKeyForAuthenticatedUser(keyId: kotlin.Int): HttpResponse<Key> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/keys/{key_id}".replace("{" + "key_id" + "}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an SSH signing key for the authenticated user
        * Gets extended details for an SSH signing key.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.
         * @param sshSigningKeyId The unique identifier of the SSH signing key. 
         * @return SshSigningKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersGetSshSigningKeyForAuthenticatedUser(sshSigningKeyId: kotlin.Int): HttpResponse<SshSigningKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/ssh_signing_keys/{ssh_signing_key_id}".replace("{" + "ssh_signing_key_id" + "}", "$sshSigningKeyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List users
        * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.  Note: Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of users.
         * @param since A user ID. Only return users with an ID greater than this ID. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersList(since: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List users blocked by the authenticated user
        * List the users you&#39;ve blocked on your personal account.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListBlockedByAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/blocks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List email addresses for the authenticated user
        * Lists all of your email addresses, and specifies which one is visible to the public.  OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Email>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListEmailsForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Email>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/emails",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List the people the authenticated user follows
        * Lists the people who the authenticated user follows.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListFollowedByAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/following",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List followers of the authenticated user
        * Lists the people following the authenticated user.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListFollowersForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/followers",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List followers of a user
        * Lists the people following the specified user.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListFollowersForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/followers".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List the people a user follows
        * Lists the people who the specified user follows.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListFollowingForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/following".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List GPG keys for the authenticated user
        * Lists the current user&#39;s GPG keys.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:gpg_key&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<GpgKey>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListGpgKeysForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<GpgKey>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/gpg_keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List GPG keys for a user
        * Lists the GPG keys for a user. This information is accessible by anyone.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<GpgKey>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListGpgKeysForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<GpgKey>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/gpg_keys".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public email addresses for the authenticated user
        * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user) endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;user:email&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Email>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListPublicEmailsForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Email>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/public_emails",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public keys for a user
        * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<KeySimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListPublicKeysForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<KeySimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/keys".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public SSH keys for the authenticated user
        * Lists the public SSH keys for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:public_key&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Key>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListPublicSshKeysForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Key>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List social accounts for the authenticated user
        * Lists all of your social accounts.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SocialAccount>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListSocialAccountsForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SocialAccount>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/social_accounts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List social accounts for a user
        * Lists social media accounts for a user. This endpoint is accessible by anyone.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SocialAccount>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListSocialAccountsForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SocialAccount>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/social_accounts".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List SSH signing keys for the authenticated user
        * Lists the SSH signing keys for the authenticated user&#39;s GitHub account.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:ssh_signing_key&#x60; scope to use this endpoint.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SshSigningKey>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListSshSigningKeysForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SshSigningKey>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/ssh_signing_keys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List SSH signing keys for a user
        * Lists the SSH signing keys for a user. This operation is accessible by anyone.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SshSigningKey>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersListSshSigningKeysForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SshSigningKey>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/ssh_signing_keys".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set primary email visibility for the authenticated user
        * Sets the visibility for your primary email addresses.
         * @param usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest  
         * @return kotlin.collections.List<Email>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersSetPrimaryEmailVisibilityForAuthenticatedUser(usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest: UsersSetPrimaryEmailVisibilityForAuthenticatedUserRequest): HttpResponse<kotlin.collections.List<Email>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersSetPrimaryEmailVisibilityForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/user/email/visibility",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Unblock a user
        * Unblocks the given user and returns a 204.
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersUnblock(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/blocks/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Unfollow a user
        * OAuth app tokens and personal access tokens (classic) need the &#x60;user:follow&#x60; scope to use this endpoint.
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun usersUnfollow(username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/following/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update the authenticated user
        * **Note:** If your email is set to private and you send an &#x60;email&#x60; parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
         * @param usersUpdateAuthenticatedRequest  (optional)
         * @return PrivateUser
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun usersUpdateAuthenticated(usersUpdateAuthenticatedRequest: UsersUpdateAuthenticatedRequest?): HttpResponse<PrivateUser> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = usersUpdateAuthenticatedRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

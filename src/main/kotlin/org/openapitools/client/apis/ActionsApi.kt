/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest
import org.openapitools.client.models.ActionsCacheList
import org.openapitools.client.models.ActionsCacheUsageByRepository
import org.openapitools.client.models.ActionsCacheUsageOrgEnterprise
import org.openapitools.client.models.ActionsCreateOrUpdateEnvironmentSecretRequest
import org.openapitools.client.models.ActionsCreateOrUpdateOrgSecretRequest
import org.openapitools.client.models.ActionsCreateOrUpdateRepoSecretRequest
import org.openapitools.client.models.ActionsCreateOrgVariableRequest
import org.openapitools.client.models.ActionsCreateRepoVariableRequest
import org.openapitools.client.models.ActionsCreateWorkflowDispatchRequest
import org.openapitools.client.models.ActionsGenerateRunnerJitconfigForOrgRequest
import org.openapitools.client.models.ActionsGetActionsCacheUsageByRepoForOrg200Response
import org.openapitools.client.models.ActionsGetDefaultWorkflowPermissions
import org.openapitools.client.models.ActionsListArtifactsForRepo200Response
import org.openapitools.client.models.ActionsListJobsForWorkflowRunAttempt200Response
import org.openapitools.client.models.ActionsListOrgSecrets200Response
import org.openapitools.client.models.ActionsListOrgVariables200Response
import org.openapitools.client.models.ActionsListRepoOrganizationSecrets200Response
import org.openapitools.client.models.ActionsListRepoOrganizationVariables200Response
import org.openapitools.client.models.ActionsListRepoWorkflows200Response
import org.openapitools.client.models.ActionsListSelectedReposForOrgSecret200Response
import org.openapitools.client.models.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response
import org.openapitools.client.models.ActionsListSelfHostedRunnersForOrg200Response
import org.openapitools.client.models.ActionsListWorkflowRunsForRepo200Response
import org.openapitools.client.models.ActionsOIDCSubjectCustomizationForARepository
import org.openapitools.client.models.ActionsOrganizationPermissions
import org.openapitools.client.models.ActionsPublicKey
import org.openapitools.client.models.ActionsReRunJobForWorkflowRunRequest
import org.openapitools.client.models.ActionsRepositoryPermissions
import org.openapitools.client.models.ActionsReviewCustomGatesForRunRequest
import org.openapitools.client.models.ActionsReviewPendingDeploymentsForRunRequest
import org.openapitools.client.models.ActionsSecret
import org.openapitools.client.models.ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest
import org.openapitools.client.models.ActionsSetDefaultWorkflowPermissions
import org.openapitools.client.models.ActionsSetGithubActionsPermissionsOrganizationRequest
import org.openapitools.client.models.ActionsSetGithubActionsPermissionsRepositoryRequest
import org.openapitools.client.models.ActionsSetSelectedReposForOrgSecretRequest
import org.openapitools.client.models.ActionsSetSelectedReposForOrgVariableRequest
import org.openapitools.client.models.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest
import org.openapitools.client.models.ActionsUpdateOrgVariableRequest
import org.openapitools.client.models.ActionsUpdateRepoVariableRequest
import org.openapitools.client.models.ActionsVariable
import org.openapitools.client.models.ActionsWorkflowAccessToRepository
import org.openapitools.client.models.Artifact
import org.openapitools.client.models.AuthenticationToken
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.Deployment
import org.openapitools.client.models.EnvironmentApprovals
import org.openapitools.client.models.Job
import org.openapitools.client.models.OidcCustomSubRepo
import org.openapitools.client.models.OrganizationActionsSecret
import org.openapitools.client.models.OrganizationActionsVariable
import org.openapitools.client.models.PendingDeployment
import org.openapitools.client.models.Runner
import org.openapitools.client.models.RunnerApplication
import org.openapitools.client.models.SelectedActions
import org.openapitools.client.models.ValidationErrorSimple
import org.openapitools.client.models.Workflow
import org.openapitools.client.models.WorkflowRun
import org.openapitools.client.models.WorkflowRunUsage
import org.openapitools.client.models.WorkflowUsage

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class ActionsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add custom labels to a self-hosted runner for an organization
        * Adds custom labels to a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsAddCustomLabelsToSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest: ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add custom labels to a self-hosted runner for a repository
        * Adds custom labels to a self-hosted runner configured in a repository.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsAddCustomLabelsToSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest: ActionsAddCustomLabelsToSelfHostedRunnerForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsAddCustomLabelsToSelfHostedRunnerForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add selected repository to an organization secret
        * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. For more information about setting the visibility, see [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun actionsAddSelectedRepoToOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add selected repository to an organization variable
        * Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun actionsAddSelectedRepoToOrgVariable(org: kotlin.String, name: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Approve a workflow run for a fork pull request
        * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see [\&quot;Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsApproveWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/approve".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Cancel a workflow run
        * Cancels a workflow run using its &#x60;id&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCancelWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an environment variable
        * Create an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param actionsCreateRepoVariableRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateEnvironmentVariable(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, actionsCreateRepoVariableRequest: ActionsCreateRepoVariableRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateRepoVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/environments/{environment_name}/variables".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update an environment secret
        * Creates or updates an environment secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param secretName The name of the secret. 
         * @param actionsCreateOrUpdateEnvironmentSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateOrUpdateEnvironmentSecret(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, secretName: kotlin.String, actionsCreateOrUpdateEnvironmentSecretRequest: ActionsCreateOrUpdateEnvironmentSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateOrUpdateEnvironmentSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update an organization secret
        * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param actionsCreateOrUpdateOrgSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateOrUpdateOrgSecret(org: kotlin.String, secretName: kotlin.String, actionsCreateOrUpdateOrgSecretRequest: ActionsCreateOrUpdateOrgSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateOrUpdateOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update a repository secret
        * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param actionsCreateOrUpdateRepoSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateOrUpdateRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, actionsCreateOrUpdateRepoSecretRequest: ActionsCreateOrUpdateRepoSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateOrUpdateRepoSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization variable
        * Creates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param actionsCreateOrgVariableRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateOrgVariable(org: kotlin.String, actionsCreateOrgVariableRequest: ActionsCreateOrgVariableRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateOrgVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/actions/variables".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a registration token for an organization
        * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return AuthenticationToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateRegistrationTokenForOrg(org: kotlin.String): HttpResponse<AuthenticationToken> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/actions/runners/registration-token".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a registration token for a repository
        * Returns a token that you can pass to the &#x60;config&#x60; script. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to configure your self-hosted runner:  &#x60;&#x60;&#x60; ./config.sh --url https://github.com/octo-org --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return AuthenticationToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateRegistrationTokenForRepo(owner: kotlin.String, repo: kotlin.String): HttpResponse<AuthenticationToken> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runners/registration-token".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a remove token for an organization
        * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an organization. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return AuthenticationToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateRemoveTokenForOrg(org: kotlin.String): HttpResponse<AuthenticationToken> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/actions/runners/remove-token".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a remove token for a repository
        * Returns a token that you can pass to the &#x60;config&#x60; script to remove a self-hosted runner from an repository. The token expires after one hour.  For example, you can replace &#x60;TOKEN&#x60; in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:  &#x60;&#x60;&#x60; ./config.sh remove --token TOKEN &#x60;&#x60;&#x60;  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return AuthenticationToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateRemoveTokenForRepo(owner: kotlin.String, repo: kotlin.String): HttpResponse<AuthenticationToken> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runners/remove-token".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository variable
        * Creates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsCreateRepoVariableRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsCreateRepoVariable(owner: kotlin.String, repo: kotlin.String, actionsCreateRepoVariableRequest: ActionsCreateRepoVariableRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateRepoVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/variables".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a workflow dispatch event
        * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  You must configure your GitHub Actions workflow to run when the [&#x60;workflow_dispatch&#x60; webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The &#x60;inputs&#x60; are configured in the workflow file. For more information about how to configure the &#x60;workflow_dispatch&#x60; event in the workflow file, see \&quot;[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @param actionsCreateWorkflowDispatchRequest  
         * @return void
        */
        open suspend fun actionsCreateWorkflowDispatch(owner: kotlin.String, repo: kotlin.String, workflowId: String, actionsCreateWorkflowDispatchRequest: ActionsCreateWorkflowDispatchRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsCreateWorkflowDispatchRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a GitHub Actions cache for a repository (using a cache ID)
        * Deletes a GitHub Actions cache for a repository, using a cache ID.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param cacheId The unique identifier of the GitHub Actions cache. 
         * @return void
        */
        open suspend fun actionsDeleteActionsCacheById(owner: kotlin.String, repo: kotlin.String, cacheId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/caches/{cache_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "cache_id" + "}", "$cacheId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete GitHub Actions caches for a repository (using a cache key)
        * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param key A key for identifying the cache. 
         * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
         * @return ActionsCacheList
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsDeleteActionsCacheByKey(owner: kotlin.String, repo: kotlin.String, key: kotlin.String, ref: kotlin.String?): HttpResponse<ActionsCacheList> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            key?.apply { localVariableQuery["key"] = listOf("$key") }
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/caches".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an artifact
        * Deletes an artifact for a workflow run. OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param artifactId The unique identifier of the artifact. 
         * @return void
        */
        open suspend fun actionsDeleteArtifact(owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "artifact_id" + "}", "$artifactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an environment secret
        * Deletes a secret in an environment using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun actionsDeleteEnvironmentSecret(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an environment variable
        * Deletes an environment variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @return void
        */
        open suspend fun actionsDeleteEnvironmentVariable(owner: kotlin.String, repo: kotlin.String, name: kotlin.String, environmentName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "name" + "}", "$name").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization secret
        * Deletes a secret in an organization using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun actionsDeleteOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization variable
        * Deletes an organization variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @return void
        */
        open suspend fun actionsDeleteOrgVariable(org: kotlin.String, name: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/variables/{name}".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository secret
        * Deletes a secret in a repository using the secret name.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun actionsDeleteRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository variable
        * Deletes a repository variable using the variable name.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @return void
        */
        open suspend fun actionsDeleteRepoVariable(owner: kotlin.String, repo: kotlin.String, name: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a self-hosted runner from an organization
        * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return void
        */
        open suspend fun actionsDeleteSelfHostedRunnerFromOrg(org: kotlin.String, runnerId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/runners/{runner_id}".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a self-hosted runner from a repository
        * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return void
        */
        open suspend fun actionsDeleteSelfHostedRunnerFromRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a workflow run
        * Deletes a specific workflow run.  Anyone with write access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return void
        */
        open suspend fun actionsDeleteWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/runs/{run_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete workflow run logs
        * Deletes all logs for a workflow run.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return void
        */
        open suspend fun actionsDeleteWorkflowRunLogs(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/logs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable a selected repository for GitHub Actions in an organization
        * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param repositoryId The unique identifier of the repository. 
         * @return void
        */
        open suspend fun actionsDisableSelectedRepositoryGithubActionsOrganization(org: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/permissions/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable a workflow
        * Disables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;disabled_manually&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @return void
        */
        open suspend fun actionsDisableWorkflow(owner: kotlin.String, repo: kotlin.String, workflowId: String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download an artifact
        * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download. The &#x60;:archive_format&#x60; must be &#x60;zip&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param artifactId The unique identifier of the artifact. 
         * @param archiveFormat  
         * @return void
        */
        open suspend fun actionsDownloadArtifact(owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int, archiveFormat: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "artifact_id" + "}", "$artifactId").replace("{" + "archive_format" + "}", "$archiveFormat"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download job logs for a workflow run
        * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param jobId The unique identifier of the job. 
         * @return void
        */
        open suspend fun actionsDownloadJobLogsForWorkflowRun(owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "job_id" + "}", "$jobId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download workflow run attempt logs
        * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param attemptNumber The attempt number of the workflow run. 
         * @return void
        */
        open suspend fun actionsDownloadWorkflowRunAttemptLogs(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId").replace("{" + "attempt_number" + "}", "$attemptNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download workflow run logs
        * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for &#x60;Location:&#x60; in the response header to find the URL for the download.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return void
        */
        open suspend fun actionsDownloadWorkflowRunLogs(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/logs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable a selected repository for GitHub Actions in an organization
        * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param repositoryId The unique identifier of the repository. 
         * @return void
        */
        open suspend fun actionsEnableSelectedRepositoryGithubActionsOrganization(org: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/permissions/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable a workflow
        * Enables a workflow and sets the &#x60;state&#x60; of the workflow to &#x60;active&#x60;. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @return void
        */
        open suspend fun actionsEnableWorkflow(owner: kotlin.String, repo: kotlin.String, workflowId: String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Force cancel a workflow run
        * Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an &#x60;always()&#x60; condition on a job. You should only use this endpoint to cancel a workflow run when the workflow run is not responding to [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel&#x60;](/rest/actions/workflow-runs#cancel-a-workflow-run).  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsForceCancelWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create configuration for a just-in-time runner for an organization
        * Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the organization.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param actionsGenerateRunnerJitconfigForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGenerateRunnerJitconfigForOrg(org: kotlin.String, actionsGenerateRunnerJitconfigForOrgRequest: ActionsGenerateRunnerJitconfigForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsGenerateRunnerJitconfigForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/actions/runners/generate-jitconfig".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create configuration for a just-in-time runner for a repository
        * Generates a configuration that can be passed to the runner application at startup.  The authenticated user must have admin access to the repository.  OAuth tokens and personal access tokens (classic) need the&#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsGenerateRunnerJitconfigForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGenerateRunnerJitconfigForRepo(owner: kotlin.String, repo: kotlin.String, actionsGenerateRunnerJitconfigForOrgRequest: ActionsGenerateRunnerJitconfigForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsGenerateRunnerJitconfigForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runners/generate-jitconfig".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List GitHub Actions caches for a repository
        * Lists the GitHub Actions caches for a repository.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param ref The full Git reference for narrowing down the cache. The &#x60;ref&#x60; for a branch should be formatted as &#x60;refs/heads/&lt;branch name&gt;&#x60;. To reference a pull request use &#x60;refs/pull/&lt;number&gt;/merge&#x60;. (optional)
         * @param key An explicit key or prefix for identifying the cache (optional)
         * @param sort The property to sort the results by. &#x60;created_at&#x60; means when the cache was created. &#x60;last_accessed_at&#x60; means when the cache was last accessed. &#x60;size_in_bytes&#x60; is the size of the cache in bytes. (optional, default to last_accessed_at)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @return ActionsCacheList
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetActionsCacheList(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, ref: kotlin.String?, key: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?): HttpResponse<ActionsCacheList> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            key?.apply { localVariableQuery["key"] = listOf("$key") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/caches".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get GitHub Actions cache usage for a repository
        * Gets GitHub Actions cache usage for a repository. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ActionsCacheUsageByRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetActionsCacheUsage(owner: kotlin.String, repo: kotlin.String): HttpResponse<ActionsCacheUsageByRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/cache/usage".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repositories with GitHub Actions cache usage for an organization
        * Lists repositories and their GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsGetActionsCacheUsageByRepoForOrg200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetActionsCacheUsageByRepoForOrg(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsGetActionsCacheUsageByRepoForOrg200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/cache/usage-by-repository".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get GitHub Actions cache usage for an organization
        * Gets the total GitHub Actions cache usage for an organization. The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.  OAuth tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return ActionsCacheUsageOrgEnterprise
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetActionsCacheUsageForOrg(org: kotlin.String): HttpResponse<ActionsCacheUsageOrgEnterprise> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/cache/usage".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get allowed actions and reusable workflows for an organization
        * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return SelectedActions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetAllowedActionsOrganization(org: kotlin.String): HttpResponse<SelectedActions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/permissions/selected-actions".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get allowed actions and reusable workflows for a repository
        * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return SelectedActions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetAllowedActionsRepository(owner: kotlin.String, repo: kotlin.String): HttpResponse<SelectedActions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/permissions/selected-actions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an artifact
        * Gets a specific artifact for a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param artifactId The unique identifier of the artifact. 
         * @return Artifact
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetArtifact(owner: kotlin.String, repo: kotlin.String, artifactId: kotlin.Int): HttpResponse<Artifact> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "artifact_id" + "}", "$artifactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the customization template for an OIDC subject claim for a repository
        * Gets the customization template for an OpenID Connect (OIDC) subject claim.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return OidcCustomSubRepo
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetCustomOidcSubClaimForRepo(owner: kotlin.String, repo: kotlin.String): HttpResponse<OidcCustomSubRepo> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/oidc/customization/sub".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an environment public key
        * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @return ActionsPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetEnvironmentPublicKey(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String): HttpResponse<ActionsPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an environment secret
        * Gets a single environment secret without revealing its encrypted value.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param secretName The name of the secret. 
         * @return ActionsSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetEnvironmentSecret(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, secretName: kotlin.String): HttpResponse<ActionsSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an environment variable
        * Gets a specific variable in an environment.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param name The name of the variable. 
         * @return ActionsVariable
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetEnvironmentVariable(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, name: kotlin.String): HttpResponse<ActionsVariable> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get default workflow permissions for an organization
        * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, as well as whether GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return ActionsGetDefaultWorkflowPermissions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(org: kotlin.String): HttpResponse<ActionsGetDefaultWorkflowPermissions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/permissions/workflow".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get default workflow permissions for a repository
        * Gets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, as well as if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ActionsGetDefaultWorkflowPermissions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetGithubActionsDefaultWorkflowPermissionsRepository(owner: kotlin.String, repo: kotlin.String): HttpResponse<ActionsGetDefaultWorkflowPermissions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/permissions/workflow".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get GitHub Actions permissions for an organization
        * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return ActionsOrganizationPermissions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetGithubActionsPermissionsOrganization(org: kotlin.String): HttpResponse<ActionsOrganizationPermissions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/permissions".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get GitHub Actions permissions for a repository
        * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.  OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ActionsRepositoryPermissions
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetGithubActionsPermissionsRepository(owner: kotlin.String, repo: kotlin.String): HttpResponse<ActionsRepositoryPermissions> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/permissions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a job for a workflow run
        * Gets a specific job in a workflow run.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param jobId The unique identifier of the job. 
         * @return Job
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetJobForWorkflowRun(owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int): HttpResponse<Job> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/jobs/{job_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "job_id" + "}", "$jobId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization public key
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  The authenticated user must have collaborator access to a repository to create, update, or read secrets.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return ActionsPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetOrgPublicKey(org: kotlin.String): HttpResponse<ActionsPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/secrets/public-key".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization secret
        * Gets a single organization secret without revealing its encrypted value.  The authenticated user must have collaborator access to a repository to create, update, or read secrets  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return OrganizationActionsSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<OrganizationActionsSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization variable
        * Gets a specific variable in an organization.  The authenticated user must have collaborator access to a repository to create, update, or read variables.  OAuth tokens and personal access tokens (classic) need the&#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @return OrganizationActionsVariable
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetOrgVariable(org: kotlin.String, name: kotlin.String): HttpResponse<OrganizationActionsVariable> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/variables/{name}".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get pending deployments for a workflow run
        * Get all deployment environments for a workflow run that are waiting for protection rules to pass.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return kotlin.collections.List<PendingDeployment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetPendingDeploymentsForRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<kotlin.collections.List<PendingDeployment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository public key
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  Anyone with read access to the repository can use this endpoint.  If the repository is private, OAuth tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ActionsPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetRepoPublicKey(owner: kotlin.String, repo: kotlin.String): HttpResponse<ActionsPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/secrets/public-key".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository secret
        * Gets a single repository secret without revealing its encrypted value.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return ActionsSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<ActionsSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository variable
        * Gets a specific variable in a repository.  The authenticated user must have collaborator access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @return ActionsVariable
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetRepoVariable(owner: kotlin.String, repo: kotlin.String, name: kotlin.String): HttpResponse<ActionsVariable> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the review history for a workflow run
        * Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return kotlin.collections.List<EnvironmentApprovals>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetReviewsForRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<kotlin.collections.List<EnvironmentApprovals>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a self-hosted runner for an organization
        * Gets a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return Runner
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int): HttpResponse<Runner> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/runners/{runner_id}".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a self-hosted runner for a repository
        * Gets a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return Runner
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): HttpResponse<Runner> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a workflow
        * Gets a specific workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @return Workflow
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflow(owner: kotlin.String, repo: kotlin.String, workflowId: String): HttpResponse<Workflow> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the level of access for workflows outside of the repository
        * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ActionsWorkflowAccessToRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflowAccessToRepository(owner: kotlin.String, repo: kotlin.String): HttpResponse<ActionsWorkflowAccessToRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/permissions/access".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a workflow run
        * Gets a specific workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
         * @return WorkflowRun
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, excludePullRequests: kotlin.Boolean?): HttpResponse<WorkflowRun> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            excludePullRequests?.apply { localVariableQuery["exclude_pull_requests"] = listOf("$excludePullRequests") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a workflow run attempt
        * Gets a specific workflow run attempt.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param attemptNumber The attempt number of the workflow run. 
         * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
         * @return WorkflowRun
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflowRunAttempt(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, excludePullRequests: kotlin.Boolean?): HttpResponse<WorkflowRun> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            excludePullRequests?.apply { localVariableQuery["exclude_pull_requests"] = listOf("$excludePullRequests") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId").replace("{" + "attempt_number" + "}", "$attemptNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get workflow run usage
        * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @return WorkflowRunUsage
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflowRunUsage(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int): HttpResponse<WorkflowRunUsage> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/timing".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get workflow usage
        * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see \&quot;[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)\&quot;.  You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @return WorkflowUsage
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsGetWorkflowUsage(owner: kotlin.String, repo: kotlin.String, workflowId: String): HttpResponse<WorkflowUsage> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List artifacts for a repository
        * Lists all artifacts for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param name The name field of an artifact. When specified, only artifacts with this name will be returned. (optional)
         * @return ActionsListArtifactsForRepo200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListArtifactsForRepo(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, name: kotlin.String?): HttpResponse<ActionsListArtifactsForRepo200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            name?.apply { localVariableQuery["name"] = listOf("$name") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/artifacts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List environment secrets
        * Lists all secrets available in an environment without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListEnvironmentSecrets(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/secrets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List environment variables
        * Lists all environment variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param perPage The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 10)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationVariables200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListEnvironmentVariables(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationVariables200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/variables".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List jobs for a workflow run
        * Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param filter Filters jobs by their &#x60;completed_at&#x60; timestamp. &#x60;latest&#x60; returns jobs from the most recent execution of the workflow run. &#x60;all&#x60; returns all jobs for a workflow run, including from old executions of the workflow run. (optional, default to latest)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListJobsForWorkflowRunAttempt200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListJobsForWorkflowRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListJobsForWorkflowRunAttempt200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            filter?.apply { localVariableQuery["filter"] = listOf("$filter") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List jobs for a workflow run attempt
        * Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint  with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param attemptNumber The attempt number of the workflow run. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListJobsForWorkflowRunAttempt200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListJobsForWorkflowRunAttempt(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, attemptNumber: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListJobsForWorkflowRunAttempt200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId").replace("{" + "attempt_number" + "}", "$attemptNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List labels for a self-hosted runner for an organization
        * Lists all labels for a self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListLabelsForSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List labels for a self-hosted runner for a repository
        * Lists all labels for a self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListLabelsForSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization secrets
        * Lists all secrets available in an organization without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListOrgSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListOrgSecrets(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListOrgSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/secrets".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization variables
        * Lists all organization variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 10)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListOrgVariables200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListOrgVariables(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListOrgVariables200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/variables".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository organization secrets
        * Lists all organization secrets shared with a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRepoOrganizationSecrets(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/organization-secrets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository organization variables
        * Lists all organization variables shared with a repository.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 10)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationVariables200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRepoOrganizationVariables(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationVariables200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/organization-variables".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository secrets
        * Lists all secrets available in a repository without revealing their encrypted values.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRepoSecrets(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/secrets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository variables
        * Lists all repository variables.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 30). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 10)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoOrganizationVariables200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRepoVariables(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoOrganizationVariables200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/variables".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository workflows
        * Lists the workflows in a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListRepoWorkflows200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRepoWorkflows(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListRepoWorkflows200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/workflows".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List runner applications for an organization
        * Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.  If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.collections.List<RunnerApplication>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRunnerApplicationsForOrg(org: kotlin.String): HttpResponse<kotlin.collections.List<RunnerApplication>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/runners/downloads".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List runner applications for a repository
        * Lists binaries for the runner application that you can download and run.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<RunnerApplication>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListRunnerApplicationsForRepo(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<RunnerApplication>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runners/downloads".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories for an organization secret
        * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return ActionsListSelectedReposForOrgSecret200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<ActionsListSelectedReposForOrgSecret200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories for an organization variable
        * Lists all repositories that can access an organization variable that is available to selected repositories.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return ActionsListSelectedReposForOrgSecret200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListSelectedReposForOrgVariable(org: kotlin.String, name: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<ActionsListSelectedReposForOrgSecret200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/variables/{name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories enabled for GitHub Actions in an organization
        * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListSelectedRepositoriesEnabledGithubActionsOrganization(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListSelectedRepositoriesEnabledGithubActionsOrganization200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/permissions/repositories".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List self-hosted runners for an organization
        * Lists all self-hosted runners configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of a self-hosted runner. (optional, default to "push")
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListSelfHostedRunnersForOrg200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListSelfHostedRunnersForOrg(org: kotlin.String, name: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListSelfHostedRunnersForOrg200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            name?.apply { localVariableQuery["name"] = listOf("$name") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/actions/runners".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List self-hosted runners for a repository
        * Lists all self-hosted runners configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of a self-hosted runner. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ActionsListSelfHostedRunnersForOrg200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListSelfHostedRunnersForRepo(owner: kotlin.String, repo: kotlin.String, name: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ActionsListSelfHostedRunnersForOrg200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            name?.apply { localVariableQuery["name"] = listOf("$name") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runners".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List workflow run artifacts
        * Lists artifacts for a workflow run.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param name The name field of an artifact. When specified, only artifacts with this name will be returned. (optional)
         * @return ActionsListArtifactsForRepo200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListWorkflowRunArtifacts(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?, name: kotlin.String?): HttpResponse<ActionsListArtifactsForRepo200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            name?.apply { localVariableQuery["name"] = listOf("$name") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List workflow runs for a workflow
        * List all workflow runs for a workflow. You can replace &#x60;workflow_id&#x60; with the workflow file name. For example, you could use &#x60;main.yaml&#x60;. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param workflowId The ID of the workflow. You can also pass the workflow file name as a string. 
         * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
         * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
         * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
         * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
         * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
         * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
         * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
         * @return ActionsListWorkflowRunsForRepo200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListWorkflowRuns(owner: kotlin.String, repo: kotlin.String, workflowId: String, actor: kotlin.String?, branch: kotlin.String?, event: kotlin.String?, status: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, created: kotlinx.datetime.Instant?, excludePullRequests: kotlin.Boolean?, checkSuiteId: kotlin.Int?, headSha: kotlin.String?): HttpResponse<ActionsListWorkflowRunsForRepo200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            actor?.apply { localVariableQuery["actor"] = listOf("$actor") }
            branch?.apply { localVariableQuery["branch"] = listOf("$branch") }
            event?.apply { localVariableQuery["event"] = listOf("$event") }
            status?.apply { localVariableQuery["status"] = listOf("$status") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            created?.apply { localVariableQuery["created"] = listOf("$created") }
            excludePullRequests?.apply { localVariableQuery["exclude_pull_requests"] = listOf("$excludePullRequests") }
            checkSuiteId?.apply { localVariableQuery["check_suite_id"] = listOf("$checkSuiteId") }
            headSha?.apply { localVariableQuery["head_sha"] = listOf("$headSha") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "workflow_id" + "}", "$workflowId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List workflow runs for a repository
        * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actor Returns someone&#39;s workflow runs. Use the login for the user who created the &#x60;push&#x60; associated with the check suite or workflow run. (optional)
         * @param branch Returns workflow runs associated with a branch. Use the name of the branch of the &#x60;push&#x60;. (optional)
         * @param event Returns workflow run triggered by the event you specify. For example, &#x60;push&#x60;, &#x60;pull_request&#x60; or &#x60;issue&#x60;. For more information, see \&quot;[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\&quot; (optional)
         * @param status Returns workflow runs with the check run &#x60;status&#x60; or &#x60;conclusion&#x60; that you specify. For example, a conclusion can be &#x60;success&#x60; or a status can be &#x60;in_progress&#x60;. Only GitHub Actions can set a status of &#x60;waiting&#x60;, &#x60;pending&#x60;, or &#x60;requested&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param created Returns workflow runs created within the given date-time range. For more information on the syntax, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional)
         * @param excludePullRequests If &#x60;true&#x60; pull requests are omitted from the response (empty array). (optional, default to false)
         * @param checkSuiteId Returns workflow runs with the &#x60;check_suite_id&#x60; that you specify. (optional)
         * @param headSha Only returns workflow runs that are associated with the specified &#x60;head_sha&#x60;. (optional)
         * @return ActionsListWorkflowRunsForRepo200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsListWorkflowRunsForRepo(owner: kotlin.String, repo: kotlin.String, actor: kotlin.String?, branch: kotlin.String?, event: kotlin.String?, status: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, created: kotlinx.datetime.Instant?, excludePullRequests: kotlin.Boolean?, checkSuiteId: kotlin.Int?, headSha: kotlin.String?): HttpResponse<ActionsListWorkflowRunsForRepo200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            actor?.apply { localVariableQuery["actor"] = listOf("$actor") }
            branch?.apply { localVariableQuery["branch"] = listOf("$branch") }
            event?.apply { localVariableQuery["event"] = listOf("$event") }
            status?.apply { localVariableQuery["status"] = listOf("$status") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            created?.apply { localVariableQuery["created"] = listOf("$created") }
            excludePullRequests?.apply { localVariableQuery["exclude_pull_requests"] = listOf("$excludePullRequests") }
            checkSuiteId?.apply { localVariableQuery["check_suite_id"] = listOf("$checkSuiteId") }
            headSha?.apply { localVariableQuery["head_sha"] = listOf("$headSha") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/actions/runs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Re-run a job from a workflow run
        * Re-run a job and its dependent jobs in a workflow run.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param jobId The unique identifier of the job. 
         * @param actionsReRunJobForWorkflowRunRequest  (optional)
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsReRunJobForWorkflowRun(owner: kotlin.String, repo: kotlin.String, jobId: kotlin.Int, actionsReRunJobForWorkflowRunRequest: ActionsReRunJobForWorkflowRunRequest?): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsReRunJobForWorkflowRunRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "job_id" + "}", "$jobId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Re-run a workflow
        * Re-runs your workflow run using its &#x60;id&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param actionsReRunJobForWorkflowRunRequest  (optional)
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsReRunWorkflow(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, actionsReRunJobForWorkflowRunRequest: ActionsReRunJobForWorkflowRunRequest?): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsReRunJobForWorkflowRunRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Re-run failed jobs from a workflow run
        * Re-run all of the failed jobs and their dependent jobs in a workflow run using the &#x60;id&#x60; of the workflow run.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param actionsReRunJobForWorkflowRunRequest  (optional)
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsReRunWorkflowFailedJobs(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, actionsReRunJobForWorkflowRunRequest: ActionsReRunJobForWorkflowRunRequest?): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsReRunJobForWorkflowRunRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove all custom labels from a self-hosted runner for an organization
        * Remove all custom labels from a self-hosted runner configured in an organization. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove all custom labels from a self-hosted runner for a repository
        * Remove all custom labels from a self-hosted runner configured in a repository. Returns the remaining read-only labels from the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a custom label from a self-hosted runner for an organization
        * Remove a custom label from a self-hosted runner configured in an organization. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param name The name of a self-hosted runner&#39;s custom label. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/runners/{runner_id}/labels/{name}".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a custom label from a self-hosted runner for a repository
        * Remove a custom label from a self-hosted runner configured in a repository. Returns the remaining labels from the runner.  This endpoint returns a &#x60;404 Not Found&#x60; status if the custom label is not present on the runner.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param name The name of a self-hosted runner&#39;s custom label. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, name: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove selected repository from an organization secret
        * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun actionsRemoveSelectedRepoFromOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove selected repository from an organization variable
        * Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun actionsRemoveSelectedRepoFromOrgVariable(org: kotlin.String, name: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Review custom deployment protection rules for a workflow run
        * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  **Note:** GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see [&#x60;POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments&#x60;](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param actionsReviewCustomGatesForRunRequest  
         * @return void
        */
        open suspend fun actionsReviewCustomGatesForRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, actionsReviewCustomGatesForRunRequest: ActionsReviewCustomGatesForRunRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsReviewCustomGatesForRunRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Review pending deployments for a workflow run
        * Approve or reject pending deployments that are waiting on approval by a required reviewer.  Required reviewers with read access to the repository contents and deployments can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runId The unique identifier of the workflow run. 
         * @param actionsReviewPendingDeploymentsForRunRequest  
         * @return kotlin.collections.List<Deployment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsReviewPendingDeploymentsForRun(owner: kotlin.String, repo: kotlin.String, runId: kotlin.Int, actionsReviewPendingDeploymentsForRunRequest: ActionsReviewPendingDeploymentsForRunRequest): HttpResponse<kotlin.collections.List<Deployment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsReviewPendingDeploymentsForRunRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "run_id" + "}", "$runId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set allowed actions and reusable workflows for an organization
        * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param selectedActions  (optional)
         * @return void
        */
        open suspend fun actionsSetAllowedActionsOrganization(org: kotlin.String, selectedActions: SelectedActions?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = selectedActions

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/permissions/selected-actions".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set allowed actions and reusable workflows for a repository
        * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for &#x60;allowed_actions&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param selectedActions  (optional)
         * @return void
        */
        open suspend fun actionsSetAllowedActionsRepository(owner: kotlin.String, repo: kotlin.String, selectedActions: SelectedActions?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = selectedActions

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/permissions/selected-actions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set custom labels for a self-hosted runner for an organization
        * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in an organization.  Authenticated users must have admin access to the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsSetCustomLabelsForSelfHostedRunnerForOrg(org: kotlin.String, runnerId: kotlin.Int, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest: ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/runners/{runner_id}/labels".replace("{" + "org" + "}", "$org").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set custom labels for a self-hosted runner for a repository
        * Remove all previous custom labels and set the new custom labels for a specific self-hosted runner configured in a repository.  Authenticated users must have admin access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param runnerId Unique identifier of the self-hosted runner. 
         * @param actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsSetCustomLabelsForSelfHostedRunnerForRepo(owner: kotlin.String, repo: kotlin.String, runnerId: kotlin.Int, actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest: ActionsSetCustomLabelsForSelfHostedRunnerForOrgRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetCustomLabelsForSelfHostedRunnerForOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "runner_id" + "}", "$runnerId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set the customization template for an OIDC subject claim for a repository
        * Sets the customization template and &#x60;opt-in&#x60; or &#x60;opt-out&#x60; flag for an OpenID Connect (OIDC) subject claim for a repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsOIDCSubjectCustomizationForARepository  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun actionsSetCustomOidcSubClaimForRepo(owner: kotlin.String, repo: kotlin.String, actionsOIDCSubjectCustomizationForARepository: ActionsOIDCSubjectCustomizationForARepository): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsOIDCSubjectCustomizationForARepository

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/oidc/customization/sub".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set default workflow permissions for an organization
        * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in an organization, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param actionsSetDefaultWorkflowPermissions  (optional)
         * @return void
        */
        open suspend fun actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(org: kotlin.String, actionsSetDefaultWorkflowPermissions: ActionsSetDefaultWorkflowPermissions?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetDefaultWorkflowPermissions

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/permissions/workflow".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set default workflow permissions for a repository
        * Sets the default workflow permissions granted to the &#x60;GITHUB_TOKEN&#x60; when running workflows in a repository, and sets if GitHub Actions can submit approving pull request reviews. For more information, see \&quot;[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsSetDefaultWorkflowPermissions  
         * @return void
        */
        open suspend fun actionsSetGithubActionsDefaultWorkflowPermissionsRepository(owner: kotlin.String, repo: kotlin.String, actionsSetDefaultWorkflowPermissions: ActionsSetDefaultWorkflowPermissions): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetDefaultWorkflowPermissions

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/permissions/workflow".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set GitHub Actions permissions for an organization
        * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param actionsSetGithubActionsPermissionsOrganizationRequest  
         * @return void
        */
        open suspend fun actionsSetGithubActionsPermissionsOrganization(org: kotlin.String, actionsSetGithubActionsPermissionsOrganizationRequest: ActionsSetGithubActionsPermissionsOrganizationRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetGithubActionsPermissionsOrganizationRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/permissions".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set GitHub Actions permissions for a repository
        * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsSetGithubActionsPermissionsRepositoryRequest  
         * @return void
        */
        open suspend fun actionsSetGithubActionsPermissionsRepository(owner: kotlin.String, repo: kotlin.String, actionsSetGithubActionsPermissionsRepositoryRequest: ActionsSetGithubActionsPermissionsRepositoryRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetGithubActionsPermissionsRepositoryRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/permissions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories for an organization secret
        * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).  Authenticated users must have collaborator access to a repository to create, update, or read secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param actionsSetSelectedReposForOrgSecretRequest  
         * @return void
        */
        open suspend fun actionsSetSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, actionsSetSelectedReposForOrgSecretRequest: ActionsSetSelectedReposForOrgSecretRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetSelectedReposForOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories for an organization variable
        * Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their &#x60;visibility&#x60; field set to &#x60;selected&#x60;.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param actionsSetSelectedReposForOrgVariableRequest  
         * @return void
        */
        open suspend fun actionsSetSelectedReposForOrgVariable(org: kotlin.String, name: kotlin.String, actionsSetSelectedReposForOrgVariableRequest: ActionsSetSelectedReposForOrgVariableRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetSelectedReposForOrgVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/variables/{name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories enabled for GitHub Actions in an organization
        * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for &#x60;enabled_repositories&#x60; must be configured to &#x60;selected&#x60;. For more information, see \&quot;[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).\&quot;   OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest  
         * @return void
        */
        open suspend fun actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(org: kotlin.String, actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest: ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/actions/permissions/repositories".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set the level of access for workflows outside of the repository
        * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository. This endpoint only applies to private repositories. For more information, see \&quot;[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)\&quot;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param actionsWorkflowAccessToRepository  
         * @return void
        */
        open suspend fun actionsSetWorkflowAccessToRepository(owner: kotlin.String, repo: kotlin.String, actionsWorkflowAccessToRepository: ActionsWorkflowAccessToRepository): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsWorkflowAccessToRepository

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/actions/permissions/access".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an environment variable
        * Updates an environment variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param actionsUpdateRepoVariableRequest  
         * @return void
        */
        open suspend fun actionsUpdateEnvironmentVariable(owner: kotlin.String, repo: kotlin.String, name: kotlin.String, environmentName: kotlin.String, actionsUpdateRepoVariableRequest: ActionsUpdateRepoVariableRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsUpdateRepoVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "name" + "}", "$name").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an organization variable
        * Updates an organization variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint. If the repository is private, the &#x60;repo&#x60; scope is also required.
         * @param org The organization name. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param actionsUpdateOrgVariableRequest  
         * @return void
        */
        open suspend fun actionsUpdateOrgVariable(org: kotlin.String, name: kotlin.String, actionsUpdateOrgVariableRequest: ActionsUpdateOrgVariableRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsUpdateOrgVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/actions/variables/{name}".replace("{" + "org" + "}", "$org").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository variable
        * Updates a repository variable that you can reference in a GitHub Actions workflow.  Authenticated users must have collaborator access to a repository to create, update, or read variables.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param name The name of the variable. 
         * @param actionsUpdateRepoVariableRequest  
         * @return void
        */
        open suspend fun actionsUpdateRepoVariable(owner: kotlin.String, repo: kotlin.String, name: kotlin.String, actionsUpdateRepoVariableRequest: ActionsUpdateRepoVariableRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = actionsUpdateRepoVariableRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/actions/variables/{name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "name" + "}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

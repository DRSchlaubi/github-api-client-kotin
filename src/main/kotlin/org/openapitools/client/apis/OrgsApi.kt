/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AppsUpdateWebhookConfigForAppRequest
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.HookDelivery
import org.openapitools.client.models.HookDeliveryItem
import org.openapitools.client.models.MinimalRepository
import org.openapitools.client.models.OrgCustomProperty
import org.openapitools.client.models.OrgHook
import org.openapitools.client.models.OrgMembership
import org.openapitools.client.models.OrgRepoCustomPropertyValues
import org.openapitools.client.models.OrganizationFineGrainedPermission
import org.openapitools.client.models.OrganizationFull
import org.openapitools.client.models.OrganizationInvitation
import org.openapitools.client.models.OrganizationProgrammaticAccessGrant
import org.openapitools.client.models.OrganizationProgrammaticAccessGrantRequest
import org.openapitools.client.models.OrganizationRole
import org.openapitools.client.models.OrganizationSimple
import org.openapitools.client.models.OrgsConvertMemberToOutsideCollaboratorRequest
import org.openapitools.client.models.OrgsCreateCustomOrganizationRoleRequest
import org.openapitools.client.models.OrgsCreateInvitationRequest
import org.openapitools.client.models.OrgsCreateOrUpdateCustomPropertiesRequest
import org.openapitools.client.models.OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest
import org.openapitools.client.models.OrgsCreateOrUpdateCustomPropertyRequest
import org.openapitools.client.models.OrgsCreateWebhookRequest
import org.openapitools.client.models.OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest
import org.openapitools.client.models.OrgsListAppInstallations200Response
import org.openapitools.client.models.OrgsListOrgRoles200Response
import org.openapitools.client.models.OrgsPatchCustomOrganizationRoleRequest
import org.openapitools.client.models.OrgsRemoveOutsideCollaborator422Response
import org.openapitools.client.models.OrgsReviewPatGrantRequestRequest
import org.openapitools.client.models.OrgsReviewPatGrantRequestsInBulkRequest
import org.openapitools.client.models.OrgsSetMembershipForUserRequest
import org.openapitools.client.models.OrgsUpdate422Response
import org.openapitools.client.models.OrgsUpdateMembershipForAuthenticatedUserRequest
import org.openapitools.client.models.OrgsUpdatePatAccessRequest
import org.openapitools.client.models.OrgsUpdatePatAccessesRequest
import org.openapitools.client.models.OrgsUpdateRequest
import org.openapitools.client.models.OrgsUpdateWebhookRequest
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.Team
import org.openapitools.client.models.TeamSimple
import org.openapitools.client.models.ValidationError
import org.openapitools.client.models.WebhookConfig

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class OrgsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add a security manager team
        * Adds a team as a security manager for an organization. For more information, see \&quot;[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization.\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @return void
        */
        open suspend fun orgsAddSecurityManagerTeam(org: kotlin.String, teamSlug: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/security-managers/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Assign an organization role to a team
        * Assigns an organization role to a team in an organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param roleId The unique identifier of the role. 
         * @return void
        */
        open suspend fun orgsAssignTeamToOrgRole(org: kotlin.String, teamSlug: kotlin.String, roleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Assign an organization role to a user
        * Assigns an organization role to a member of an organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param roleId The unique identifier of the role. 
         * @return void
        */
        open suspend fun orgsAssignUserToOrgRole(org: kotlin.String, username: kotlin.String, roleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/organization-roles/users/{username}/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Block a user from an organization
        * Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the given user a 422 is returned.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsBlockUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/blocks/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Cancel an organization invitation
        * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
         * @param org The organization name. The name is not case sensitive. 
         * @param invitationId The unique identifier of the invitation. 
         * @return void
        */
        open suspend fun orgsCancelInvitation(org: kotlin.String, invitationId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/invitations/{invitation_id}".replace("{" + "org" + "}", "$org").replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if a user is blocked by an organization
        * Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking the user, or if the user account has been identified as spam by GitHub.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsCheckBlockedUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/blocks/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check organization membership for a user
        * Check if a user is, publicly or privately, a member of the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsCheckMembershipForUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/members/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check public organization membership for a user
        * Check if the provided user is a public member of the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsCheckPublicMembershipForUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/public_members/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Convert an organization member to outside collaborator
        * When an organization member is converted to an outside collaborator, they&#39;ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \&quot;[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)\&quot;. Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see \&quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param orgsConvertMemberToOutsideCollaboratorRequest  (optional)
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsConvertMemberToOutsideCollaborator(org: kotlin.String, username: kotlin.String, orgsConvertMemberToOutsideCollaboratorRequest: OrgsConvertMemberToOutsideCollaboratorRequest?): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsConvertMemberToOutsideCollaboratorRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/outside_collaborators/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a custom organization role
        * Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the organization. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsCreateCustomOrganizationRoleRequest  
         * @return OrganizationRole
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsCreateCustomOrganizationRole(org: kotlin.String, orgsCreateCustomOrganizationRoleRequest: OrgsCreateCustomOrganizationRoleRequest): HttpResponse<OrganizationRole> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateCustomOrganizationRoleRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/organization-roles".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization invitation
        * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsCreateInvitationRequest  (optional)
         * @return OrganizationInvitation
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsCreateInvitation(org: kotlin.String, orgsCreateInvitationRequest: OrgsCreateInvitationRequest?): HttpResponse<OrganizationInvitation> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateInvitationRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/invitations".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update custom properties for an organization
        * Creates new or updates existing custom properties defined for an organization in a batch.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsCreateOrUpdateCustomPropertiesRequest  
         * @return kotlin.collections.List<OrgCustomProperty>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsCreateOrUpdateCustomProperties(org: kotlin.String, orgsCreateOrUpdateCustomPropertiesRequest: OrgsCreateOrUpdateCustomPropertiesRequest): HttpResponse<kotlin.collections.List<OrgCustomProperty>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateOrUpdateCustomPropertiesRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/properties/schema".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update custom property values for organization repositories
        * Create new or update existing custom property values for repositories in a batch that belong to an organization. Each target repository will have its custom property values updated to match the values provided in the request.  A maximum of 30 repositories can be updated in a single request.  Using a value of &#x60;null&#x60; for a custom property will remove or &#39;unset&#39; the property value from the repository.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_values_editor&#x60; in the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsCreateOrUpdateCustomPropertiesValuesForReposRequest  
         * @return void
        */
        open suspend fun orgsCreateOrUpdateCustomPropertiesValuesForRepos(org: kotlin.String, orgsCreateOrUpdateCustomPropertiesValuesForReposRequest: OrgsCreateOrUpdateCustomPropertiesValuesForReposRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateOrUpdateCustomPropertiesValuesForReposRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/properties/values".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update a custom property for an organization
        * Creates a new or updates an existing custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of: - An administrator for the organization. - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param customPropertyName The custom property name. The name is case sensitive. 
         * @param orgsCreateOrUpdateCustomPropertyRequest  
         * @return OrgCustomProperty
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsCreateOrUpdateCustomProperty(org: kotlin.String, customPropertyName: kotlin.String, orgsCreateOrUpdateCustomPropertyRequest: OrgsCreateOrUpdateCustomPropertyRequest): HttpResponse<OrgCustomProperty> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateOrUpdateCustomPropertyRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/properties/schema/{custom_property_name}".replace("{" + "org" + "}", "$org").replace("{" + "custom_property_name" + "}", "$customPropertyName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization webhook
        * Here&#39;s how you can create a hook that posts payloads in JSON format:
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsCreateWebhookRequest  
         * @return OrgHook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsCreateWebhook(org: kotlin.String, orgsCreateWebhookRequest: OrgsCreateWebhookRequest): HttpResponse<OrgHook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsCreateWebhookRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/hooks".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization
        * Deletes an organization and all its repositories.  The organization login will be unavailable for 90 days after deletion.  Please review the Terms of Service regarding account deletion before using this endpoint:  https://docs.github.com/site-policy/github-terms/github-terms-of-service
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsDelete(org: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a custom organization role.
        * Deletes a custom organization role. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param roleId The unique identifier of the role. 
         * @return void
        */
        open suspend fun orgsDeleteCustomOrganizationRole(org: kotlin.String, roleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/organization-roles/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization webhook
        * 
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return void
        */
        open suspend fun orgsDeleteWebhook(org: kotlin.String, hookId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/hooks/{hook_id}".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable or disable a security feature for an organization
        * Enables or disables the specified security feature for all eligible repositories in an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  The authenticated user must be an organization owner or be member of a team with the security manager role to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;write:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param securityProduct The security feature to enable or disable. 
         * @param enablement The action to take.  &#x60;enable_all&#x60; means to enable the specified security feature for all repositories in the organization. &#x60;disable_all&#x60; means to disable the specified security feature for all repositories in the organization. 
         * @param orgsEnableOrDisableSecurityProductOnAllOrgReposRequest  (optional)
         * @return void
        */
        open suspend fun orgsEnableOrDisableSecurityProductOnAllOrgRepos(org: kotlin.String, securityProduct: kotlin.String, enablement: kotlin.String, orgsEnableOrDisableSecurityProductOnAllOrgReposRequest: OrgsEnableOrDisableSecurityProductOnAllOrgReposRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsEnableOrDisableSecurityProductOnAllOrgReposRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/{security_product}/{enablement}".replace("{" + "org" + "}", "$org").replace("{" + "security_product" + "}", "$securityProduct").replace("{" + "enablement" + "}", "$enablement"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization
        * Gets information about an organization.  When the value of &#x60;two_factor_requirement_enabled&#x60; is &#x60;true&#x60;, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).  To see the full details about an organization, the authenticated user must be an organization owner.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to see the full details about an organization.  To see information about an organization&#39;s GitHub plan, GitHub Apps need the &#x60;Organization plan&#x60; permission.
         * @param org The organization name. The name is not case sensitive. 
         * @return OrganizationFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGet(org: kotlin.String): HttpResponse<OrganizationFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all custom properties for an organization
        * Gets all custom properties defined for an organization. Organization members can read these properties.
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.collections.List<OrgCustomProperty>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetAllCustomProperties(org: kotlin.String): HttpResponse<kotlin.collections.List<OrgCustomProperty>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/properties/schema".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a custom property for an organization
        * Gets a custom property that is defined for an organization. Organization members can read these properties.
         * @param org The organization name. The name is not case sensitive. 
         * @param customPropertyName The custom property name. The name is case sensitive. 
         * @return OrgCustomProperty
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetCustomProperty(org: kotlin.String, customPropertyName: kotlin.String): HttpResponse<OrgCustomProperty> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/properties/schema/{custom_property_name}".replace("{" + "org" + "}", "$org").replace("{" + "custom_property_name" + "}", "$customPropertyName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization membership for the authenticated user
        * If the authenticated user is an active or pending member of the organization, this endpoint will return the user&#39;s membership. If the authenticated user is not affiliated with the organization, a &#x60;404&#x60; is returned. This endpoint will return a &#x60;403&#x60; if the request is made by a GitHub App that is blocked by the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @return OrgMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetMembershipForAuthenticatedUser(org: kotlin.String): HttpResponse<OrgMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/memberships/orgs/{org}".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get organization membership for a user
        * In order to get a user&#39;s membership with an organization, the authenticated user must be an organization member. The &#x60;state&#x60; parameter in the response can be used to identify the user&#39;s membership status.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return OrgMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetMembershipForUser(org: kotlin.String, username: kotlin.String): HttpResponse<OrgMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization role
        * Gets an organization role that is available to this organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param roleId The unique identifier of the role. 
         * @return OrganizationRole
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetOrgRole(org: kotlin.String, roleId: kotlin.Int): HttpResponse<OrganizationRole> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/organization-roles/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization webhook
        * Returns a webhook configured in an organization. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return OrgHook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetWebhook(org: kotlin.String, hookId: kotlin.Int): HttpResponse<OrgHook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/hooks/{hook_id}".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a webhook configuration for an organization
        * Returns the webhook configuration for an organization. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org_hook&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return WebhookConfig
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetWebhookConfigForOrg(org: kotlin.String, hookId: kotlin.Int): HttpResponse<WebhookConfig> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/hooks/{hook_id}/config".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a webhook delivery for an organization webhook
        * Returns a delivery for a webhook configured in an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param deliveryId  
         * @return HookDelivery
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsGetWebhookDelivery(org: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): HttpResponse<HookDelivery> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId").replace("{" + "delivery_id" + "}", "$deliveryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organizations
        * Lists all organizations, in the order that they were created.  **Note:** Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of organizations.
         * @param since An organization ID. Only return organizations with an ID greater than this ID. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<OrganizationSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsList(since: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/organizations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List app installations for an organization
        * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:read&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return OrgsListAppInstallations200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListAppInstallations(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<OrgsListAppInstallations200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/installations".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List users blocked by an organization
        * List the users blocked by an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListBlockedUsers(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/blocks".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List custom property values for organization repositories
        * Lists organization repositories with all of their custom property values. Organization members can read these properties.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param repositoryQuery Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/search/search#constructing-a-search-query). See \&quot;[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\&quot; for a detailed list of qualifiers. (optional, default to "push")
         * @return kotlin.collections.List<OrgRepoCustomPropertyValues>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListCustomPropertiesValuesForRepos(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, repositoryQuery: kotlin.String?): HttpResponse<kotlin.collections.List<OrgRepoCustomPropertyValues>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            repositoryQuery?.apply { localVariableQuery["repository_query"] = listOf("$repositoryQuery") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/properties/values".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List failed organization invitations
        * The return hash contains &#x60;failed_at&#x60; and &#x60;failed_reason&#x60; fields which represent the time at which the invitation failed and the reason for the failure.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrganizationInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListFailedInvitations(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/failed_invitations".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organizations for the authenticated user
        * List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with &#x60;read:org&#x60; scope, you can publicize your organization membership with &#x60;user&#x60; scope, etc.). Therefore, this API requires at least &#x60;user&#x60; or &#x60;read:org&#x60; scope for OAuth app tokens and personal access tokens (classic). Requests with insufficient scope will receive a &#x60;403 Forbidden&#x60; response.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrganizationSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/orgs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organizations for a user
        * List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.  This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
         * @param username The handle for the GitHub user account. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrganizationSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListForUser(username: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrganizationSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/orgs".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization invitation teams
        * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
         * @param org The organization name. The name is not case sensitive. 
         * @param invitationId The unique identifier of the invitation. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListInvitationTeams(org: kotlin.String, invitationId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/invitations/{invitation_id}/teams".replace("{" + "org" + "}", "$org").replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization members
        * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
         * @param org The organization name. The name is not case sensitive. 
         * @param filter Filter members returned in the list. &#x60;2fa_disabled&#x60; means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. (optional, default to all)
         * @param role Filter members returned by their role. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListMembers(org: kotlin.String, filter: kotlin.String?, role: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            filter?.apply { localVariableQuery["filter"] = listOf("$filter") }
            role?.apply { localVariableQuery["role"] = listOf("$role") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/members".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization memberships for the authenticated user
        * Lists all of the authenticated user&#39;s organization memberships.
         * @param state Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrgMembership>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListMembershipsForAuthenticatedUser(state: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrgMembership>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/memberships/orgs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List teams that are assigned to an organization role
        * Lists the teams that are assigned to an organization role. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param roleId The unique identifier of the role. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListOrgRoleTeams(org: kotlin.String, roleId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/organization-roles/{role_id}/teams".replace("{" + "org" + "}", "$org").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List users that are assigned to an organization role
        * Lists organization members that are assigned to an organization role. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, you must be an administrator for the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param roleId The unique identifier of the role. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListOrgRoleUsers(org: kotlin.String, roleId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/organization-roles/{role_id}/users".replace("{" + "org" + "}", "$org").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all organization roles for an organization
        * Lists the organization roles available in this organization. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return OrgsListOrgRoles200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListOrgRoles(org: kotlin.String): HttpResponse<OrgsListOrgRoles200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/organization-roles".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization fine-grained permissions for an organization
        * Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more information, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  To list the fine-grained permissions that can be used in custom repository roles for an organization, see \&quot;[List repository fine-grained permissions for an organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization).\&quot;  To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;read_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.collections.List<OrganizationFineGrainedPermission>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListOrganizationFineGrainedPermissions(org: kotlin.String): HttpResponse<kotlin.collections.List<OrganizationFineGrainedPermission>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/organization-fine-grained-permissions".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List outside collaborators for an organization
        * List all users who are outside collaborators of an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param filter Filter the list of outside collaborators. &#x60;2fa_disabled&#x60; means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListOutsideCollaborators(org: kotlin.String, filter: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            filter?.apply { localVariableQuery["filter"] = listOf("$filter") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/outside_collaborators".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repositories a fine-grained personal access token has access to
        * Lists the repositories a fine-grained personal access token has access to.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param patId Unique identifier of the fine-grained personal access token. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPatGrantRepositories(org: kotlin.String, patId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/personal-access-tokens/{pat_id}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "pat_id" + "}", "$patId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repositories requested to be accessed by a fine-grained personal access token
        * Lists the repositories a fine-grained personal access token request is requesting access to.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param patRequestId Unique identifier of the request for access via fine-grained personal access token. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPatGrantRequestRepositories(org: kotlin.String, patRequestId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "pat_request_id" + "}", "$patRequestId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List requests to access organization resources with fine-grained personal access tokens
        * Lists requests from organization members to access organization resources with a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param sort The property by which to sort the results. (optional, default to created_at)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param owner A list of owner usernames to use to filter the results. (optional)
         * @param repository The name of the repository to use to filter the results. (optional)
         * @param permission The permission to use to filter the results. (optional)
         * @param lastUsedBefore Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param lastUsedAfter Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @return kotlin.collections.List<OrganizationProgrammaticAccessGrantRequest>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPatGrantRequests(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, sort: kotlin.String?, direction: kotlin.String?, owner: kotlin.collections.List<kotlin.String>?, repository: kotlin.String?, permission: kotlin.String?, lastUsedBefore: kotlinx.datetime.Instant?, lastUsedAfter: kotlinx.datetime.Instant?): HttpResponse<kotlin.collections.List<OrganizationProgrammaticAccessGrantRequest>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            owner?.apply { localVariableQuery["owner"] = toMultiValue(this, "multi") }
            repository?.apply { localVariableQuery["repository"] = listOf("$repository") }
            permission?.apply { localVariableQuery["permission"] = listOf("$permission") }
            lastUsedBefore?.apply { localVariableQuery["last_used_before"] = listOf("$lastUsedBefore") }
            lastUsedAfter?.apply { localVariableQuery["last_used_after"] = listOf("$lastUsedAfter") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/personal-access-token-requests".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List fine-grained personal access tokens with access to organization resources
        * Lists approved fine-grained personal access tokens owned by organization members that can access organization resources.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param sort The property by which to sort the results. (optional, default to created_at)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param owner A list of owner usernames to use to filter the results. (optional)
         * @param repository The name of the repository to use to filter the results. (optional)
         * @param permission The permission to use to filter the results. (optional)
         * @param lastUsedBefore Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param lastUsedAfter Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @return kotlin.collections.List<OrganizationProgrammaticAccessGrant>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPatGrants(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, sort: kotlin.String?, direction: kotlin.String?, owner: kotlin.collections.List<kotlin.String>?, repository: kotlin.String?, permission: kotlin.String?, lastUsedBefore: kotlinx.datetime.Instant?, lastUsedAfter: kotlinx.datetime.Instant?): HttpResponse<kotlin.collections.List<OrganizationProgrammaticAccessGrant>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            owner?.apply { localVariableQuery["owner"] = toMultiValue(this, "multi") }
            repository?.apply { localVariableQuery["repository"] = listOf("$repository") }
            permission?.apply { localVariableQuery["permission"] = listOf("$permission") }
            lastUsedBefore?.apply { localVariableQuery["last_used_before"] = listOf("$lastUsedBefore") }
            lastUsedAfter?.apply { localVariableQuery["last_used_after"] = listOf("$lastUsedAfter") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/personal-access-tokens".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List pending organization invitations
        * The return hash contains a &#x60;role&#x60; field which refers to the Organization Invitation role and will be one of the following values: &#x60;direct_member&#x60;, &#x60;admin&#x60;, &#x60;billing_manager&#x60;, or &#x60;hiring_manager&#x60;. If the invitee is not a GitHub member, the &#x60;login&#x60; field in the return hash will be &#x60;null&#x60;.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param role Filter invitations by their member role. (optional, default to all)
         * @param invitationSource Filter invitations by their invitation source. (optional, default to all)
         * @return kotlin.collections.List<OrganizationInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPendingInvitations(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, role: kotlin.String?, invitationSource: kotlin.String?): HttpResponse<kotlin.collections.List<OrganizationInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            role?.apply { localVariableQuery["role"] = listOf("$role") }
            invitationSource?.apply { localVariableQuery["invitation_source"] = listOf("$invitationSource") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/invitations".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public organization members
        * Members of an organization can choose to have their membership publicized or not.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListPublicMembers(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/public_members".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List security manager teams
        * Lists teams that are security managers for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  The authenticated user must be an administrator or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.collections.List<TeamSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListSecurityManagerTeams(org: kotlin.String): HttpResponse<kotlin.collections.List<TeamSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/security-managers".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deliveries for an organization webhook
        * Returns a list of webhook deliveries for a webhook configured in an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param cursor Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the &#x60;link&#x60; header for the next and previous page cursors. (optional)
         * @param redelivery  (optional)
         * @return kotlin.collections.List<HookDeliveryItem>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListWebhookDeliveries(org: kotlin.String, hookId: kotlin.Int, perPage: kotlin.Int?, cursor: kotlin.String?, redelivery: kotlin.Boolean?): HttpResponse<kotlin.collections.List<HookDeliveryItem>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            cursor?.apply { localVariableQuery["cursor"] = listOf("$cursor") }
            redelivery?.apply { localVariableQuery["redelivery"] = listOf("$redelivery") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/hooks/{hook_id}/deliveries".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization webhooks
        * 
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<OrgHook>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsListWebhooks(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<OrgHook>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/hooks".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a custom organization role
        * Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on custom organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;   To use this endpoint, the authenticated user must be one of:  - An administrator for the organization. - A user, or a user on a team, with the fine-grained permissions of &#x60;write_organization_custom_org_role&#x60; in the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param roleId The unique identifier of the role. 
         * @param orgsPatchCustomOrganizationRoleRequest  
         * @return OrganizationRole
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsPatchCustomOrganizationRole(org: kotlin.String, roleId: kotlin.Int, orgsPatchCustomOrganizationRoleRequest: OrgsPatchCustomOrganizationRoleRequest): HttpResponse<OrganizationRole> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsPatchCustomOrganizationRoleRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/organization-roles/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Ping an organization webhook
        * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return void
        */
        open suspend fun orgsPingWebhook(org: kotlin.String, hookId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/hooks/{hook_id}/pings".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Redeliver a delivery for an organization webhook
        * Redeliver a delivery for a webhook configured in an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param deliveryId  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsRedeliverWebhookDelivery(org: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId").replace("{" + "delivery_id" + "}", "$deliveryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a custom property for an organization
        * Removes a custom property that is defined for an organization.  To use this endpoint, the authenticated user must be one of:   - An administrator for the organization.   - A user, or a user on a team, with the fine-grained permission of &#x60;custom_properties_org_definitions_manager&#x60; in the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param customPropertyName The custom property name. The name is case sensitive. 
         * @return void
        */
        open suspend fun orgsRemoveCustomProperty(org: kotlin.String, customPropertyName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/properties/schema/{custom_property_name}".replace("{" + "org" + "}", "$org").replace("{" + "custom_property_name" + "}", "$customPropertyName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove an organization member
        * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization&#39;s repositories.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsRemoveMember(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/members/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove organization membership for a user
        * In order to remove a user&#39;s membership with an organization, the authenticated user must be an organization owner.  If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsRemoveMembershipForUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove outside collaborator from an organization
        * Removing a user from this list will remove them from all the organization&#39;s repositories.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsRemoveOutsideCollaborator(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/outside_collaborators/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove public organization membership for the authenticated user
        * Removes the public membership for the authenticated user from the specified organization, unless public visibility is enforced by default.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsRemovePublicMembershipForAuthenticatedUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/public_members/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a security manager team
        * Removes the security manager role from a team for an organization. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization.\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @return void
        */
        open suspend fun orgsRemoveSecurityManagerTeam(org: kotlin.String, teamSlug: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/security-managers/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Review a request to access organization resources with a fine-grained personal access token
        * Approves or denies a pending request to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param patRequestId Unique identifier of the request for access via fine-grained personal access token. 
         * @param orgsReviewPatGrantRequestRequest  
         * @return void
        */
        open suspend fun orgsReviewPatGrantRequest(org: kotlin.String, patRequestId: kotlin.Int, orgsReviewPatGrantRequestRequest: OrgsReviewPatGrantRequestRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsReviewPatGrantRequestRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/personal-access-token-requests/{pat_request_id}".replace("{" + "org" + "}", "$org").replace("{" + "pat_request_id" + "}", "$patRequestId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Review requests to access organization resources with fine-grained personal access tokens
        * Approves or denies multiple pending requests to access organization resources via a fine-grained personal access token.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsReviewPatGrantRequestsInBulkRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsReviewPatGrantRequestsInBulk(org: kotlin.String, orgsReviewPatGrantRequestsInBulkRequest: OrgsReviewPatGrantRequestsInBulkRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsReviewPatGrantRequestsInBulkRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/personal-access-token-requests".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove all organization roles for a team
        * Removes all assigned organization roles from a team. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @return void
        */
        open suspend fun orgsRevokeAllOrgRolesTeam(org: kotlin.String, teamSlug: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/organization-roles/teams/{team_slug}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove all organization roles for a user
        * Revokes all assigned organization roles from a user. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsRevokeAllOrgRolesUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/organization-roles/users/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove an organization role from a team
        * Removes an organization role from a team. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param teamSlug The slug of the team name. 
         * @param roleId The unique identifier of the role. 
         * @return void
        */
        open suspend fun orgsRevokeOrgRoleTeam(org: kotlin.String, teamSlug: kotlin.String, roleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "team_slug" + "}", "$teamSlug").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove an organization role from a user
        * Remove an organization role from a user. For more information on organization roles, see \&quot;[Managing people&#39;s access to your organization with roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles).\&quot;  The authenticated user must be an administrator for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param roleId The unique identifier of the role. 
         * @return void
        */
        open suspend fun orgsRevokeOrgRoleUser(org: kotlin.String, username: kotlin.String, roleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/organization-roles/users/{username}/{role_id}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username").replace("{" + "role_id" + "}", "$roleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set organization membership for a user
        * Only authenticated organization owners can add a member to the organization or update the member&#39;s role.  *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user&#39;s [membership status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be &#x60;pending&#x60; until they accept the invitation.      *   Authenticated users can _update_ a user&#39;s membership by passing the &#x60;role&#x60; parameter. If the authenticated user changes a member&#39;s role to &#x60;admin&#x60;, the affected user will receive an email notifying them that they&#39;ve been made an organization owner. If the authenticated user changes an owner&#39;s role to &#x60;member&#x60;, no email will be sent.  **Rate limits**  To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param orgsSetMembershipForUserRequest  (optional)
         * @return OrgMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsSetMembershipForUser(org: kotlin.String, username: kotlin.String, orgsSetMembershipForUserRequest: OrgsSetMembershipForUserRequest?): HttpResponse<OrgMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsSetMembershipForUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/memberships/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set public organization membership for the authenticated user
        * The user can publicize their own membership. (A user cannot publicize the membership for another user.)  Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsSetPublicMembershipForAuthenticatedUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/public_members/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Unblock a user from an organization
        * Unblocks the given user on behalf of the specified organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun orgsUnblockUser(org: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/blocks/{username}".replace("{" + "org" + "}", "$org").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an organization
        * **Parameter Deprecation Notice:** GitHub will replace and discontinue &#x60;members_allowed_repository_creation_type&#x60; in favor of more granular permissions. The new input parameters are &#x60;members_can_create_public_repositories&#x60;, &#x60;members_can_create_private_repositories&#x60; for all organizations and &#x60;members_can_create_internal_repositories&#x60; for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).  Updates the organization&#39;s profile and member privileges.  The authenticated user must be an organization owner to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; or &#x60;repo&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsUpdateRequest  (optional)
         * @return OrganizationFull
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsUpdate(org: kotlin.String, orgsUpdateRequest: OrgsUpdateRequest?): HttpResponse<OrganizationFull> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsUpdateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an organization membership for the authenticated user
        * Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsUpdateMembershipForAuthenticatedUserRequest  
         * @return OrgMembership
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsUpdateMembershipForAuthenticatedUser(org: kotlin.String, orgsUpdateMembershipForAuthenticatedUserRequest: OrgsUpdateMembershipForAuthenticatedUserRequest): HttpResponse<OrgMembership> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsUpdateMembershipForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/user/memberships/orgs/{org}".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update the access a fine-grained personal access token has to organization resources
        * Updates the access an organization member has to organization resources via a fine-grained personal access token. Limited to revoking the token&#39;s existing access. Limited to revoking a token&#39;s existing access.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param patId The unique identifier of the fine-grained personal access token. 
         * @param orgsUpdatePatAccessRequest  
         * @return void
        */
        open suspend fun orgsUpdatePatAccess(org: kotlin.String, patId: kotlin.Int, orgsUpdatePatAccessRequest: OrgsUpdatePatAccessRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsUpdatePatAccessRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/personal-access-tokens/{pat_id}".replace("{" + "org" + "}", "$org").replace("{" + "pat_id" + "}", "$patId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update the access to organization resources via fine-grained personal access tokens
        * Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited to revoking a token&#39;s existing access.  Only GitHub Apps can use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param orgsUpdatePatAccessesRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsUpdatePatAccesses(org: kotlin.String, orgsUpdatePatAccessesRequest: OrgsUpdatePatAccessesRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsUpdatePatAccessesRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/personal-access-tokens".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an organization webhook
        * Updates a webhook configured in an organization. When you update a webhook, the &#x60;secret&#x60; will be overwritten. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for an organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param orgsUpdateWebhookRequest  (optional)
         * @return OrgHook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsUpdateWebhook(org: kotlin.String, hookId: kotlin.Int, orgsUpdateWebhookRequest: OrgsUpdateWebhookRequest?): HttpResponse<OrgHook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = orgsUpdateWebhookRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/hooks/{hook_id}".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a webhook configuration for an organization
        * Updates the webhook configuration for an organization. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update an organization webhook ](/rest/orgs/webhooks#update-an-organization-webhook).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org_hook&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param appsUpdateWebhookConfigForAppRequest  (optional)
         * @return WebhookConfig
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun orgsUpdateWebhookConfigForOrg(org: kotlin.String, hookId: kotlin.Int, appsUpdateWebhookConfigForAppRequest: AppsUpdateWebhookConfigForAppRequest?): HttpResponse<WebhookConfig> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = appsUpdateWebhookConfigForAppRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/orgs/{org}/hooks/{hook_id}/config".replace("{" + "org" + "}", "$org").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

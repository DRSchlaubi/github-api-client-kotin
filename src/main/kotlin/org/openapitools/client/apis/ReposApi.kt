/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.Activity
import org.openapitools.client.models.ActivityMarkNotificationsAsRead202Response
import org.openapitools.client.models.Autolink
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.BranchProtection
import org.openapitools.client.models.BranchRestrictionPolicy
import org.openapitools.client.models.BranchShort
import org.openapitools.client.models.BranchWithProtection
import org.openapitools.client.models.CheckAutomatedSecurityFixes
import org.openapitools.client.models.CloneTraffic
import org.openapitools.client.models.CodeownersErrors
import org.openapitools.client.models.Collaborator
import org.openapitools.client.models.CombinedCommitStatus
import org.openapitools.client.models.Commit
import org.openapitools.client.models.CommitActivity
import org.openapitools.client.models.CommitComment
import org.openapitools.client.models.CommitComparison
import org.openapitools.client.models.CommunityProfile
import org.openapitools.client.models.ContentFile
import org.openapitools.client.models.ContentTraffic
import org.openapitools.client.models.ContentTree
import org.openapitools.client.models.Contributor
import org.openapitools.client.models.ContributorActivity
import org.openapitools.client.models.CustomPropertyValue
import org.openapitools.client.models.DeployKey
import org.openapitools.client.models.Deployment
import org.openapitools.client.models.DeploymentBranchPolicy
import org.openapitools.client.models.DeploymentBranchPolicyNamePattern
import org.openapitools.client.models.DeploymentBranchPolicyNamePatternWithType
import org.openapitools.client.models.DeploymentProtectionRule
import org.openapitools.client.models.DeploymentStatus
import org.openapitools.client.models.Environment
import org.openapitools.client.models.FileCommit
import org.openapitools.client.models.FullRepository
import org.openapitools.client.models.Hook
import org.openapitools.client.models.HookDelivery
import org.openapitools.client.models.HookDeliveryItem
import org.openapitools.client.models.Integration
import org.openapitools.client.models.MergedUpstream
import org.openapitools.client.models.MinimalRepository
import org.openapitools.client.models.OrgsRemoveOutsideCollaborator422Response
import org.openapitools.client.models.Page
import org.openapitools.client.models.PageBuild
import org.openapitools.client.models.PageBuildStatus
import org.openapitools.client.models.PageDeployment
import org.openapitools.client.models.PagesDeploymentStatus
import org.openapitools.client.models.PagesHealthCheck
import org.openapitools.client.models.ParticipationStats
import org.openapitools.client.models.ProtectedBranch
import org.openapitools.client.models.ProtectedBranchAdminEnforced
import org.openapitools.client.models.ProtectedBranchPullRequestReview
import org.openapitools.client.models.PullRequestSimple
import org.openapitools.client.models.ReferrerTraffic
import org.openapitools.client.models.Release
import org.openapitools.client.models.ReleaseAsset
import org.openapitools.client.models.ReleaseNotesContent
import org.openapitools.client.models.ReposAddCollaboratorRequest
import org.openapitools.client.models.ReposAddTeamAccessRestrictionsRequest
import org.openapitools.client.models.ReposCheckPrivateVulnerabilityReporting200Response
import org.openapitools.client.models.ReposCreateAutolinkRequest
import org.openapitools.client.models.ReposCreateCommitCommentRequest
import org.openapitools.client.models.ReposCreateCommitStatusRequest
import org.openapitools.client.models.ReposCreateDeployKeyRequest
import org.openapitools.client.models.ReposCreateDeploymentProtectionRuleRequest
import org.openapitools.client.models.ReposCreateDeploymentRequest
import org.openapitools.client.models.ReposCreateDeploymentStatusRequest
import org.openapitools.client.models.ReposCreateDispatchEventRequest
import org.openapitools.client.models.ReposCreateForAuthenticatedUserRequest
import org.openapitools.client.models.ReposCreateForkRequest
import org.openapitools.client.models.ReposCreateInOrgRequest
import org.openapitools.client.models.ReposCreateOrUpdateCustomPropertiesValuesRequest
import org.openapitools.client.models.ReposCreateOrUpdateEnvironmentRequest
import org.openapitools.client.models.ReposCreateOrUpdateFileContentsRequest
import org.openapitools.client.models.ReposCreateOrgRulesetRequest
import org.openapitools.client.models.ReposCreatePagesDeploymentRequest
import org.openapitools.client.models.ReposCreatePagesSiteRequest
import org.openapitools.client.models.ReposCreateReleaseRequest
import org.openapitools.client.models.ReposCreateRepoRulesetRequest
import org.openapitools.client.models.ReposCreateTagProtectionRequest
import org.openapitools.client.models.ReposCreateUsingTemplateRequest
import org.openapitools.client.models.ReposCreateWebhookRequest
import org.openapitools.client.models.ReposDeleteFileRequest
import org.openapitools.client.models.ReposGenerateReleaseNotesRequest
import org.openapitools.client.models.ReposGetAllDeploymentProtectionRules200Response
import org.openapitools.client.models.ReposGetAllEnvironments200Response
import org.openapitools.client.models.ReposGetContent200Response
import org.openapitools.client.models.ReposListCustomDeploymentRuleIntegrations200Response
import org.openapitools.client.models.ReposListDeploymentBranchPolicies200Response
import org.openapitools.client.models.ReposMergeRequest
import org.openapitools.client.models.ReposMergeUpstreamRequest
import org.openapitools.client.models.ReposRenameBranchRequest
import org.openapitools.client.models.ReposReplaceAllTopicsRequest
import org.openapitools.client.models.ReposSetAppAccessRestrictionsRequest
import org.openapitools.client.models.ReposSetStatusCheckContextsRequest
import org.openapitools.client.models.ReposSetTeamAccessRestrictionsRequest
import org.openapitools.client.models.ReposSetUserAccessRestrictionsRequest
import org.openapitools.client.models.ReposTransferRequest
import org.openapitools.client.models.ReposUpdateBranchProtectionRequest
import org.openapitools.client.models.ReposUpdateCommitCommentRequest
import org.openapitools.client.models.ReposUpdateInformationAboutPagesSiteRequest
import org.openapitools.client.models.ReposUpdateInvitationRequest
import org.openapitools.client.models.ReposUpdateOrgRulesetRequest
import org.openapitools.client.models.ReposUpdatePullRequestReviewProtectionRequest
import org.openapitools.client.models.ReposUpdateReleaseAssetRequest
import org.openapitools.client.models.ReposUpdateReleaseRequest
import org.openapitools.client.models.ReposUpdateRepoRulesetRequest
import org.openapitools.client.models.ReposUpdateRequest
import org.openapitools.client.models.ReposUpdateStatusCheckProtectionRequest
import org.openapitools.client.models.ReposUpdateWebhookConfigForRepoRequest
import org.openapitools.client.models.ReposUpdateWebhookRequest
import org.openapitools.client.models.Repository
import org.openapitools.client.models.RepositoryCollaboratorPermission
import org.openapitools.client.models.RepositoryInvitation
import org.openapitools.client.models.RepositoryRuleDetailed
import org.openapitools.client.models.RepositoryRuleset
import org.openapitools.client.models.RuleSuite
import org.openapitools.client.models.RuleSuitesInner
import org.openapitools.client.models.ShortBranch
import org.openapitools.client.models.SimpleUser
import org.openapitools.client.models.Status
import org.openapitools.client.models.StatusCheckPolicy
import org.openapitools.client.models.Tag
import org.openapitools.client.models.TagProtection
import org.openapitools.client.models.Team
import org.openapitools.client.models.Topic
import org.openapitools.client.models.ValidationError
import org.openapitools.client.models.ValidationErrorSimple
import org.openapitools.client.models.ViewTraffic
import org.openapitools.client.models.WebhookConfig

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class ReposApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Accept a repository invitation
        * 
         * @param invitationId The unique identifier of the invitation. 
         * @return void
        */
        open suspend fun reposAcceptInvitationForAuthenticatedUser(invitationId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/user/repository_invitations/{invitation_id}".replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add app access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified apps push access for this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetAppAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Integration>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposAddAppAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetAppAccessRestrictionsRequest: ReposSetAppAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Integration>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetAppAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add a repository collaborator
        * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  Adding an outside collaborator may be restricted by enterprise administrators. For more information, see \&quot;[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories).\&quot;  For more information on permission levels, see \&quot;[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)\&quot;. There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:  &#x60;&#x60;&#x60; Cannot assign {member} permission of {role name} &#x60;&#x60;&#x60;  Note that, if you choose not to pass any parameters, you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;  The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [API](https://docs.github.com/rest/collaborators/invitations).  **Updating an existing collaborator&#39;s permission level**  The endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different &#x60;permission&#x60; parameter. The response will be a &#x60;204&#x60;, with no other indication that the permission level changed.  **Rate limits**  You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @param reposAddCollaboratorRequest  (optional)
         * @return RepositoryInvitation
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposAddCollaborator(owner: kotlin.String, repo: kotlin.String, username: kotlin.String, reposAddCollaboratorRequest: ReposAddCollaboratorRequest?): HttpResponse<RepositoryInvitation> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposAddCollaboratorRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/collaborators/{username}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add status check contexts
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetStatusCheckContextsRequest  (optional)
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposAddStatusCheckContexts(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetStatusCheckContextsRequest: ReposSetStatusCheckContextsRequest?): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetStatusCheckContextsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add team access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified teams push access for this branch. You can also give push access to child teams.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposAddTeamAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposAddTeamAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposAddTeamAccessRestrictionsRequest: ReposAddTeamAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposAddTeamAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Add user access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Grants the specified people push access for this branch.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetUserAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposAddUserAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetUserAccessRestrictionsRequest: ReposSetUserAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetUserAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Cancel a GitHub Pages deployment
        * Cancels a GitHub Pages deployment.  The authenticated user must have write permissions for the GitHub Pages site.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param pagesDeploymentId The ID of the Pages deployment. You can also give the commit SHA of the deployment. 
         * @return void
        */
        open suspend fun reposCancelPagesDeployment(owner: kotlin.String, repo: kotlin.String, pagesDeploymentId: String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "pages_deployment_id" + "}", "$pagesDeploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if automated security fixes are enabled for a repository
        * Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must have admin read access to the repository. For more information, see \&quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return CheckAutomatedSecurityFixes
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCheckAutomatedSecurityFixes(owner: kotlin.String, repo: kotlin.String): HttpResponse<CheckAutomatedSecurityFixes> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/automated-security-fixes".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if a user is a repository collaborator
        * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.  Team members will include the members of child teams.  The authenticated user must have push access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun reposCheckCollaborator(owner: kotlin.String, repo: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/collaborators/{username}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if private vulnerability reporting is enabled for a repository
        * Returns a boolean indicating whether or not private vulnerability reporting is enabled for the repository. For more information, see \&quot;[Evaluating the security settings of a repository](https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/evaluating-the-security-settings-of-a-repository)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ReposCheckPrivateVulnerabilityReporting200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCheckPrivateVulnerabilityReporting(owner: kotlin.String, repo: kotlin.String): HttpResponse<ReposCheckPrivateVulnerabilityReporting200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/private-vulnerability-reporting".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Check if vulnerability alerts are enabled for a repository
        * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposCheckVulnerabilityAlerts(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/vulnerability-alerts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List CODEOWNERS errors
        * List any syntax errors that are detected in the CODEOWNERS file.  For more information about the correct CODEOWNERS syntax, see \&quot;[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository&#39;s default branch (e.g. &#x60;main&#x60;) (optional, default to "push")
         * @return CodeownersErrors
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCodeownersErrors(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String?): HttpResponse<CodeownersErrors> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/codeowners/errors".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Compare two commits
        * Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository&#39;s network, see \&quot;[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories).\&quot;  This endpoint is equivalent to running the &#x60;git log BASE..HEAD&#x60; command, but it returns commits in a different order. The &#x60;git log BASE..HEAD&#x60; command returns commits in reverse chronological order, whereas the API returns commits in chronological order.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.diff&#x60;**: Returns the diff of the commit. - **&#x60;application/vnd.github.patch&#x60;**: Returns the patch of the commit. Diffs with binary data will have no &#x60;patch&#x60; property.  The API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a &#x60;renamed&#x60; status have a &#x60;previous_filename&#x60; field showing the previous filename of the file, and files with a &#x60;modified&#x60; status have a &#x60;patch&#x60; field showing the changes made to the file.  When calling this endpoint without any paging parameter (&#x60;per_page&#x60; or &#x60;page&#x60;), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.  **Working with large comparisons**  To process a response with a large number of commits, use a query parameter (&#x60;per_page&#x60; or &#x60;page&#x60;) to paginate the results. When using pagination:  - The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison. - The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.  For more information on working with pagination, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).\&quot;  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The &#x60;verification&#x60; object includes the following fields:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param basehead The base branch and head branch to compare. This parameter expects the format &#x60;BASE...HEAD&#x60;. Both must be branch names in &#x60;repo&#x60;. To compare with a branch that exists in a different repository in the same network as &#x60;repo&#x60;, the &#x60;basehead&#x60; parameter expects the format &#x60;USERNAME:BASE...USERNAME:HEAD&#x60;. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return CommitComparison
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCompareCommits(owner: kotlin.String, repo: kotlin.String, basehead: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<CommitComparison> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/compare/{basehead}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "basehead" + "}", "$basehead"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an autolink reference for a repository
        * Users with admin access to the repository can create an autolink.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateAutolinkRequest  
         * @return Autolink
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateAutolink(owner: kotlin.String, repo: kotlin.String, reposCreateAutolinkRequest: ReposCreateAutolinkRequest): HttpResponse<Autolink> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateAutolinkRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/autolinks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a commit comment
        * Create a comment for a commit using its &#x60;:commit_sha&#x60;.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commitSha The SHA of the commit. 
         * @param reposCreateCommitCommentRequest  
         * @return CommitComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateCommitComment(owner: kotlin.String, repo: kotlin.String, commitSha: kotlin.String, reposCreateCommitCommentRequest: ReposCreateCommitCommentRequest): HttpResponse<CommitComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateCommitCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/commits/{commit_sha}/comments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "commit_sha" + "}", "$commitSha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create commit signature protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return ProtectedBranchAdminEnforced
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateCommitSignatureProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<ProtectedBranchAdminEnforced> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a commit status
        * Users with push access in a repository can create commit statuses for a given SHA.  Note: there is a limit of 1000 statuses per &#x60;sha&#x60; and &#x60;context&#x60; within a repository. Attempts to create more than 1000 statuses will result in a validation error.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param sha  
         * @param reposCreateCommitStatusRequest  
         * @return Status
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateCommitStatus(owner: kotlin.String, repo: kotlin.String, sha: kotlin.String, reposCreateCommitStatusRequest: ReposCreateCommitStatusRequest): HttpResponse<Status> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateCommitStatusRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/statuses/{sha}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "sha" + "}", "$sha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a deploy key
        * You can create a read-only deploy key.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateDeployKeyRequest  
         * @return DeployKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateDeployKey(owner: kotlin.String, repo: kotlin.String, reposCreateDeployKeyRequest: ReposCreateDeployKeyRequest): HttpResponse<DeployKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateDeployKeyRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/keys".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a deployment
        * Deployments offer a few configurable parameters with certain defaults.  The &#x60;ref&#x60; parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them before we merge a pull request.  The &#x60;environment&#x60; parameter allows deployments to be issued to different runtime environments. Teams often have multiple environments for verifying their applications, such as &#x60;production&#x60;, &#x60;staging&#x60;, and &#x60;qa&#x60;. This parameter makes it easier to track which environments have requested deployments. The default environment is &#x60;production&#x60;.  The &#x60;auto_merge&#x60; parameter is used to ensure that the requested ref is not behind the repository&#39;s default branch. If the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds, the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will return a failure response.  By default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a &#x60;success&#x60; state. The &#x60;required_contexts&#x60; parameter allows you to specify a subset of contexts that must be &#x60;success&#x60;, or to specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do not require any contexts or create any commit statuses, the deployment will always succeed.  The &#x60;payload&#x60; parameter is available for any extra information that a deployment system might need. It is a JSON text field that will be passed on when a deployment event is dispatched.  The &#x60;task&#x60; parameter is used by the deployment system to allow different execution paths. In the web world this might be &#x60;deploy:migrations&#x60; to run schema changes on the system. In the compiled world this could be a flag to compile an application with debugging enabled.  Merged branch response:  You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating a deployment. This auto-merge happens when: *   Auto-merge option is enabled in the repository *   Topic branch does not include the latest changes on the base branch, which is &#x60;master&#x60; in the response example *   There are no merge conflicts  If there are no new commits in the base branch, a new request to create a deployment should give a successful response.  Merge conflict response:  This error happens when the &#x60;auto_merge&#x60; option is enabled and when the default branch (in this case &#x60;master&#x60;), can&#39;t be merged into the branch that&#39;s being deployed (in this case &#x60;topic-branch&#x60;), due to merge conflicts.  Failed commit status checks:  This error happens when the &#x60;required_contexts&#x60; parameter indicates that one or more contexts need to have a &#x60;success&#x60; status for the commit to be deployed, but one or more of the required contexts do not have a state of &#x60;success&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateDeploymentRequest  
         * @return Deployment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateDeployment(owner: kotlin.String, repo: kotlin.String, reposCreateDeploymentRequest: ReposCreateDeploymentRequest): HttpResponse<Deployment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateDeploymentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/deployments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a deployment branch policy
        * Creates a deployment branch or tag policy for an environment.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param deploymentBranchPolicyNamePatternWithType  
         * @return DeploymentBranchPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateDeploymentBranchPolicy(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, deploymentBranchPolicyNamePatternWithType: DeploymentBranchPolicyNamePatternWithType): HttpResponse<DeploymentBranchPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = deploymentBranchPolicyNamePatternWithType

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a custom deployment protection rule on an environment
        * Enable a custom deployment protection rule for an environment.  The authenticated user must have admin or owner permissions to the repository to use this endpoint.  For more information about the app that is providing this custom deployment rule, see the [documentation for the &#x60;GET /apps/{app_slug}&#x60; endpoint](https://docs.github.com/rest/apps/apps#get-an-app).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param reposCreateDeploymentProtectionRuleRequest  
         * @return DeploymentProtectionRule
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateDeploymentProtectionRule(environmentName: kotlin.String, repo: kotlin.String, owner: kotlin.String, reposCreateDeploymentProtectionRuleRequest: ReposCreateDeploymentProtectionRuleRequest): HttpResponse<DeploymentProtectionRule> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateDeploymentProtectionRuleRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules".replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "repo" + "}", "$repo").replace("{" + "owner" + "}", "$owner"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a deployment status
        * Users with &#x60;push&#x60; access can create deployment statuses for a given deployment.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo_deployment&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param deploymentId deployment_id parameter 
         * @param reposCreateDeploymentStatusRequest  
         * @return DeploymentStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateDeploymentStatus(owner: kotlin.String, repo: kotlin.String, deploymentId: kotlin.Int, reposCreateDeploymentStatusRequest: ReposCreateDeploymentStatusRequest): HttpResponse<DeploymentStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateDeploymentStatusRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "deployment_id" + "}", "$deploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository dispatch event
        * You can use this endpoint to trigger a webhook event called &#x60;repository_dispatch&#x60; when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the &#x60;repository_dispatch&#x60; event occurs. For an example &#x60;repository_dispatch&#x60; webhook payload, see \&quot;[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch).\&quot;  The &#x60;client_payload&#x60; parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the &#x60;client_payload&#x60; can include a message that a user would like to send using a GitHub Actions workflow. Or the &#x60;client_payload&#x60; can be used as a test to debug your workflow.  This input example shows how you can use the &#x60;client_payload&#x60; as a test to debug your workflow.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateDispatchEventRequest  
         * @return void
        */
        open suspend fun reposCreateDispatchEvent(owner: kotlin.String, repo: kotlin.String, reposCreateDispatchEventRequest: ReposCreateDispatchEventRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateDispatchEventRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/dispatches".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository for the authenticated user
        * Creates a new repository for the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.
         * @param reposCreateForAuthenticatedUserRequest  
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateForAuthenticatedUser(reposCreateForAuthenticatedUserRequest: ReposCreateForAuthenticatedUserRequest): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateForAuthenticatedUserRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/repos",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a fork
        * Create a fork for the authenticated user.  **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api).  **Note**: Although this endpoint works with GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the source account with access to the source repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateForkRequest  (optional)
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateFork(owner: kotlin.String, repo: kotlin.String, reposCreateForkRequest: ReposCreateForkRequest?): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateForkRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/forks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization repository
        * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.
         * @param org The organization name. The name is not case sensitive. 
         * @param reposCreateInOrgRequest  
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateInOrg(org: kotlin.String, reposCreateInOrgRequest: ReposCreateInOrgRequest): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateInOrgRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/repos".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update custom property values for a repository
        * Create new or update existing custom property values for a repository. Using a value of &#x60;null&#x60; for a custom property will remove or &#39;unset&#39; the property value from the repository.  Repository admins and other users with the repository-level \&quot;edit custom property values\&quot; fine-grained permission can use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateOrUpdateCustomPropertiesValuesRequest  
         * @return void
        */
        open suspend fun reposCreateOrUpdateCustomPropertiesValues(owner: kotlin.String, repo: kotlin.String, reposCreateOrUpdateCustomPropertiesValuesRequest: ReposCreateOrUpdateCustomPropertiesValuesRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateOrUpdateCustomPropertiesValuesRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/properties/values".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update an environment
        * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see \&quot;[Environments](/actions/reference/environments#environment-protection-rules).\&quot;  **Note:** To create or update name patterns that branches must match in order to deploy to this environment, see \&quot;[Deployment branch policies](/rest/deployments/branch-policies).\&quot;  **Note:** To create or update secrets for an environment, see \&quot;[GitHub Actions secrets](/rest/actions/secrets).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param reposCreateOrUpdateEnvironmentRequest  (optional)
         * @return Environment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateOrUpdateEnvironment(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, reposCreateOrUpdateEnvironmentRequest: ReposCreateOrUpdateEnvironmentRequest?): HttpResponse<Environment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateOrUpdateEnvironmentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/environments/{environment_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update file contents
        * Creates a new file or replaces an existing file in a repository.  **Note:** If you use this endpoint and the \&quot;[Delete a file](https://docs.github.com/rest/repos/contents/#delete-a-file)\&quot; endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint. The &#x60;workflow&#x60; scope is also required in order to modify files in the &#x60;.github/workflows&#x60; directory.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param path path parameter 
         * @param reposCreateOrUpdateFileContentsRequest  
         * @return FileCommit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateOrUpdateFileContents(owner: kotlin.String, repo: kotlin.String, path: kotlin.String, reposCreateOrUpdateFileContentsRequest: ReposCreateOrUpdateFileContentsRequest): HttpResponse<FileCommit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateOrUpdateFileContentsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/contents/{path}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "path" + "}", "$path"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create an organization repository ruleset
        * Create a repository ruleset for an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param reposCreateOrgRulesetRequest Request body 
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateOrgRuleset(org: kotlin.String, reposCreateOrgRulesetRequest: ReposCreateOrgRulesetRequest): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateOrgRulesetRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/rulesets".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a GitHub Pages deployment
        * Create a GitHub Pages deployment for a repository.  The authenticated user must have write permission to the repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreatePagesDeploymentRequest  
         * @return PageDeployment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreatePagesDeployment(owner: kotlin.String, repo: kotlin.String, reposCreatePagesDeploymentRequest: ReposCreatePagesDeploymentRequest): HttpResponse<PageDeployment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreatePagesDeploymentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pages/deployments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a GitHub Pages site
        * Configures a GitHub Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\&quot;  The authenticated user must be a repository administrator, maintainer, or have the &#39;manage GitHub Pages settings&#39; permission.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreatePagesSiteRequest  
         * @return Page
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreatePagesSite(owner: kotlin.String, repo: kotlin.String, reposCreatePagesSiteRequest: ReposCreatePagesSiteRequest): HttpResponse<Page> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreatePagesSiteRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pages".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a release
        * Users with push access to the repository can create a release.  This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see \&quot;[Rate limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)\&quot; and \&quot;[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateReleaseRequest  
         * @return Release
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateRelease(owner: kotlin.String, repo: kotlin.String, reposCreateReleaseRequest: ReposCreateReleaseRequest): HttpResponse<Release> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateReleaseRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/releases".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository ruleset
        * Create a ruleset for a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateRepoRulesetRequest Request body 
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateRepoRuleset(owner: kotlin.String, repo: kotlin.String, reposCreateRepoRulesetRequest: ReposCreateRepoRulesetRequest): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateRepoRulesetRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/rulesets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a tag protection state for a repository
        * This creates a tag protection state for a repository. This endpoint is only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateTagProtectionRequest  
         * @return TagProtection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateTagProtection(owner: kotlin.String, repo: kotlin.String, reposCreateTagProtectionRequest: ReposCreateTagProtectionRequest): HttpResponse<TagProtection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateTagProtectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/tags/protection".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository using a template
        * Creates a new repository using a repository template. Use the &#x60;template_owner&#x60; and &#x60;template_repo&#x60; route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository&#39;s information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository) endpoint and check that the &#x60;is_template&#x60; key is &#x60;true&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to create a public repository, and &#x60;repo&#x60; scope to create a private repository.
         * @param templateOwner The account owner of the template repository. The name is not case sensitive. 
         * @param templateRepo The name of the template repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateUsingTemplateRequest  
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateUsingTemplate(templateOwner: kotlin.String, templateRepo: kotlin.String, reposCreateUsingTemplateRequest: ReposCreateUsingTemplateRequest): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateUsingTemplateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{template_owner}/{template_repo}/generate".replace("{" + "template_owner" + "}", "$templateOwner").replace("{" + "template_repo" + "}", "$templateRepo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository webhook
        * Repositories can have multiple webhooks installed. Each webhook should have a unique &#x60;config&#x60;. Multiple webhooks can share the same &#x60;config&#x60; as long as those webhooks do not have any &#x60;events&#x60; that overlap.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposCreateWebhookRequest  (optional)
         * @return Hook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposCreateWebhook(owner: kotlin.String, repo: kotlin.String, reposCreateWebhookRequest: ReposCreateWebhookRequest?): HttpResponse<Hook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposCreateWebhookRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/hooks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Decline a repository invitation
        * 
         * @param invitationId The unique identifier of the invitation. 
         * @return void
        */
        open suspend fun reposDeclineInvitationForAuthenticatedUser(invitationId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/repository_invitations/{invitation_id}".replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository
        * Deleting a repository requires admin access.  If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, you will get a &#x60;403 Forbidden&#x60; response.  OAuth app tokens and personal access tokens (classic) need the &#x60;delete_repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposDelete(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Disables the ability to restrict who can push to this branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposDeleteAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete admin branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposDeleteAdminBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an environment
        * OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @return void
        */
        open suspend fun reposDeleteAnEnvironment(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/environments/{environment_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an autolink reference from a repository
        * This deletes a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param autolinkId The unique identifier of the autolink. 
         * @return void
        */
        open suspend fun reposDeleteAutolink(owner: kotlin.String, repo: kotlin.String, autolinkId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/autolinks/{autolink_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "autolink_id" + "}", "$autolinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposDeleteBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a commit comment
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @return void
        */
        open suspend fun reposDeleteCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/comments/{comment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete commit signature protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposDeleteCommitSignatureProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a deploy key
        * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param keyId The unique identifier of the key. 
         * @return void
        */
        open suspend fun reposDeleteDeployKey(owner: kotlin.String, repo: kotlin.String, keyId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/keys/{key_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "key_id" + "}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a deployment
        * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment.  To set a deployment as inactive, you must:  *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment. *   Mark the active deployment as inactive by adding any non-successful deployment status.  For more information, see \&quot;[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)\&quot; and \&quot;[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repo_deployment&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param deploymentId deployment_id parameter 
         * @return void
        */
        open suspend fun reposDeleteDeployment(owner: kotlin.String, repo: kotlin.String, deploymentId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/deployments/{deployment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "deployment_id" + "}", "$deploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a deployment branch policy
        * Deletes a deployment branch or tag policy for an environment.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param branchPolicyId The unique identifier of the branch policy. 
         * @return void
        */
        open suspend fun reposDeleteDeploymentBranchPolicy(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, branchPolicyId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "branch_policy_id" + "}", "$branchPolicyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a file
        * Deletes a file in a repository.  You can provide an additional &#x60;committer&#x60; parameter, which is an object containing information about the committer. Or, you can provide an &#x60;author&#x60; parameter, which is an object containing information about the author.  The &#x60;author&#x60; section is optional and is filled in with the &#x60;committer&#x60; information if omitted. If the &#x60;committer&#x60; information is omitted, the authenticated user&#39;s information is used.  You must provide values for both &#x60;name&#x60; and &#x60;email&#x60;, whether you choose to use &#x60;author&#x60; or &#x60;committer&#x60;. Otherwise, you&#39;ll receive a &#x60;422&#x60; status code.  **Note:** If you use this endpoint and the \&quot;[Create or update file contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)\&quot; endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param path path parameter 
         * @param reposDeleteFileRequest  
         * @return FileCommit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposDeleteFile(owner: kotlin.String, repo: kotlin.String, path: kotlin.String, reposDeleteFileRequest: ReposDeleteFileRequest): HttpResponse<FileCommit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposDeleteFileRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/contents/{path}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "path" + "}", "$path"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository invitation
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param invitationId The unique identifier of the invitation. 
         * @return void
        */
        open suspend fun reposDeleteInvitation(owner: kotlin.String, repo: kotlin.String, invitationId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/invitations/{invitation_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization repository ruleset
        * Delete a ruleset for an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @return void
        */
        open suspend fun reposDeleteOrgRuleset(org: kotlin.String, rulesetId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/rulesets/{ruleset_id}".replace("{" + "org" + "}", "$org").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a GitHub Pages site
        * Deletes a GitHub Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).  The authenticated user must be a repository administrator, maintainer, or have the &#39;manage GitHub Pages settings&#39; permission.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposDeletePagesSite(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/pages".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete pull request review protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposDeletePullRequestReviewProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a release
        * Users with push access to the repository can delete a release.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @return void
        */
        open suspend fun reposDeleteRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/releases/{release_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a release asset
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param assetId The unique identifier of the asset. 
         * @return void
        */
        open suspend fun reposDeleteReleaseAsset(owner: kotlin.String, repo: kotlin.String, assetId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/releases/assets/{asset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "asset_id" + "}", "$assetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository ruleset
        * Delete a ruleset for a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @return void
        */
        open suspend fun reposDeleteRepoRuleset(owner: kotlin.String, repo: kotlin.String, rulesetId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/rulesets/{ruleset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a tag protection state for a repository
        * This deletes a tag protection state for a repository. This endpoint is only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param tagProtectionId The unique identifier of the tag protection. 
         * @return void
        */
        open suspend fun reposDeleteTagProtection(owner: kotlin.String, repo: kotlin.String, tagProtectionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "tag_protection_id" + "}", "$tagProtectionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository webhook
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return void
        */
        open suspend fun reposDeleteWebhook(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/hooks/{hook_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable automated security fixes
        * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposDisableAutomatedSecurityFixes(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/automated-security-fixes".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable a custom protection rule for an environment
        * Disables a custom deployment protection rule for an environment.  The authenticated user must have admin or owner permissions to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param protectionRuleId The unique identifier of the protection rule. 
         * @return void
        */
        open suspend fun reposDisableDeploymentProtectionRule(environmentName: kotlin.String, repo: kotlin.String, owner: kotlin.String, protectionRuleId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}".replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "repo" + "}", "$repo").replace("{" + "owner" + "}", "$owner").replace("{" + "protection_rule_id" + "}", "$protectionRuleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable private vulnerability reporting for a repository
        * Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposDisablePrivateVulnerabilityReporting(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/private-vulnerability-reporting".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Disable vulnerability alerts
        * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposDisableVulnerabilityAlerts(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/vulnerability-alerts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download a repository archive (tar)
        * Gets a redirect URL to download a tar archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;main&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request. **Note**: For private repositories, these links are temporary and expire after five minutes.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref  
         * @return void
        */
        open suspend fun reposDownloadTarballArchive(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/tarball/{ref}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Download a repository archive (zip)
        * Gets a redirect URL to download a zip archive for a repository. If you omit &#x60;:ref&#x60;, the repository’s default branch (usually &#x60;main&#x60;) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use the &#x60;Location&#x60; header to make a second &#x60;GET&#x60; request.  **Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref  
         * @return void
        */
        open suspend fun reposDownloadZipballArchive(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/zipball/{ref}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable automated security fixes
        * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposEnableAutomatedSecurityFixes(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/automated-security-fixes".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable private vulnerability reporting for a repository
        * Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposEnablePrivateVulnerabilityReporting(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/private-vulnerability-reporting".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Enable vulnerability alerts
        * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see \&quot;[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return void
        */
        open suspend fun reposEnableVulnerabilityAlerts(owner: kotlin.String, repo: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/vulnerability-alerts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Generate release notes content for a release
        * Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposGenerateReleaseNotesRequest  
         * @return ReleaseNotesContent
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGenerateReleaseNotes(owner: kotlin.String, repo: kotlin.String, reposGenerateReleaseNotesRequest: ReposGenerateReleaseNotesRequest): HttpResponse<ReleaseNotesContent> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposGenerateReleaseNotesRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/releases/generate-notes".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository
        * The &#x60;parent&#x60; and &#x60;source&#x60; objects are present when the repository is a fork. &#x60;parent&#x60; is the repository this repository was forked from, &#x60;source&#x60; is the ultimate source for the network.  **Note:** In order to see the &#x60;security_and_analysis&#x60; block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGet(owner: kotlin.String, repo: kotlin.String): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists who has access to this protected branch.  **Note**: Users, apps, and teams &#x60;restrictions&#x60; are only available for organization-owned repositories.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return BranchRestrictionPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<BranchRestrictionPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get admin branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return ProtectedBranchAdminEnforced
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAdminBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<ProtectedBranchAdminEnforced> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all deployment protection rules for an environment
        * Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  For more information about the app that is providing this custom deployment rule, see the [documentation for the &#x60;GET /apps/{app_slug}&#x60; endpoint](https://docs.github.com/rest/apps/apps#get-an-app).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @return ReposGetAllDeploymentProtectionRules200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAllDeploymentProtectionRules(environmentName: kotlin.String, repo: kotlin.String, owner: kotlin.String): HttpResponse<ReposGetAllDeploymentProtectionRules200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules".replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "repo" + "}", "$repo").replace("{" + "owner" + "}", "$owner"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List environments
        * Lists the environments for a repository.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ReposGetAllEnvironments200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAllEnvironments(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ReposGetAllEnvironments200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all status check contexts
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAllStatusCheckContexts(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all repository topics
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return Topic
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAllTopics(owner: kotlin.String, repo: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<Topic> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/topics".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get apps with access to the protected branch
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return kotlin.collections.List<Integration>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAppsWithAccessToProtectedBranch(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<kotlin.collections.List<Integration>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an autolink reference of a repository
        * This returns a single autolink reference by ID that was configured for the given repository.  Information about autolinks are only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param autolinkId The unique identifier of the autolink. 
         * @return Autolink
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetAutolink(owner: kotlin.String, repo: kotlin.String, autolinkId: kotlin.Int): HttpResponse<Autolink> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/autolinks/{autolink_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "autolink_id" + "}", "$autolinkId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a branch
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return BranchWithProtection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetBranch(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<BranchWithProtection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return BranchProtection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<BranchProtection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get rules for a branch
        * Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would apply to a branch with that name will be returned. All active rules that apply will be returned, regardless of the level at which they are configured (e.g. repository or organization). Rules in rulesets with \&quot;evaluate\&quot; or \&quot;disabled\&quot; enforcement statuses are not returned.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RepositoryRuleDetailed>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetBranchRules(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RepositoryRuleDetailed>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/rules/branches/{branch}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get repository clones
        * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param per The time frame to display results for. (optional, default to day)
         * @return CloneTraffic
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetClones(owner: kotlin.String, repo: kotlin.String, per: kotlin.String?): HttpResponse<CloneTraffic> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            per?.apply { localVariableQuery["per"] = listOf("$per") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/traffic/clones".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the weekly commit activity
        *  Returns a weekly aggregate of the number of additions and deletions pushed to a repository.  **Note:** This endpoint can only be used for repositories with fewer than 10,000 commits. If the repository contains 10,000 or more commits, a 422 status code will be returned. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<kotlin.collections.List<kotlin.Int>>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCodeFrequencyStats(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.collections.List<kotlin.Int>>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/stats/code_frequency".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get repository permissions for a user
        * Checks the repository permission of a collaborator. The possible repository permissions are &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;.  *Note*: The &#x60;permission&#x60; attribute provides the legacy base roles of &#x60;admin&#x60;, &#x60;write&#x60;, &#x60;read&#x60;, and &#x60;none&#x60;, where the &#x60;maintain&#x60; role is mapped to &#x60;write&#x60; and the &#x60;triage&#x60; role is mapped to &#x60;read&#x60;. To determine the role assigned to the collaborator, see the &#x60;role_name&#x60; attribute, which will provide the full role name, including custom roles. The &#x60;permissions&#x60; hash can also be used to determine which base level of access the collaborator has to the repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return RepositoryCollaboratorPermission
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCollaboratorPermissionLevel(owner: kotlin.String, repo: kotlin.String, username: kotlin.String): HttpResponse<RepositoryCollaboratorPermission> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/collaborators/{username}/permission".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the combined status for a specific reference
        * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.   Additionally, a combined &#x60;state&#x60; is returned. The &#x60;state&#x60; is one of:  *   **failure** if any of the contexts report as &#x60;error&#x60; or &#x60;failure&#x60; *   **pending** if there are no statuses or a context is &#x60;pending&#x60; *   **success** if the latest status for all contexts is &#x60;success&#x60;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The commit reference. Can be a commit SHA, branch name (&#x60;heads/BRANCH_NAME&#x60;), or tag name (&#x60;tags/TAG_NAME&#x60;). For more information, see \&quot;[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\&quot; in the Git documentation. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return CombinedCommitStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCombinedStatusForRef(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<CombinedCommitStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{ref}/status".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a commit
        * Returns the contents of a single commit reference. You must have &#x60;read&#x60; access for the repository to use this endpoint.  **Note:** If there are more than 300 files in the commit diff and the default JSON media type is requested, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot; Pagination query parameters are not supported for these media types.  - **&#x60;application/vnd.github.diff&#x60;**: Returns the diff of the commit. Larger diffs may time out and return a 5xx status code. - **&#x60;application/vnd.github.patch&#x60;**: Returns the patch of the commit. Diffs with binary data will have no &#x60;patch&#x60; property. Larger diffs may time out and return a 5xx status code. - **&#x60;application/vnd.github.sha&#x60;**: Returns the commit&#39;s SHA-1 hash. You can use this endpoint to check if a remote reference&#39;s SHA-1 hash is the same as your local reference&#39;s SHA-1 hash by providing the local SHA-1 reference as the ETag.  **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The commit reference. Can be a commit SHA, branch name (&#x60;heads/BRANCH_NAME&#x60;), or tag name (&#x60;tags/TAG_NAME&#x60;). For more information, see \&quot;[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\&quot; in the Git documentation. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return Commit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCommit(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<Commit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{ref}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the last year of commit activity
        * Returns the last year of commit activity grouped by week. The &#x60;days&#x60; array is a group of commits per day, starting on &#x60;Sunday&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<CommitActivity>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCommitActivityStats(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<CommitActivity>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/stats/commit_activity".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a commit comment
        * Gets a specified commit comment.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @return CommitComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int): HttpResponse<CommitComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/comments/{comment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get commit signature protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of &#x60;true&#x60; indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.  **Note**: You must enable branch protection to require signed commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return ProtectedBranchAdminEnforced
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCommitSignatureProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<ProtectedBranchAdminEnforced> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get community profile metrics
        * Returns all community profile metrics for a repository. The repository cannot be a fork.  The returned metrics include an overall health score, the repository description, the presence of documentation, the detected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE, README, and CONTRIBUTING files.  The &#x60;health_percentage&#x60; score is defined as a percentage of how many of the recommended community health files are present. For more information, see \&quot;[About community profiles for public repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories).\&quot;  &#x60;content_reports_enabled&#x60; is only returned for organization-owned repositories.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return CommunityProfile
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCommunityProfileMetrics(owner: kotlin.String, repo: kotlin.String): HttpResponse<CommunityProfile> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/community/profile".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get repository content
        * Gets the contents of a file or directory in a repository. Specify the file path or directory with the &#x60;path&#x60; parameter. If you omit the &#x60;path&#x60; parameter, you will receive the contents of the repository&#39;s root directory.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents for files and symlinks. - **&#x60;application/vnd.github.html+json&#x60;**: Returns the file contents in HTML. Markup languages are rendered to HTML using GitHub&#39;s open-source [Markup library](https://github.com/github/markup). - **&#x60;application/vnd.github.object+json&#x60;**: Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of objects for a directory, the response will be an object with an &#x60;entries&#x60; attribute containing the array of objects.  If the content is a directory, the response will be an array of objects, one object for each item in the directory. When listing the contents of a directory, submodules have their \&quot;type\&quot; specified as \&quot;file\&quot;. Logically, the value _should_ be \&quot;submodule\&quot;. This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major version of the API, the type will be returned as \&quot;submodule\&quot;.  If the content is a symlink and the symlink&#39;s target is a normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an object describing the symlink itself.  If the content is a submodule, the &#x60;submodule_git_url&#x60; field identifies the location of the submodule repository, and the &#x60;sha&#x60; identifies a specific commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the submodule repository is not hosted on github.com, the Git URLs (&#x60;git_url&#x60; and &#x60;_links[\&quot;git\&quot;]&#x60;) and the github.com URLs (&#x60;html_url&#x60; and &#x60;_links[\&quot;html\&quot;]&#x60;) will have null values.  **Notes**:  - To get a repository&#39;s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree). - This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees API](https://docs.github.com/rest/git/trees#get-a-tree). - Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download. - If the requested file&#39;s size is:   - 1 MB or smaller: All features of this endpoint are supported.   - Between 1-100 MB: Only the &#x60;raw&#x60; or &#x60;object&#x60; custom media types are supported. Both will work as normal, except that when using the &#x60;object&#x60; media type, the &#x60;content&#x60; field will be an empty string and the &#x60;encoding&#x60; field will be &#x60;\&quot;none\&quot;&#x60;. To get the contents of these larger files, use the &#x60;raw&#x60; media type.   - Greater than 100 MB: This endpoint is not supported.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param path path parameter 
         * @param ref The name of the commit/branch/tag. Default: the repository’s default branch. (optional, default to "push")
         * @return ContentTree
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetContent(owner: kotlin.String, repo: kotlin.String, path: kotlin.String, ref: kotlin.String?): HttpResponse<ContentTree> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/contents/{path}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "path" + "}", "$path"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all contributor commit activity
        *  Returns the &#x60;total&#x60; number of commits authored by the contributor. In addition, the response includes a Weekly Hash (&#x60;weeks&#x60; array) with the following information:  *   &#x60;w&#x60; - Start of the week, given as a [Unix timestamp](https://en.wikipedia.org/wiki/Unix_time). *   &#x60;a&#x60; - Number of additions *   &#x60;d&#x60; - Number of deletions *   &#x60;c&#x60; - Number of commits  **Note:** This endpoint will return &#x60;0&#x60; values for all addition and deletion counts in repositories with 10,000 or more commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<ContributorActivity>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetContributorsStats(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<ContributorActivity>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/stats/contributors".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a custom deployment protection rule
        * Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use this endpoint. For more information about environments, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  For more information about the app that is providing this custom deployment rule, see [&#x60;GET /apps/{app_slug}&#x60;](https://docs.github.com/rest/apps/apps#get-an-app).  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param protectionRuleId The unique identifier of the protection rule. 
         * @return DeploymentProtectionRule
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCustomDeploymentProtectionRule(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, protectionRuleId: kotlin.Int): HttpResponse<DeploymentProtectionRule> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "protection_rule_id" + "}", "$protectionRuleId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all custom property values for a repository
        * Gets all custom property values that are set for a repository. Users with read access to the repository can use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<CustomPropertyValue>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetCustomPropertiesValues(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<CustomPropertyValue>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/properties/values".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a deploy key
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param keyId The unique identifier of the key. 
         * @return DeployKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetDeployKey(owner: kotlin.String, repo: kotlin.String, keyId: kotlin.Int): HttpResponse<DeployKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/keys/{key_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "key_id" + "}", "$keyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a deployment
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param deploymentId deployment_id parameter 
         * @return Deployment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetDeployment(owner: kotlin.String, repo: kotlin.String, deploymentId: kotlin.Int): HttpResponse<Deployment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/deployments/{deployment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "deployment_id" + "}", "$deploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a deployment branch policy
        * Gets a deployment branch or tag policy for an environment.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param branchPolicyId The unique identifier of the branch policy. 
         * @return DeploymentBranchPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetDeploymentBranchPolicy(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, branchPolicyId: kotlin.Int): HttpResponse<DeploymentBranchPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "branch_policy_id" + "}", "$branchPolicyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a deployment status
        * Users with pull access can view a deployment status for a deployment:
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param deploymentId deployment_id parameter 
         * @param statusId  
         * @return DeploymentStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetDeploymentStatus(owner: kotlin.String, repo: kotlin.String, deploymentId: kotlin.Int, statusId: kotlin.Int): HttpResponse<DeploymentStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "deployment_id" + "}", "$deploymentId").replace("{" + "status_id" + "}", "$statusId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an environment
        * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see \&quot;[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy).\&quot;  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @return Environment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetEnvironment(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String): HttpResponse<Environment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get latest Pages build
        * Gets information about the single most recent build of a GitHub Pages site.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return PageBuild
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetLatestPagesBuild(owner: kotlin.String, repo: kotlin.String): HttpResponse<PageBuild> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages/builds/latest".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the latest release
        * View the latest published full release for the repository.  The latest release is the most recent non-prerelease, non-draft release, sorted by the &#x60;created_at&#x60; attribute. The &#x60;created_at&#x60; attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return Release
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetLatestRelease(owner: kotlin.String, repo: kotlin.String): HttpResponse<Release> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/latest".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization rule suite
        * Gets information about a suite of rule evaluations from within an organization. For more information, see \&quot;[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param ruleSuiteId The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites) for organizations. 
         * @return RuleSuite
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetOrgRuleSuite(org: kotlin.String, ruleSuiteId: kotlin.Int): HttpResponse<RuleSuite> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}".replace("{" + "org" + "}", "$org").replace("{" + "rule_suite_id" + "}", "$ruleSuiteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization rule suites
        * Lists suites of rule evaluations at the organization level. For more information, see \&quot;[Managing rulesets for repositories in your organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param repositoryName The name of the repository to filter on. When specified, only rule evaluations from this repository will be returned. (optional)
         * @param timePeriod The time period to filter by.  For example, &#x60;day&#x60; will filter for rule suites that occurred in the past 24 hours, and &#x60;week&#x60; will filter for insights that occurred in the past 7 days (168 hours). (optional, default to day)
         * @param actorName The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. (optional)
         * @param ruleSuiteResult The rule results to filter on. When specified, only suites with this result will be returned. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RuleSuitesInner>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetOrgRuleSuites(org: kotlin.String, repositoryName: kotlin.Int?, timePeriod: kotlin.String?, actorName: kotlin.String?, ruleSuiteResult: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RuleSuitesInner>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            repositoryName?.apply { localVariableQuery["repository_name"] = listOf("$repositoryName") }
            timePeriod?.apply { localVariableQuery["time_period"] = listOf("$timePeriod") }
            actorName?.apply { localVariableQuery["actor_name"] = listOf("$actorName") }
            ruleSuiteResult?.apply { localVariableQuery["rule_suite_result"] = listOf("$ruleSuiteResult") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/rulesets/rule-suites".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization repository ruleset
        * Get a repository ruleset for an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetOrgRuleset(org: kotlin.String, rulesetId: kotlin.Int): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/rulesets/{ruleset_id}".replace("{" + "org" + "}", "$org").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all organization repository rulesets
        * Get all the repository rulesets for an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RepositoryRuleset>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetOrgRulesets(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RepositoryRuleset>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/rulesets".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a GitHub Pages site
        * Gets information about a GitHub Pages site.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return Page
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPages(owner: kotlin.String, repo: kotlin.String): HttpResponse<Page> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get GitHub Pages build
        * Gets information about a GitHub Pages build.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param buildId  
         * @return PageBuild
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPagesBuild(owner: kotlin.String, repo: kotlin.String, buildId: kotlin.Int): HttpResponse<PageBuild> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages/builds/{build_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "build_id" + "}", "$buildId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the status of a GitHub Pages deployment
        * Gets the current status of a GitHub Pages deployment.  The authenticated user must have read permission for the GitHub Pages site.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param pagesDeploymentId The ID of the Pages deployment. You can also give the commit SHA of the deployment. 
         * @return PagesDeploymentStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPagesDeployment(owner: kotlin.String, repo: kotlin.String, pagesDeploymentId: String): HttpResponse<PagesDeploymentStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "pages_deployment_id" + "}", "$pagesDeploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a DNS health check for GitHub Pages
        * Gets a health check of the DNS settings for the &#x60;CNAME&#x60; record configured for a repository&#39;s GitHub Pages.  The first request to this endpoint returns a &#x60;202 Accepted&#x60; status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a &#x60;200 OK&#x60; status with the health check results in the response.  The authenticated user must be a repository administrator, maintainer, or have the &#39;manage GitHub Pages settings&#39; permission to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return PagesHealthCheck
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPagesHealthCheck(owner: kotlin.String, repo: kotlin.String): HttpResponse<PagesHealthCheck> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages/health".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the weekly commit count
        * Returns the total commit counts for the &#x60;owner&#x60; and total commit counts in &#x60;all&#x60;. &#x60;all&#x60; is everyone combined, including the &#x60;owner&#x60; in the last 52 weeks. If you&#39;d like to get the commit counts for non-owners, you can subtract &#x60;owner&#x60; from &#x60;all&#x60;.  The array order is oldest week (index 0) to most recent week.  The most recent week is seven days ago at UTC midnight to today at UTC midnight.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return ParticipationStats
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetParticipationStats(owner: kotlin.String, repo: kotlin.String): HttpResponse<ParticipationStats> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/stats/participation".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get pull request review protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return ProtectedBranchPullRequestReview
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPullRequestReviewProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<ProtectedBranchPullRequestReview> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the hourly commit count for each day
        * Each array contains the day number, hour number, and number of commits:  *   &#x60;0-6&#x60;: Sunday - Saturday *   &#x60;0-23&#x60;: Hour of day *   Number of commits  For example, &#x60;[2, 14, 25]&#x60; indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<kotlin.collections.List<kotlin.Int>>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetPunchCardStats(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<kotlin.collections.List<kotlin.Int>>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/stats/punch_card".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository README
        * Gets the preferred README for a repository.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents. This is the default if you do not specify a media type. - **&#x60;application/vnd.github.html+json&#x60;**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&#39;s open-source [Markup library](https://github.com/github/markup).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The name of the commit/branch/tag. Default: the repository’s default branch. (optional)
         * @return ContentFile
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetReadme(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String?): HttpResponse<ContentFile> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/readme".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository README for a directory
        * Gets the README from a repository directory.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw file contents. This is the default if you do not specify a media type. - **&#x60;application/vnd.github.html+json&#x60;**: Returns the README in HTML. Markup languages are rendered to HTML using GitHub&#39;s open-source [Markup library](https://github.com/github/markup).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param dir The alternate path to look for a README file 
         * @param ref The name of the commit/branch/tag. Default: the repository’s default branch. (optional)
         * @return ContentFile
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetReadmeInDirectory(owner: kotlin.String, repo: kotlin.String, dir: kotlin.String, ref: kotlin.String?): HttpResponse<ContentFile> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/readme/{dir}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "dir" + "}", "$dir"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a release
        * Gets a public release with the specified release ID.  **Note:** This returns an &#x60;upload_url&#x60; key corresponding to the endpoint for uploading release assets. This key is a hypermedia resource. For more information, see \&quot;[Getting started with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @return Release
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int): HttpResponse<Release> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/{release_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a release asset
        * To download the asset&#39;s binary content, set the &#x60;Accept&#x60; header of the request to [&#x60;application/octet-stream&#x60;](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a &#x60;200&#x60; or &#x60;302&#x60; response.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param assetId The unique identifier of the asset. 
         * @return ReleaseAsset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetReleaseAsset(owner: kotlin.String, repo: kotlin.String, assetId: kotlin.Int): HttpResponse<ReleaseAsset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/assets/{asset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "asset_id" + "}", "$assetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a release by tag name
        * Get a published release with the specified tag.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param tag tag parameter 
         * @return Release
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetReleaseByTag(owner: kotlin.String, repo: kotlin.String, tag: kotlin.String): HttpResponse<Release> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/tags/{tag}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "tag" + "}", "$tag"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository rule suite
        * Gets information about a suite of rule evaluations from within a repository. For more information, see \&quot;[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ruleSuiteId The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites) for organizations. 
         * @return RuleSuite
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetRepoRuleSuite(owner: kotlin.String, repo: kotlin.String, ruleSuiteId: kotlin.Int): HttpResponse<RuleSuite> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "rule_suite_id" + "}", "$ruleSuiteId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository rule suites
        * Lists suites of rule evaluations at the repository level. For more information, see \&quot;[Managing rulesets for a repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The name of the ref. Cannot contain wildcard characters. When specified, only rule evaluations triggered for this ref will be returned. (optional)
         * @param timePeriod The time period to filter by.  For example, &#x60;day&#x60; will filter for rule suites that occurred in the past 24 hours, and &#x60;week&#x60; will filter for insights that occurred in the past 7 days (168 hours). (optional, default to day)
         * @param actorName The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned. (optional)
         * @param ruleSuiteResult The rule results to filter on. When specified, only suites with this result will be returned. (optional, default to all)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RuleSuitesInner>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetRepoRuleSuites(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String?, timePeriod: kotlin.String?, actorName: kotlin.String?, ruleSuiteResult: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RuleSuitesInner>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            timePeriod?.apply { localVariableQuery["time_period"] = listOf("$timePeriod") }
            actorName?.apply { localVariableQuery["actor_name"] = listOf("$actorName") }
            ruleSuiteResult?.apply { localVariableQuery["rule_suite_result"] = listOf("$ruleSuiteResult") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/rulesets/rule-suites".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository ruleset
        * Get a ruleset for a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @param includesParents Include rulesets configured at higher levels that apply to this repository (optional, default to true)
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetRepoRuleset(owner: kotlin.String, repo: kotlin.String, rulesetId: kotlin.Int, includesParents: kotlin.Boolean?): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            includesParents?.apply { localVariableQuery["includes_parents"] = listOf("$includesParents") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/rulesets/{ruleset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all repository rulesets
        * Get all the rulesets for a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param includesParents Include rulesets configured at higher levels that apply to this repository (optional, default to true)
         * @return kotlin.collections.List<RepositoryRuleset>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetRepoRulesets(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?, includesParents: kotlin.Boolean?): HttpResponse<kotlin.collections.List<RepositoryRuleset>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            includesParents?.apply { localVariableQuery["includes_parents"] = listOf("$includesParents") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/rulesets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get status checks protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return StatusCheckPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetStatusChecksProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<StatusCheckPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get teams with access to the protected branch
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the teams who have push access to this branch. The list includes child teams.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetTeamsWithAccessToProtectedBranch(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get top referral paths
        * Get the top 10 popular contents over the last 14 days.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<ContentTraffic>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetTopPaths(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<ContentTraffic>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/traffic/popular/paths".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get top referral sources
        * Get the top 10 referrers over the last 14 days.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<ReferrerTraffic>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetTopReferrers(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<ReferrerTraffic>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/traffic/popular/referrers".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get users with access to the protected branch
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Lists the people who have push access to this branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetUsersWithAccessToProtectedBranch(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get page views
        * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param per The time frame to display results for. (optional, default to day)
         * @return ViewTraffic
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetViews(owner: kotlin.String, repo: kotlin.String, per: kotlin.String?): HttpResponse<ViewTraffic> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            per?.apply { localVariableQuery["per"] = listOf("$per") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/traffic/views".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository webhook
        * Returns a webhook configured in a repository. To get only the webhook &#x60;config&#x60; properties, see \&quot;[Get a webhook configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return Hook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetWebhook(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int): HttpResponse<Hook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/hooks/{hook_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a webhook configuration for a repository
        * Returns the webhook configuration for a repository. To get more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:repo_hook&#x60; or &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return WebhookConfig
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetWebhookConfigForRepo(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int): HttpResponse<WebhookConfig> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/hooks/{hook_id}/config".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a delivery for a repository webhook
        * Returns a delivery for a webhook configured in a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param deliveryId  
         * @return HookDelivery
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposGetWebhookDelivery(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): HttpResponse<HookDelivery> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId").replace("{" + "delivery_id" + "}", "$deliveryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository activities
        * Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and associates these changes with commits and users.  For more information about viewing repository activity, see \&quot;[Viewing activity and data for your repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param ref The Git reference for the activities you want to list.  The &#x60;ref&#x60; for a branch can be formatted either as &#x60;refs/heads/BRANCH_NAME&#x60; or &#x60;BRANCH_NAME&#x60;, where &#x60;BRANCH_NAME&#x60; is the name of your branch. (optional, default to "push")
         * @param actor The GitHub username to use to filter by the actor who performed the activity. (optional, default to "push")
         * @param timePeriod The time period to filter by.  For example, &#x60;day&#x60; will filter for activity that occurred in the past 24 hours, and &#x60;week&#x60; will filter for activity that occurred in the past 7 days (168 hours). (optional)
         * @param activityType The activity type to filter by.  For example, you can choose to filter by \&quot;force_push\&quot;, to see all force pushes to the repository. (optional)
         * @return kotlin.collections.List<Activity>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListActivities(owner: kotlin.String, repo: kotlin.String, direction: kotlin.String?, perPage: kotlin.Int?, before: kotlin.String?, after: kotlin.String?, ref: kotlin.String?, actor: kotlin.String?, timePeriod: kotlin.String?, activityType: kotlin.String?): HttpResponse<kotlin.collections.List<Activity>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            actor?.apply { localVariableQuery["actor"] = listOf("$actor") }
            timePeriod?.apply { localVariableQuery["time_period"] = listOf("$timePeriod") }
            activityType?.apply { localVariableQuery["activity_type"] = listOf("$activityType") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/activity".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get all autolinks of a repository
        * Gets all autolinks that are configured for a repository.  Information about autolinks are only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<Autolink>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListAutolinks(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<Autolink>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/autolinks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List branches
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param `protected` Setting to &#x60;true&#x60; returns only protected branches. When set to &#x60;false&#x60;, only unprotected branches are returned. Omitting this parameter returns all branches. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<ShortBranch>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListBranches(owner: kotlin.String, repo: kotlin.String, `protected`: kotlin.Boolean?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<ShortBranch>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            `protected`?.apply { localVariableQuery["protected"] = listOf("$`protected`") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/branches".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List branches for HEAD commit
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commitSha The SHA of the commit. 
         * @return kotlin.collections.List<BranchShort>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListBranchesForHeadCommit(owner: kotlin.String, repo: kotlin.String, commitSha: kotlin.String): HttpResponse<kotlin.collections.List<BranchShort>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "commit_sha" + "}", "$commitSha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository collaborators
        * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. Organization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.  Team members will include the members of child teams.  The authenticated user must have push access to the repository to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:org&#x60; and &#x60;repo&#x60; scopes to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param affiliation Filter collaborators returned by their affiliation. &#x60;outside&#x60; means all outside collaborators of an organization-owned repository. &#x60;direct&#x60; means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. &#x60;all&#x60; means all collaborators the authenticated user can see. (optional, default to all)
         * @param permission Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Collaborator>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCollaborators(owner: kotlin.String, repo: kotlin.String, affiliation: kotlin.String?, permission: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Collaborator>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            affiliation?.apply { localVariableQuery["affiliation"] = listOf("$affiliation") }
            permission?.apply { localVariableQuery["permission"] = listOf("$permission") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/collaborators".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List commit comments
        * Lists the comments for a specified commit.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commitSha The SHA of the commit. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<CommitComment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCommentsForCommit(owner: kotlin.String, repo: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<CommitComment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{commit_sha}/comments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "commit_sha" + "}", "$commitSha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List commit comments for a repository
        * Lists the commit comments for a specified repository. Comments are ordered by ascending ID.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<CommitComment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCommitCommentsForRepo(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<CommitComment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/comments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List commit statuses for a reference
        * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.  This resource is also available via a legacy route: &#x60;GET /repos/:owner/:repo/statuses/:ref&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ref The commit reference. Can be a commit SHA, branch name (&#x60;heads/BRANCH_NAME&#x60;), or tag name (&#x60;tags/TAG_NAME&#x60;). For more information, see \&quot;[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\&quot; in the Git documentation. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Status>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCommitStatusesForRef(owner: kotlin.String, repo: kotlin.String, ref: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Status>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{ref}/statuses".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ref" + "}", "$ref"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List commits
        * **Signature verification object**  The response will include a &#x60;verification&#x60; object that describes the result of verifying the commit&#39;s signature. The following fields are included in the &#x60;verification&#x60; object:  | Name | Type | Description | | ---- | ---- | ----------- | | &#x60;verified&#x60; | &#x60;boolean&#x60; | Indicates whether GitHub considers the signature in this commit to be verified. | | &#x60;reason&#x60; | &#x60;string&#x60; | The reason for verified value. Possible values and their meanings are enumerated in table below. | | &#x60;signature&#x60; | &#x60;string&#x60; | The signature that was extracted from the commit. | | &#x60;payload&#x60; | &#x60;string&#x60; | The value that was signed. |  These are the possible values for &#x60;reason&#x60; in the &#x60;verification&#x60; object:  | Value | Description | | ----- | ----------- | | &#x60;expired_key&#x60; | The key that made the signature is expired. | | &#x60;not_signing_key&#x60; | The \&quot;signing\&quot; flag is not among the usage flags in the GPG key that made the signature. | | &#x60;gpgverify_error&#x60; | There was an error communicating with the signature verification service. | | &#x60;gpgverify_unavailable&#x60; | The signature verification service is currently unavailable. | | &#x60;unsigned&#x60; | The object does not include a signature. | | &#x60;unknown_signature_type&#x60; | A non-PGP signature was found in the commit. | | &#x60;no_user&#x60; | No user was associated with the &#x60;committer&#x60; email address in the commit. | | &#x60;unverified_email&#x60; | The &#x60;committer&#x60; email address in the commit was associated with a user, but the email address is not verified on their account. | | &#x60;bad_email&#x60; | The &#x60;committer&#x60; email address in the commit is not included in the identities of the PGP key that made the signature. | | &#x60;unknown_key&#x60; | The key that made the signature has not been registered with any user&#39;s account. | | &#x60;malformed_signature&#x60; | There was an error parsing the signature. | | &#x60;invalid&#x60; | The signature could not be cryptographically verified using the key whose key-id was found in the signature. | | &#x60;valid&#x60; | None of the above errors applied, so the signature is considered to be verified. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param sha SHA or branch to start listing commits from. Default: the repository’s default branch (usually &#x60;main&#x60;). (optional, default to "push")
         * @param path Only commits containing this file path will be returned. (optional, default to "push")
         * @param author GitHub username or email address to use to filter by commit author. (optional, default to "push")
         * @param committer GitHub username or email address to use to filter by commit committer. (optional, default to "push")
         * @param since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param until Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Commit>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCommits(owner: kotlin.String, repo: kotlin.String, sha: kotlin.String?, path: kotlin.String?, author: kotlin.String?, committer: kotlin.String?, since: kotlinx.datetime.Instant?, until: kotlinx.datetime.Instant?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Commit>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            sha?.apply { localVariableQuery["sha"] = listOf("$sha") }
            path?.apply { localVariableQuery["path"] = listOf("$path") }
            author?.apply { localVariableQuery["author"] = listOf("$author") }
            committer?.apply { localVariableQuery["committer"] = listOf("$committer") }
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            until?.apply { localVariableQuery["until"] = listOf("$until") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository contributors
        * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.  GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param anon Set to &#x60;1&#x60; or &#x60;true&#x60; to include anonymous contributors in results. (optional, default to "push")
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Contributor>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListContributors(owner: kotlin.String, repo: kotlin.String, anon: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Contributor>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            anon?.apply { localVariableQuery["anon"] = listOf("$anon") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/contributors".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List custom deployment rule integrations available for an environment
        * Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access to the repository can use this endpoint.  For more information about environments, see \&quot;[Using environments for deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment).\&quot;  For more information about the app that is providing this custom deployment rule, see \&quot;[GET an app](https://docs.github.com/rest/apps/apps#get-an-app)\&quot;.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return ReposListCustomDeploymentRuleIntegrations200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListCustomDeploymentRuleIntegrations(environmentName: kotlin.String, repo: kotlin.String, owner: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<ReposListCustomDeploymentRuleIntegrations200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps".replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "repo" + "}", "$repo").replace("{" + "owner" + "}", "$owner"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deploy keys
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<DeployKey>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListDeployKeys(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<DeployKey>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/keys".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deployment branch policies
        * Lists the deployment branch policies for an environment.  Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return ReposListDeploymentBranchPolicies200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListDeploymentBranchPolicies(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<ReposListDeploymentBranchPolicies200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deployment statuses
        * Users with pull access can view deployment statuses for a deployment:
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param deploymentId deployment_id parameter 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<DeploymentStatus>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListDeploymentStatuses(owner: kotlin.String, repo: kotlin.String, deploymentId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<DeploymentStatus>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "deployment_id" + "}", "$deploymentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deployments
        * Simple filtering of deployments is available via query parameters:
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param sha The SHA recorded at creation time. (optional, default to "none")
         * @param ref The name of the ref. This can be a branch, tag, or SHA. (optional, default to "none")
         * @param task The name of the task for the deployment (e.g., &#x60;deploy&#x60; or &#x60;deploy:migrations&#x60;). (optional, default to "none")
         * @param environment The name of the environment that was deployed to (e.g., &#x60;staging&#x60; or &#x60;production&#x60;). (optional, default to "none")
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Deployment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListDeployments(owner: kotlin.String, repo: kotlin.String, sha: kotlin.String?, ref: kotlin.String?, task: kotlin.String?, environment: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Deployment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            sha?.apply { localVariableQuery["sha"] = listOf("$sha") }
            ref?.apply { localVariableQuery["ref"] = listOf("$ref") }
            task?.apply { localVariableQuery["task"] = listOf("$task") }
            environment?.apply { localVariableQuery["environment"] = listOf("$environment") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/deployments".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repositories for the authenticated user
        * Lists repositories that the authenticated user has explicit permission (&#x60;:read&#x60;, &#x60;:write&#x60;, or &#x60;:admin&#x60;) to access.  The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
         * @param visibility Limit results to repositories with the specified visibility. (optional, default to all)
         * @param affiliation Comma-separated list of values. Can include:    * &#x60;owner&#x60;: Repositories that are owned by the authenticated user.    * &#x60;collaborator&#x60;: Repositories that the user has been added to as a collaborator.    * &#x60;organization_member&#x60;: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. (optional, default to "owner,collaborator,organization_member")
         * @param type Limit results to repositories of the specified type. Will cause a &#x60;422&#x60; error if used in the same request as **visibility** or **affiliation**. (optional, default to all)
         * @param sort The property to sort the results by. (optional, default to full_name)
         * @param direction The order to sort by. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param since Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param before Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @return kotlin.collections.List<Repository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListForAuthenticatedUser(visibility: kotlin.String?, affiliation: kotlin.String?, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?, since: kotlinx.datetime.Instant?, before: kotlinx.datetime.Instant?): HttpResponse<kotlin.collections.List<Repository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            visibility?.apply { localVariableQuery["visibility"] = listOf("$visibility") }
            affiliation?.apply { localVariableQuery["affiliation"] = listOf("$affiliation") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/repos",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization repositories
        * Lists repositories for the specified organization.  **Note:** In order to see the &#x60;security_and_analysis&#x60; block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param type Specifies the types of repositories you want returned. (optional, default to all)
         * @param sort The property to sort the results by. (optional, default to created)
         * @param direction The order to sort by. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListForOrg(org: kotlin.String, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/repos".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repositories for a user
        * Lists public repositories for the specified user.
         * @param username The handle for the GitHub user account. 
         * @param type Limit results to repositories of the specified type. (optional, default to owner)
         * @param sort The property to sort the results by. (optional, default to full_name)
         * @param direction The order to sort by. Default: &#x60;asc&#x60; when using &#x60;full_name&#x60;, otherwise &#x60;desc&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListForUser(username: kotlin.String, type: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/repos".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List forks
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param sort The sort order. &#x60;stargazers&#x60; will sort by star count. (optional, default to newest)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListForks(owner: kotlin.String, repo: kotlin.String, sort: kotlin.String?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/forks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository invitations
        * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RepositoryInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListInvitations(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RepositoryInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/invitations".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository invitations for the authenticated user
        * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<RepositoryInvitation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListInvitationsForAuthenticatedUser(perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<RepositoryInvitation>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/repository_invitations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository languages
        * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.Map<kotlin.String, kotlin.Int>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListLanguages(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.Map<kotlin.String, kotlin.Int>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/languages".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List GitHub Pages builds
        * Lists builts of a GitHub Pages site.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<PageBuild>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListPagesBuilds(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<PageBuild>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/pages/builds".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public repositories
        * Lists all public repositories in the order that they were created.  Note: - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. - Pagination is powered exclusively by the &#x60;since&#x60; parameter. Use the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the next page of repositories.
         * @param since A repository ID. Only return repositories with an ID greater than this ID. (optional)
         * @return kotlin.collections.List<MinimalRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListPublic(since: kotlin.Int?): HttpResponse<kotlin.collections.List<MinimalRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repositories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List pull requests associated with a commit
        * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.  To list the open or merged pull requests associated with a branch, you can set the &#x60;commit_sha&#x60; parameter to the branch name.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commitSha The SHA of the commit. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<PullRequestSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListPullRequestsAssociatedWithCommit(owner: kotlin.String, repo: kotlin.String, commitSha: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<PullRequestSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/commits/{commit_sha}/pulls".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "commit_sha" + "}", "$commitSha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List release assets
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<ReleaseAsset>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListReleaseAssets(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<ReleaseAsset>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases/{release_id}/assets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List releases
        * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/repos/repos#list-repository-tags).  Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Release>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListReleases(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Release>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/releases".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List tag protection states for a repository
        * This returns the tag protection states of a repository.  This information is only available to repository administrators.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return kotlin.collections.List<TagProtection>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListTagProtection(owner: kotlin.String, repo: kotlin.String): HttpResponse<kotlin.collections.List<TagProtection>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/tags/protection".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository tags
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Tag>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListTags(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Tag>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/tags".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository teams
        * Lists the teams that have access to the specified repository and that are also visible to the authenticated user.  For a public repository, a team is listed only if that team added the public repository explicitly.  OAuth app tokens and personal access tokens (classic) need the &#x60;public_repo&#x60; or &#x60;repo&#x60; scope to use this endpoint with a public repository, and &#x60;repo&#x60; scope to use this endpoint with a private repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListTeams(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/teams".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List deliveries for a repository webhook
        * Returns a list of webhook deliveries for a webhook configured in a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param cursor Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the &#x60;link&#x60; header for the next and previous page cursors. (optional)
         * @param redelivery  (optional)
         * @return kotlin.collections.List<HookDeliveryItem>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListWebhookDeliveries(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int, perPage: kotlin.Int?, cursor: kotlin.String?, redelivery: kotlin.Boolean?): HttpResponse<kotlin.collections.List<HookDeliveryItem>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            cursor?.apply { localVariableQuery["cursor"] = listOf("$cursor") }
            redelivery?.apply { localVariableQuery["redelivery"] = listOf("$redelivery") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository webhooks
        * Lists webhooks for a repository. &#x60;last response&#x60; may return null if there have not been any deliveries within 30 days.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<Hook>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposListWebhooks(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<Hook>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/hooks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Merge a branch
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposMergeRequest  
         * @return Commit
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposMerge(owner: kotlin.String, repo: kotlin.String, reposMergeRequest: ReposMergeRequest): HttpResponse<Commit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposMergeRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/merges".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Sync a fork branch with the upstream repository
        * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposMergeUpstreamRequest  
         * @return MergedUpstream
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposMergeUpstream(owner: kotlin.String, repo: kotlin.String, reposMergeUpstreamRequest: ReposMergeUpstreamRequest): HttpResponse<MergedUpstream> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposMergeUpstreamRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/merge-upstream".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Ping a repository webhook
        * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return void
        */
        open suspend fun reposPingWebhook(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/hooks/{hook_id}/pings".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Redeliver a delivery for a repository webhook
        * Redeliver a webhook delivery for a webhook configured in a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param deliveryId  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRedeliverWebhookDelivery(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int, deliveryId: kotlin.Int): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId").replace("{" + "delivery_id" + "}", "$deliveryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove app access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of an app to push to this branch. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetAppAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Integration>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRemoveAppAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetAppAccessRestrictionsRequest: ReposSetAppAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Integration>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetAppAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove a repository collaborator
        * Removes a collaborator from a repository.  To use this endpoint, the authenticated user must either be an administrator of the repository or target themselves for removal.  This endpoint also: - Cancels any outstanding invitations - Unasigns the user from any issues - Removes access to organization projects if the user is not an organization member and is not a collaborator on any other organization repositories. - Unstars the repository - Updates access permissions to packages  Removing a user as a collaborator has the following effects on forks:  - If the user had access to a fork through their membership to this repository, the user will also be removed from the fork.  - If the user had their own fork of the repository, the fork will be deleted.  - If the user still has read access to the repository, open pull requests by this user from a fork will be denied.  **Note**: A user can still have access to the repository through organization permissions like base repository permissions.  Although the API responds immediately, the additional permission updates might take some extra time to complete in the background.  For more information on fork permissions, see \&quot;[About permissions and visibility of forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)\&quot;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun reposRemoveCollaborator(owner: kotlin.String, repo: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/collaborators/{username}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove status check contexts
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetStatusCheckContextsRequest  (optional)
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRemoveStatusCheckContexts(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetStatusCheckContextsRequest: ReposSetStatusCheckContextsRequest?): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetStatusCheckContextsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove status check protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return void
        */
        open suspend fun reposRemoveStatusCheckProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove team access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a team to push to this branch. You can also remove push access for child teams.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposAddTeamAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRemoveTeamAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposAddTeamAccessRestrictionsRequest: ReposAddTeamAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposAddTeamAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove user access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Removes the ability of a user to push to this branch.  | Type    | Description                                                                                                                                   | | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetUserAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRemoveUserAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetUserAccessRestrictionsRequest: ReposSetUserAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetUserAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Rename a branch
        * Renames a branch in a repository.  **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won&#39;t be able to push to the old branch name while the rename process is in progress. For more information, see \&quot;[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)\&quot;.  The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.  In order to rename the default branch, fine-grained access tokens also need the &#x60;administration:write&#x60; repository permission.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposRenameBranchRequest  
         * @return BranchWithProtection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRenameBranch(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposRenameBranchRequest: ReposRenameBranchRequest): HttpResponse<BranchWithProtection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposRenameBranchRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/rename".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Replace all repository topics
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposReplaceAllTopicsRequest  
         * @return Topic
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposReplaceAllTopics(owner: kotlin.String, repo: kotlin.String, reposReplaceAllTopicsRequest: ReposReplaceAllTopicsRequest): HttpResponse<Topic> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposReplaceAllTopicsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/topics".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Request a GitHub Pages build
        * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.  Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return PageBuildStatus
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposRequestPagesBuild(owner: kotlin.String, repo: kotlin.String): HttpResponse<PageBuildStatus> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/pages/builds".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set admin branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @return ProtectedBranchAdminEnforced
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposSetAdminBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String): HttpResponse<ProtectedBranchAdminEnforced> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set app access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on the repository and that have been granted write access to the repository contents can be added as authorized actors on a protected branch.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetAppAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Integration>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposSetAppAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetAppAccessRestrictionsRequest: ReposSetAppAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Integration>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetAppAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set status check contexts
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetStatusCheckContextsRequest  (optional)
         * @return kotlin.collections.List<kotlin.String>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposSetStatusCheckContexts(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetStatusCheckContextsRequest: ReposSetStatusCheckContextsRequest?): HttpResponse<kotlin.collections.List<kotlin.String>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetStatusCheckContextsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set team access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetTeamAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<Team>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposSetTeamAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetTeamAccessRestrictionsRequest: ReposSetTeamAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<Team>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetTeamAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set user access restrictions
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.  | Type    | Description                                                                                                                   | | ------- | ----------------------------------------------------------------------------------------------------------------------------- | | &#x60;array&#x60; | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposSetUserAccessRestrictionsRequest  (optional)
         * @return kotlin.collections.List<SimpleUser>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposSetUserAccessRestrictions(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposSetUserAccessRestrictionsRequest: ReposSetUserAccessRestrictionsRequest?): HttpResponse<kotlin.collections.List<SimpleUser>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposSetUserAccessRestrictionsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Test the push repository webhook
        * This will trigger the hook with the latest push to the current repository if the hook is subscribed to &#x60;push&#x60; events. If the hook is not subscribed to &#x60;push&#x60; events, the server will respond with 204 but no test POST will be generated.  **Note**: Previously &#x60;/repos/:owner/:repo/hooks/:hook_id/test&#x60;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @return void
        */
        open suspend fun reposTestPushWebhook(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/hooks/{hook_id}/tests".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Transfer a repository
        * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original &#x60;owner&#x60;, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposTransferRequest  
         * @return MinimalRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposTransfer(owner: kotlin.String, repo: kotlin.String, reposTransferRequest: ReposTransferRequest): HttpResponse<MinimalRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposTransferRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/transfer".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository
        * **Note**: To edit a repository&#39;s topics, use the [Replace all repository topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposUpdateRequest  (optional)
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdate(owner: kotlin.String, repo: kotlin.String, reposUpdateRequest: ReposUpdateRequest?): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update branch protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Protecting a branch requires admin or owner permissions to the repository.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.  **Note**: The list of users, apps, and teams in total is limited to 100 items.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposUpdateBranchProtectionRequest  
         * @return ProtectedBranch
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateBranchProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposUpdateBranchProtectionRequest: ReposUpdateBranchProtectionRequest): HttpResponse<ProtectedBranch> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateBranchProtectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/branches/{branch}/protection".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a commit comment
        * Updates the contents of a specified commit comment.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github-commitcomment.raw+json&#x60;**: Returns the raw markdown body. Response will include &#x60;body&#x60;. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github-commitcomment.text+json&#x60;**: Returns a text only representation of the markdown body. Response will include &#x60;body_text&#x60;. - **&#x60;application/vnd.github-commitcomment.html+json&#x60;**: Returns HTML rendered from the body&#39;s markdown. Response will include &#x60;body_html&#x60;. - **&#x60;application/vnd.github-commitcomment.full+json&#x60;**: Returns raw, text, and HTML representations. Response will include &#x60;body&#x60;, &#x60;body_text&#x60;, and &#x60;body_html&#x60;.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param commentId The unique identifier of the comment. 
         * @param reposUpdateCommitCommentRequest  
         * @return CommitComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateCommitComment(owner: kotlin.String, repo: kotlin.String, commentId: kotlin.Int, reposUpdateCommitCommentRequest: ReposUpdateCommitCommentRequest): HttpResponse<CommitComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateCommitCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/comments/{comment_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a deployment branch policy
        * Updates a deployment branch or tag policy for an environment.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param environmentName The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with &#x60;%2F&#x60;. 
         * @param branchPolicyId The unique identifier of the branch policy. 
         * @param deploymentBranchPolicyNamePattern  
         * @return DeploymentBranchPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateDeploymentBranchPolicy(owner: kotlin.String, repo: kotlin.String, environmentName: kotlin.String, branchPolicyId: kotlin.Int, deploymentBranchPolicyNamePattern: DeploymentBranchPolicyNamePattern): HttpResponse<DeploymentBranchPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = deploymentBranchPolicyNamePattern

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "environment_name" + "}", "$environmentName").replace("{" + "branch_policy_id" + "}", "$branchPolicyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update information about a GitHub Pages site
        * Updates information for a GitHub Pages site. For more information, see \&quot;[About GitHub Pages](/github/working-with-github-pages/about-github-pages).  The authenticated user must be a repository administrator, maintainer, or have the &#39;manage GitHub Pages settings&#39; permission.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param reposUpdateInformationAboutPagesSiteRequest  
         * @return void
        */
        open suspend fun reposUpdateInformationAboutPagesSite(owner: kotlin.String, repo: kotlin.String, reposUpdateInformationAboutPagesSiteRequest: ReposUpdateInformationAboutPagesSiteRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateInformationAboutPagesSiteRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/pages".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository invitation
        * 
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param invitationId The unique identifier of the invitation. 
         * @param reposUpdateInvitationRequest  (optional)
         * @return RepositoryInvitation
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateInvitation(owner: kotlin.String, repo: kotlin.String, invitationId: kotlin.Int, reposUpdateInvitationRequest: ReposUpdateInvitationRequest?): HttpResponse<RepositoryInvitation> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateInvitationRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/invitations/{invitation_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "invitation_id" + "}", "$invitationId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update an organization repository ruleset
        * Update a ruleset for an organization.
         * @param org The organization name. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @param reposUpdateOrgRulesetRequest Request body (optional)
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateOrgRuleset(org: kotlin.String, rulesetId: kotlin.Int, reposUpdateOrgRulesetRequest: ReposUpdateOrgRulesetRequest?): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateOrgRulesetRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/rulesets/{ruleset_id}".replace("{" + "org" + "}", "$org").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update pull request review protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.  **Note**: Passing new arrays of &#x60;users&#x60; and &#x60;teams&#x60; replaces their previous values.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposUpdatePullRequestReviewProtectionRequest  (optional)
         * @return ProtectedBranchPullRequestReview
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdatePullRequestReviewProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposUpdatePullRequestReviewProtectionRequest: ReposUpdatePullRequestReviewProtectionRequest?): HttpResponse<ProtectedBranchPullRequestReview> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdatePullRequestReviewProtectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a release
        * Users with push access to the repository can edit a release.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param reposUpdateReleaseRequest  (optional)
         * @return Release
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateRelease(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, reposUpdateReleaseRequest: ReposUpdateReleaseRequest?): HttpResponse<Release> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateReleaseRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/releases/{release_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a release asset
        * Users with push access to the repository can edit a release asset.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param assetId The unique identifier of the asset. 
         * @param reposUpdateReleaseAssetRequest  (optional)
         * @return ReleaseAsset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateReleaseAsset(owner: kotlin.String, repo: kotlin.String, assetId: kotlin.Int, reposUpdateReleaseAssetRequest: ReposUpdateReleaseAssetRequest?): HttpResponse<ReleaseAsset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateReleaseAssetRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/releases/assets/{asset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "asset_id" + "}", "$assetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository ruleset
        * Update a ruleset for a repository.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param rulesetId The ID of the ruleset. 
         * @param reposUpdateRepoRulesetRequest Request body (optional)
         * @return RepositoryRuleset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateRepoRuleset(owner: kotlin.String, repo: kotlin.String, rulesetId: kotlin.Int, reposUpdateRepoRulesetRequest: ReposUpdateRepoRulesetRequest?): HttpResponse<RepositoryRuleset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateRepoRulesetRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/rulesets/{ruleset_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ruleset_id" + "}", "$rulesetId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update status check protection
        * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub&#39;s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.  Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param branch The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). 
         * @param reposUpdateStatusCheckProtectionRequest  (optional)
         * @return StatusCheckPolicy
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateStatusCheckProtection(owner: kotlin.String, repo: kotlin.String, branch: kotlin.String, reposUpdateStatusCheckProtectionRequest: ReposUpdateStatusCheckProtectionRequest?): HttpResponse<StatusCheckPolicy> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateStatusCheckProtectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "branch" + "}", "$branch"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository webhook
        * Updates a webhook configured in a repository. If you previously had a &#x60;secret&#x60; set, you must provide the same &#x60;secret&#x60; or set a new &#x60;secret&#x60; or the secret will be removed. If you are only updating individual webhook &#x60;config&#x60; properties, use \&quot;[Update a webhook configuration for a repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository).\&quot;
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param reposUpdateWebhookRequest  
         * @return Hook
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateWebhook(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int, reposUpdateWebhookRequest: ReposUpdateWebhookRequest): HttpResponse<Hook> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateWebhookRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/hooks/{hook_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a webhook configuration for a repository
        * Updates the webhook configuration for a repository. To update more information about the webhook, including the &#x60;active&#x60; state and &#x60;events&#x60;, use \&quot;[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;write:repo_hook&#x60; or &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param hookId The unique identifier of the hook. You can find this value in the &#x60;X-GitHub-Hook-ID&#x60; header of a webhook delivery. 
         * @param reposUpdateWebhookConfigForRepoRequest  (optional)
         * @return WebhookConfig
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUpdateWebhookConfigForRepo(owner: kotlin.String, repo: kotlin.String, hookId: kotlin.Int, reposUpdateWebhookConfigForRepoRequest: ReposUpdateWebhookConfigForRepoRequest?): HttpResponse<WebhookConfig> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = reposUpdateWebhookConfigForRepoRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/hooks/{hook_id}/config".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "hook_id" + "}", "$hookId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Upload a release asset
        * This endpoint makes use of a [Hypermedia relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the &#x60;upload_url&#x60; returned in the response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.  You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.  Most libraries will set the required &#x60;Content-Length&#x60; header automatically. Use the required &#x60;Content-Type&#x60; header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:   &#x60;application/zip&#x60;  GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example, you&#39;ll still need to pass your authentication to be able to upload an asset.  When an upstream failure occurs, you will receive a &#x60;502 Bad Gateway&#x60; status. This may leave an empty asset with a state of &#x60;starter&#x60;. It can be safely deleted.  **Notes:** *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \&quot;[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)\&quot; endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags&#x3D;dotcom-rest-api). *   To find the &#x60;release_id&#x60; query the [&#x60;GET /repos/{owner}/{repo}/releases/latest&#x60; endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).  *   If you upload an asset with the same filename as another uploaded asset, you&#39;ll receive an error and must delete the old file before you can re-upload the new asset.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param releaseId The unique identifier of the release. 
         * @param name  
         * @param label  (optional, default to "push")
         * @param body  (optional)
         * @return ReleaseAsset
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun reposUploadReleaseAsset(owner: kotlin.String, repo: kotlin.String, releaseId: kotlin.Int, name: kotlin.String, label: kotlin.String?, body: java.io.File?): HttpResponse<ReleaseAsset> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()
            name?.apply { localVariableQuery["name"] = listOf("$name") }
            label?.apply { localVariableQuery["label"] = listOf("$label") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/releases/{release_id}/assets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "release_id" + "}", "$releaseId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

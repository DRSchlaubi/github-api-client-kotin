/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.ActionsListSelectedReposForOrgSecret200Response
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.DependabotAlert
import org.openapitools.client.models.DependabotAlertWithRepository
import org.openapitools.client.models.DependabotCreateOrUpdateOrgSecretRequest
import org.openapitools.client.models.DependabotCreateOrUpdateRepoSecretRequest
import org.openapitools.client.models.DependabotListOrgSecrets200Response
import org.openapitools.client.models.DependabotListRepoSecrets200Response
import org.openapitools.client.models.DependabotPublicKey
import org.openapitools.client.models.DependabotSecret
import org.openapitools.client.models.DependabotSetSelectedReposForOrgSecretRequest
import org.openapitools.client.models.DependabotUpdateAlertRequest
import org.openapitools.client.models.OrganizationDependabotSecret
import org.openapitools.client.models.ValidationErrorSimple

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class DependabotApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add selected repository to an organization secret
        * Adds a repository to an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun dependabotAddSelectedRepoToOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update an organization secret
        * Creates or updates an organization secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param dependabotCreateOrUpdateOrgSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotCreateOrUpdateOrgSecret(org: kotlin.String, secretName: kotlin.String, dependabotCreateOrUpdateOrgSecretRequest: DependabotCreateOrUpdateOrgSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = dependabotCreateOrUpdateOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create or update a repository secret
        * Creates or updates a repository secret with an encrypted value. Encrypt your secret using [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see \&quot;[Encrypting secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param dependabotCreateOrUpdateRepoSecretRequest  
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotCreateOrUpdateRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String, dependabotCreateOrUpdateRepoSecretRequest: DependabotCreateOrUpdateRepoSecretRequest): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = dependabotCreateOrUpdateRepoSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete an organization secret
        * Deletes a secret in an organization using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun dependabotDeleteOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a repository secret
        * Deletes a secret in a repository using the secret name.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return void
        */
        open suspend fun dependabotDeleteRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a Dependabot alert
        * OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param alertNumber The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. 
         * @return DependabotAlert
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotGetAlert(owner: kotlin.String, repo: kotlin.String, alertNumber: kotlin.Int): HttpResponse<DependabotAlert> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "alert_number" + "}", "$alertNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization public key
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return DependabotPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotGetOrgPublicKey(org: kotlin.String): HttpResponse<DependabotPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/dependabot/secrets/public-key".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get an organization secret
        * Gets a single organization secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return OrganizationDependabotSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotGetOrgSecret(org: kotlin.String, secretName: kotlin.String): HttpResponse<OrganizationDependabotSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/dependabot/secrets/{secret_name}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository public key
        * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the repository is private.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @return DependabotPublicKey
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotGetRepoPublicKey(owner: kotlin.String, repo: kotlin.String): HttpResponse<DependabotPublicKey> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependabot/secrets/public-key".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository secret
        * Gets a single repository secret without revealing its encrypted value.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @return DependabotSecret
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotGetRepoSecret(owner: kotlin.String, repo: kotlin.String, secretName: kotlin.String): HttpResponse<DependabotSecret> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List Dependabot alerts for an enterprise
        * Lists Dependabot alerts for repositories that are owned by the specified enterprise.  The authenticated user must be a member of the enterprise to use this endpoint.  Alerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see \&quot;[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;security_events&#x60; scope to use this endpoint.
         * @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id. 
         * @param state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
         * @param severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
         * @param ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
         * @param `package` A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
         * @param scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
         * @param sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to created)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
         * @param last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<DependabotAlertWithRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListAlertsForEnterprise(enterprise: kotlin.String, state: kotlin.String?, severity: kotlin.String?, ecosystem: kotlin.String?, `package`: kotlin.String?, scope: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, before: kotlin.String?, after: kotlin.String?, first: kotlin.Int?, last: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<DependabotAlertWithRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            severity?.apply { localVariableQuery["severity"] = listOf("$severity") }
            ecosystem?.apply { localVariableQuery["ecosystem"] = listOf("$ecosystem") }
            `package`?.apply { localVariableQuery["package"] = listOf("$`package`") }
            scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            first?.apply { localVariableQuery["first"] = listOf("$first") }
            last?.apply { localVariableQuery["last"] = listOf("$last") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/enterprises/{enterprise}/dependabot/alerts".replace("{" + "enterprise" + "}", "$enterprise"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List Dependabot alerts for an organization
        * Lists Dependabot alerts for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
         * @param org The organization name. The name is not case sensitive. 
         * @param state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
         * @param severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
         * @param ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
         * @param `package` A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
         * @param scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
         * @param sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to created)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
         * @param last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<DependabotAlertWithRepository>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListAlertsForOrg(org: kotlin.String, state: kotlin.String?, severity: kotlin.String?, ecosystem: kotlin.String?, `package`: kotlin.String?, scope: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, before: kotlin.String?, after: kotlin.String?, first: kotlin.Int?, last: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<DependabotAlertWithRepository>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            severity?.apply { localVariableQuery["severity"] = listOf("$severity") }
            ecosystem?.apply { localVariableQuery["ecosystem"] = listOf("$ecosystem") }
            `package`?.apply { localVariableQuery["package"] = listOf("$`package`") }
            scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            first?.apply { localVariableQuery["first"] = listOf("$first") }
            last?.apply { localVariableQuery["last"] = listOf("$last") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/dependabot/alerts".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List Dependabot alerts for a repository
        * OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param state A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: &#x60;auto_dismissed&#x60;, &#x60;dismissed&#x60;, &#x60;fixed&#x60;, &#x60;open&#x60; (optional)
         * @param severity A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: &#x60;low&#x60;, &#x60;medium&#x60;, &#x60;high&#x60;, &#x60;critical&#x60; (optional)
         * @param ecosystem A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: &#x60;composer&#x60;, &#x60;go&#x60;, &#x60;maven&#x60;, &#x60;npm&#x60;, &#x60;nuget&#x60;, &#x60;pip&#x60;, &#x60;pub&#x60;, &#x60;rubygems&#x60;, &#x60;rust&#x60; (optional)
         * @param `package` A comma-separated list of package names. If specified, only alerts for these packages will be returned. (optional)
         * @param manifest A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. (optional)
         * @param scope The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. (optional)
         * @param sort The property by which to sort the results. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert&#39;s state last changed. (optional, default to created)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param page **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with &#x60;before&#x60; or &#x60;after&#x60; instead. (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param first **Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with &#x60;last&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;after&#x60; to fetch the first page of results. (optional, default to 30)
         * @param last **Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with &#x60;first&#x60;. Instead, use &#x60;per_page&#x60; in combination with &#x60;before&#x60; to fetch the last page of results. (optional)
         * @return kotlin.collections.List<DependabotAlert>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListAlertsForRepo(owner: kotlin.String, repo: kotlin.String, state: kotlin.String?, severity: kotlin.String?, ecosystem: kotlin.String?, `package`: kotlin.String?, manifest: kotlin.String?, scope: kotlin.String?, sort: kotlin.String?, direction: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?, before: kotlin.String?, after: kotlin.String?, first: kotlin.Int?, last: kotlin.Int?): HttpResponse<kotlin.collections.List<DependabotAlert>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            state?.apply { localVariableQuery["state"] = listOf("$state") }
            severity?.apply { localVariableQuery["severity"] = listOf("$severity") }
            ecosystem?.apply { localVariableQuery["ecosystem"] = listOf("$ecosystem") }
            `package`?.apply { localVariableQuery["package"] = listOf("$`package`") }
            manifest?.apply { localVariableQuery["manifest"] = listOf("$manifest") }
            scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            first?.apply { localVariableQuery["first"] = listOf("$first") }
            last?.apply { localVariableQuery["last"] = listOf("$last") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependabot/alerts".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List organization secrets
        * Lists all secrets available in an organization without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return DependabotListOrgSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListOrgSecrets(org: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<DependabotListOrgSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/dependabot/secrets".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository secrets
        * Lists all secrets available in a repository without revealing their encrypted values.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return DependabotListRepoSecrets200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListRepoSecrets(owner: kotlin.String, repo: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<DependabotListRepoSecrets200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/dependabot/secrets".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List selected repositories for an organization secret
        * Lists all repositories that have been selected when the &#x60;visibility&#x60; for repository access to a secret is set to &#x60;selected&#x60;.  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return ActionsListSelectedReposForOrgSecret200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotListSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<ActionsListSelectedReposForOrgSecret200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/dependabot/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Remove selected repository from an organization secret
        * Removes a repository from an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param repositoryId  
         * @return void
        */
        open suspend fun dependabotRemoveSelectedRepoFromOrgSecret(org: kotlin.String, secretName: kotlin.String, repositoryId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName").replace("{" + "repository_id" + "}", "$repositoryId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Set selected repositories for an organization secret
        * Replaces all repositories for an organization secret when the &#x60;visibility&#x60; for repository access is set to &#x60;selected&#x60;. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).  OAuth app tokens and personal access tokens (classic) need the &#x60;admin:org&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param secretName The name of the secret. 
         * @param dependabotSetSelectedReposForOrgSecretRequest  
         * @return void
        */
        open suspend fun dependabotSetSelectedReposForOrgSecret(org: kotlin.String, secretName: kotlin.String, dependabotSetSelectedReposForOrgSecretRequest: DependabotSetSelectedReposForOrgSecretRequest): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = dependabotSetSelectedReposForOrgSecretRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/orgs/{org}/dependabot/secrets/{secret_name}/repositories".replace("{" + "org" + "}", "$org").replace("{" + "secret_name" + "}", "$secretName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a Dependabot alert
        * The authenticated user must have access to security alerts for the repository to use this endpoint. For more information, see \&quot;[Granting access to security alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;security_events&#x60; scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the &#x60;public_repo&#x60; scope instead.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param alertNumber The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in &#x60;number&#x60; fields in the response from the &#x60;GET /repos/{owner}/{repo}/dependabot/alerts&#x60; operation. 
         * @param dependabotUpdateAlertRequest  
         * @return DependabotAlert
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun dependabotUpdateAlert(owner: kotlin.String, repo: kotlin.String, alertNumber: kotlin.Int, dependabotUpdateAlertRequest: DependabotUpdateAlertRequest): HttpResponse<DependabotAlert> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = dependabotUpdateAlertRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "alert_number" + "}", "$alertNumber"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

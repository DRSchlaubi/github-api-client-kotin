/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.FullRepository
import org.openapitools.client.models.GlobalAdvisory
import org.openapitools.client.models.PrivateVulnerabilityReportCreate
import org.openapitools.client.models.RepositoryAdvisory
import org.openapitools.client.models.RepositoryAdvisoryCreate
import org.openapitools.client.models.RepositoryAdvisoryUpdate
import org.openapitools.client.models.SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter
import org.openapitools.client.models.SecurityAdvisoriesListGlobalAdvisoriesCwesParameter
import org.openapitools.client.models.ValidationError
import org.openapitools.client.models.ValidationErrorSimple

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class SecurityAdvisoriesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Create a temporary private fork
        * Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.  **Note**: Forking a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. 
         * @return FullRepository
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesCreateFork(owner: kotlin.String, repo: kotlin.String, ghsaId: kotlin.String): HttpResponse<FullRepository> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ghsa_id" + "}", "$ghsaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Privately report a security vulnerability
        * Report a security vulnerability to the maintainers of the repository. See \&quot;[Privately reporting a security vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)\&quot; for more information about private vulnerability reporting.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param privateVulnerabilityReportCreate  
         * @return RepositoryAdvisory
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesCreatePrivateVulnerabilityReport(owner: kotlin.String, repo: kotlin.String, privateVulnerabilityReportCreate: PrivateVulnerabilityReportCreate): HttpResponse<RepositoryAdvisory> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = privateVulnerabilityReportCreate

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/security-advisories/reports".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a repository security advisory
        * Creates a new repository security advisory.  In order to create a draft repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param repositoryAdvisoryCreate  
         * @return RepositoryAdvisory
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesCreateRepositoryAdvisory(owner: kotlin.String, repo: kotlin.String, repositoryAdvisoryCreate: RepositoryAdvisoryCreate): HttpResponse<RepositoryAdvisory> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = repositoryAdvisoryCreate

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/security-advisories".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Request a CVE for a repository security advisory
        * If you want a CVE identification number for the security vulnerability in your project, and don&#39;t already have one, you can request a CVE identification number from GitHub. For more information see \&quot;[Requesting a CVE identification number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional).\&quot;  You may request a CVE for public repositories, but cannot do so for private repositories.  In order to request a CVE for a repository security advisory, the authenticated user must be a security manager or administrator of that repository.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesCreateRepositoryAdvisoryCveRequest(owner: kotlin.String, repo: kotlin.String, ghsaId: kotlin.String): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ghsa_id" + "}", "$ghsaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a global security advisory
        * Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
         * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. 
         * @return GlobalAdvisory
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesGetGlobalAdvisory(ghsaId: kotlin.String): HttpResponse<GlobalAdvisory> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/advisories/{ghsa_id}".replace("{" + "ghsa_id" + "}", "$ghsaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a repository security advisory
        * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  Anyone can access any published security advisory on a public repository.  The authenticated user can access an unpublished security advisory from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on the security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. 
         * @return RepositoryAdvisory
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesGetRepositoryAdvisory(owner: kotlin.String, repo: kotlin.String, ghsaId: kotlin.String): HttpResponse<RepositoryAdvisory> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/security-advisories/{ghsa_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ghsa_id" + "}", "$ghsaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List global security advisories
        * Lists all global security advisories that match the specified parameters. If no other parameters are defined, the request will return only GitHub-reviewed advisories that are not malware.  By default, all responses will exclude advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must include the &#x60;type&#x60; parameter in your request, with the value &#x60;malware&#x60;. For more information about the different types of security advisories, see \&quot;[About the GitHub Advisory database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories).\&quot;
         * @param ghsaId If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned. (optional)
         * @param type If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware. (optional, default to reviewed)
         * @param cveId If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned. (optional, default to "push")
         * @param ecosystem If specified, only advisories for these ecosystems will be returned. (optional)
         * @param severity If specified, only advisories with these severities will be returned. (optional)
         * @param cwes If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: &#x60;cwes&#x3D;79,284,22&#x60; or &#x60;cwes[]&#x3D;79&amp;cwes[]&#x3D;284&amp;cwes[]&#x3D;22&#x60; (optional)
         * @param isWithdrawn Whether to only return advisories that have been withdrawn. (optional)
         * @param affects If specified, only return advisories that affect any of &#x60;package&#x60; or &#x60;package@version&#x60;. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: &#x60;affects&#x3D;package1,package2@1.0.0,package3@^2.0.0&#x60; or &#x60;affects[]&#x3D;package1&amp;affects[]&#x3D;package2@1.0.0&#x60; (optional)
         * @param published If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional, default to "push")
         * @param updated If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional, default to "push")
         * @param modified If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \&quot;[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\&quot; (optional, default to "push")
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param sort The property to sort the results by. (optional, default to published)
         * @return kotlin.collections.List<GlobalAdvisory>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesListGlobalAdvisories(ghsaId: kotlin.String?, type: kotlin.String?, cveId: kotlin.String?, ecosystem: kotlin.String?, severity: kotlin.String?, cwes: SecurityAdvisoriesListGlobalAdvisoriesCwesParameter?, isWithdrawn: kotlin.Boolean?, affects: SecurityAdvisoriesListGlobalAdvisoriesAffectsParameter?, published: kotlin.String?, updated: kotlin.String?, modified: kotlin.String?, before: kotlin.String?, after: kotlin.String?, direction: kotlin.String?, perPage: kotlin.Int?, sort: kotlin.String?): HttpResponse<kotlin.collections.List<GlobalAdvisory>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            ghsaId?.apply { localVariableQuery["ghsa_id"] = listOf("$ghsaId") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            cveId?.apply { localVariableQuery["cve_id"] = listOf("$cveId") }
            ecosystem?.apply { localVariableQuery["ecosystem"] = listOf("$ecosystem") }
            severity?.apply { localVariableQuery["severity"] = listOf("$severity") }
            cwes?.apply { localVariableQuery["cwes"] = listOf("$cwes") }
            isWithdrawn?.apply { localVariableQuery["is_withdrawn"] = listOf("$isWithdrawn") }
            affects?.apply { localVariableQuery["affects"] = listOf("$affects") }
            published?.apply { localVariableQuery["published"] = listOf("$published") }
            updated?.apply { localVariableQuery["updated"] = listOf("$updated") }
            modified?.apply { localVariableQuery["modified"] = listOf("$modified") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/advisories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository security advisories for an organization
        * Lists repository security advisories for an organization.  The authenticated user must be an owner or security manager for the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param sort The property to sort the results by. (optional, default to created)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param perPage The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param state Filter by the state of the repository advisories. Only advisories of this state will be returned. (optional)
         * @return kotlin.collections.List<RepositoryAdvisory>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesListOrgRepositoryAdvisories(org: kotlin.String, direction: kotlin.String?, sort: kotlin.String?, before: kotlin.String?, after: kotlin.String?, perPage: kotlin.Int?, state: kotlin.String?): HttpResponse<kotlin.collections.List<RepositoryAdvisory>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            state?.apply { localVariableQuery["state"] = listOf("$state") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/security-advisories".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List repository security advisories
        * Lists security advisories in a repository.  The authenticated user can access unpublished security advisories from a repository if they are a security manager or administrator of that repository, or if they are a collaborator on any security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:read&#x60; scope to to get a published security advisory in a private repository, or any unpublished security advisory that the authenticated user has access to.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param direction The direction to sort the results by. (optional, default to desc)
         * @param sort The property to sort the results by. (optional, default to created)
         * @param before A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param after A cursor, as given in the [Link header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional)
         * @param perPage The number of advisories to return per page. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param state Filter by state of the repository advisories. Only advisories of this state will be returned. (optional)
         * @return kotlin.collections.List<RepositoryAdvisory>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesListRepositoryAdvisories(owner: kotlin.String, repo: kotlin.String, direction: kotlin.String?, sort: kotlin.String?, before: kotlin.String?, after: kotlin.String?, perPage: kotlin.Int?, state: kotlin.String?): HttpResponse<kotlin.collections.List<RepositoryAdvisory>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            direction?.apply { localVariableQuery["direction"] = listOf("$direction") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            before?.apply { localVariableQuery["before"] = listOf("$before") }
            after?.apply { localVariableQuery["after"] = listOf("$after") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            state?.apply { localVariableQuery["state"] = listOf("$state") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/repos/{owner}/{repo}/security-advisories".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a repository security advisory
        * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.  In order to update any security advisory, the authenticated user must be a security manager or administrator of that repository, or a collaborator on the repository security advisory.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; or &#x60;repository_advisories:write&#x60; scope to use this endpoint.
         * @param owner The account owner of the repository. The name is not case sensitive. 
         * @param repo The name of the repository without the &#x60;.git&#x60; extension. The name is not case sensitive. 
         * @param ghsaId The GHSA (GitHub Security Advisory) identifier of the advisory. 
         * @param repositoryAdvisoryUpdate  
         * @return RepositoryAdvisory
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun securityAdvisoriesUpdateRepositoryAdvisory(owner: kotlin.String, repo: kotlin.String, ghsaId: kotlin.String, repositoryAdvisoryUpdate: RepositoryAdvisoryUpdate): HttpResponse<RepositoryAdvisory> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = repositoryAdvisoryUpdate

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/repos/{owner}/{repo}/security-advisories/{ghsa_id}".replace("{" + "owner" + "}", "$owner").replace("{" + "repo" + "}", "$repo").replace("{" + "ghsa_id" + "}", "$ghsaId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

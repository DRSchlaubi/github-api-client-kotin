/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BaseGist
import org.openapitools.client.models.BasicError
import org.openapitools.client.models.GistComment
import org.openapitools.client.models.GistCommit
import org.openapitools.client.models.GistSimple
import org.openapitools.client.models.GistsCreateCommentRequest
import org.openapitools.client.models.GistsCreateRequest
import org.openapitools.client.models.GistsUpdateRequest
import org.openapitools.client.models.ValidationError

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class GistsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Check if a gist is starred
        * 
         * @param gistId The unique identifier of the gist. 
         * @return void
        */
        open suspend fun gistsCheckIsStarred(gistId: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/star".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a gist
        * Allows you to add a new gist with one or more files.  **Note:** Don&#39;t name your files \&quot;gistfile\&quot; with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
         * @param gistsCreateRequest  
         * @return GistSimple
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsCreate(gistsCreateRequest: GistsCreateRequest): HttpResponse<GistSimple> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = gistsCreateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/gists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a gist comment
        * Creates a comment on a gist.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param gistsCreateCommentRequest  
         * @return GistComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsCreateComment(gistId: kotlin.String, gistsCreateCommentRequest: GistsCreateCommentRequest): HttpResponse<GistComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = gistsCreateCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/gists/{gist_id}/comments".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a gist
        * 
         * @param gistId The unique identifier of the gist. 
         * @return void
        */
        open suspend fun gistsDelete(gistId: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/gists/{gist_id}".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a gist comment
        * 
         * @param gistId The unique identifier of the gist. 
         * @param commentId The unique identifier of the comment. 
         * @return void
        */
        open suspend fun gistsDeleteComment(gistId: kotlin.String, commentId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/gists/{gist_id}/comments/{comment_id}".replace("{" + "gist_id" + "}", "$gistId").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Fork a gist
        * 
         * @param gistId The unique identifier of the gist. 
         * @return BaseGist
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsFork(gistId: kotlin.String): HttpResponse<BaseGist> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/gists/{gist_id}/forks".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a gist
        * Gets a specified gist.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @return GistSimple
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsGet(gistId: kotlin.String): HttpResponse<GistSimple> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a gist comment
        * Gets a comment on a gist.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param commentId The unique identifier of the comment. 
         * @return GistComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsGetComment(gistId: kotlin.String, commentId: kotlin.Int): HttpResponse<GistComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/comments/{comment_id}".replace("{" + "gist_id" + "}", "$gistId").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a gist revision
        * Gets a specified gist revision.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param sha  
         * @return GistSimple
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsGetRevision(gistId: kotlin.String, sha: kotlin.String): HttpResponse<GistSimple> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/{sha}".replace("{" + "gist_id" + "}", "$gistId").replace("{" + "sha" + "}", "$sha"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List gists for the authenticated user
        * Lists the authenticated user&#39;s gists or if called anonymously, this endpoint returns all public gists:
         * @param since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<BaseGist>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsList(since: kotlinx.datetime.Instant?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<BaseGist>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List gist comments
        * Lists the comments on a gist.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<GistComment>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListComments(gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<GistComment>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/comments".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List gist commits
        * 
         * @param gistId The unique identifier of the gist. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<GistCommit>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListCommits(gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<GistCommit>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/commits".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List gists for a user
        * Lists public gists for the specified user:
         * @param username The handle for the GitHub user account. 
         * @param since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<BaseGist>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListForUser(username: kotlin.String, since: kotlinx.datetime.Instant?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<BaseGist>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/gists".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List gist forks
        * 
         * @param gistId The unique identifier of the gist. 
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<GistSimple>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListForks(gistId: kotlin.String, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<GistSimple>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/{gist_id}/forks".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List public gists
        * List public gists sorted by most recently updated to least recently updated.  Note: With [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
         * @param since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<BaseGist>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListPublic(since: kotlinx.datetime.Instant?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<BaseGist>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/public",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List starred gists
        * List the authenticated user&#39;s starred gists:
         * @param since Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60;. (optional)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @return kotlin.collections.List<BaseGist>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsListStarred(since: kotlinx.datetime.Instant?, perPage: kotlin.Int?, page: kotlin.Int?): HttpResponse<kotlin.collections.List<BaseGist>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            since?.apply { localVariableQuery["since"] = listOf("$since") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/gists/starred",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Star a gist
        * Note that you&#39;ll need to set &#x60;Content-Length&#x60; to zero when calling out to this endpoint. For more information, see \&quot;[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method).\&quot;
         * @param gistId The unique identifier of the gist. 
         * @return void
        */
        open suspend fun gistsStar(gistId: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/gists/{gist_id}/star".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Unstar a gist
        * 
         * @param gistId The unique identifier of the gist. 
         * @return void
        */
        open suspend fun gistsUnstar(gistId: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/gists/{gist_id}/star".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a gist
        * Allows you to update a gist&#39;s description and to update, delete, or rename gist files. Files from the previous version of the gist that aren&#39;t explicitly changed during an edit are unchanged.  At least one of &#x60;description&#x60; or &#x60;files&#x60; is required.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param gistsUpdateRequest  
         * @return GistSimple
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsUpdate(gistId: kotlin.String, gistsUpdateRequest: GistsUpdateRequest): HttpResponse<GistSimple> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = gistsUpdateRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/gists/{gist_id}".replace("{" + "gist_id" + "}", "$gistId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Update a gist comment
        * Updates a comment on a gist.  This endpoint supports the following custom media types. For more information, see \&quot;[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types).\&quot;  - **&#x60;application/vnd.github.raw+json&#x60;**: Returns the raw markdown. This is the default if you do not pass any specific media type. - **&#x60;application/vnd.github.base64+json&#x60;**: Returns the base64-encoded contents. This can be useful if your gist contains any invalid UTF-8 sequences.
         * @param gistId The unique identifier of the gist. 
         * @param commentId The unique identifier of the comment. 
         * @param gistsCreateCommentRequest  
         * @return GistComment
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun gistsUpdateComment(gistId: kotlin.String, commentId: kotlin.Int, gistsCreateCommentRequest: GistsCreateCommentRequest): HttpResponse<GistComment> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = gistsCreateCommentRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/gists/{gist_id}/comments/{comment_id}".replace("{" + "gist_id" + "}", "$gistId").replace("{" + "comment_id" + "}", "$commentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }

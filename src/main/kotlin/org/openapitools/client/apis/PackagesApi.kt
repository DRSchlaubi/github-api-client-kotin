/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.BasicError
import org.openapitools.client.models.Package
import org.openapitools.client.models.PackageVersion

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class PackagesApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Delete a package for the authenticated user
        * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, &#x60;repo&#x60; scope is also required. For the list these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @return void
        */
        open suspend fun packagesDeletePackageForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a package for an organization
        * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @return void
        */
        open suspend fun packagesDeletePackageForOrg(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a package for a user
        * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @return void
        */
        open suspend fun packagesDeletePackageForUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/{username}/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a package version for the authenticated user
        * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesDeletePackageVersionForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/user/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete package version for an organization
        * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesDeletePackageVersionForOrg(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete package version for a user
        * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;delete:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesDeletePackageVersionForUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List package versions for a package owned by the authenticated user
        * Lists package versions for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param state The state of the package, either active or deleted. (optional, default to active)
         * @return kotlin.collections.List<PackageVersion>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?, state: kotlin.String?): HttpResponse<kotlin.collections.List<PackageVersion>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            state?.apply { localVariableQuery["state"] = listOf("$state") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/packages/{package_type}/{package_name}/versions".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List package versions for a package owned by an organization
        * Lists package versions for a package owned by an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;repo&#x60; scope to use this endpoint if the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @param state The state of the package, either active or deleted. (optional, default to active)
         * @return kotlin.collections.List<PackageVersion>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetAllPackageVersionsForPackageOwnedByOrg(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String, page: kotlin.Int?, perPage: kotlin.Int?, state: kotlin.String?): HttpResponse<kotlin.collections.List<PackageVersion>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
            state?.apply { localVariableQuery["state"] = listOf("$state") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/packages/{package_type}/{package_name}/versions".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List package versions for a package owned by a user
        * Lists package versions for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @return kotlin.collections.List<PackageVersion>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetAllPackageVersionsForPackageOwnedByUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String): HttpResponse<kotlin.collections.List<PackageVersion>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/packages/{package_type}/{package_name}/versions".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package for the authenticated user
        * Gets a specific package for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @return Package
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String): HttpResponse<Package> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package for an organization
        * Gets a specific package in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @return Package
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageForOrganization(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String): HttpResponse<Package> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package for a user
        * Gets a specific package metadata for a public package owned by a user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @return Package
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageForUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String): HttpResponse<Package> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/packages/{package_type}/{package_name}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package version for the authenticated user
        * Gets a specific package version for a package owned by the authenticated user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return PackageVersion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageVersionForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<PackageVersion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package version for an organization
        * Gets a specific package version in an organization.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return PackageVersion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageVersionForOrganization(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<PackageVersion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get a package version for a user
        * Gets a specific package version for a public package owned by a specified user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param packageVersionId Unique identifier of the package version. 
         * @param username The handle for the GitHub user account. 
         * @return PackageVersion
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesGetPackageVersionForUser(packageType: kotlin.String, packageName: kotlin.String, packageVersionId: kotlin.Int, username: kotlin.String): HttpResponse<PackageVersion> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "package_version_id" + "}", "$packageVersionId").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get list of conflicting packages during Docker migration for authenticated-user
        * Lists all packages that are owned by the authenticated user within the user&#39;s namespace, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/docker/conflicts",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get list of conflicting packages during Docker migration for organization
        * Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a conflict during a Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
         * @param org The organization name. The name is not case sensitive. 
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListDockerMigrationConflictingPackagesForOrganization(org: kotlin.String): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/docker/conflicts".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get list of conflicting packages during Docker migration for user
        * Lists all packages that are in a specific user&#39;s namespace, that the requesting user has access to, and that encountered a conflict during Docker migration.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint.
         * @param username The handle for the GitHub user account. 
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListDockerMigrationConflictingPackagesForUser(username: kotlin.String): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/docker/conflicts".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List packages for the authenticated user&#39;s namespace
        * Lists packages owned by the authenticated user within the user&#39;s namespace.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot; (optional)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListPackagesForAuthenticatedUser(packageType: kotlin.String, visibility: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            packageType?.apply { localVariableQuery["package_type"] = listOf("$packageType") }
            visibility?.apply { localVariableQuery["visibility"] = listOf("$visibility") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/user/packages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List packages for an organization
        * Lists packages in an organization readable by the user.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param org The organization name. The name is not case sensitive. 
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot; (optional)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListPackagesForOrganization(org: kotlin.String, packageType: kotlin.String, visibility: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            packageType?.apply { localVariableQuery["package_type"] = listOf("$packageType") }
            visibility?.apply { localVariableQuery["visibility"] = listOf("$visibility") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/orgs/{org}/packages".replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * List packages for a user
        * Lists all packages in a user&#39;s namespace for which the requesting user has access.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; scope to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param username The handle for the GitHub user account. 
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param visibility The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The &#x60;internal&#x60; visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems &#x60;internal&#x60; is synonymous with &#x60;private&#x60;. For the list of GitHub Packages registries that support granular permissions, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot; (optional)
         * @param page The page number of the results to fetch. For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 1)
         * @param perPage The number of results per page (max 100). For more information, see \&quot;[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\&quot; (optional, default to 30)
         * @return kotlin.collections.List<Package>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun packagesListPackagesForUser(username: kotlin.String, packageType: kotlin.String, visibility: kotlin.String?, page: kotlin.Int?, perPage: kotlin.Int?): HttpResponse<kotlin.collections.List<Package>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            packageType?.apply { localVariableQuery["package_type"] = listOf("$packageType") }
            visibility?.apply { localVariableQuery["visibility"] = listOf("$visibility") }
            page?.apply { localVariableQuery["page"] = listOf("$page") }
            perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/users/{username}/packages".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore a package for the authenticated user
        * Restores a package owned by the authenticated user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param token package token (optional)
         * @return void
        */
        open suspend fun packagesRestorePackageForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String, token: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            token?.apply { localVariableQuery["token"] = listOf("$token") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/packages/{package_type}/{package_name}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore a package for an organization
        * Restores an entire package in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @param token package token (optional, default to "push")
         * @return void
        */
        open suspend fun packagesRestorePackageForOrg(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String, token: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            token?.apply { localVariableQuery["token"] = listOf("$token") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/packages/{package_type}/{package_name}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore a package for a user
        * Restores an entire package for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @param token package token (optional)
         * @return void
        */
        open suspend fun packagesRestorePackageForUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String, token: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            token?.apply { localVariableQuery["token"] = listOf("$token") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/{username}/packages/{package_type}/{package_name}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore a package version for the authenticated user
        * Restores a package version owned by the authenticated user.  You can restore a deleted package version under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesRestorePackageVersionForAuthenticatedUser(packageType: kotlin.String, packageName: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore package version for an organization
        * Restores a specific package version in an organization.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  The authenticated user must have admin permissions in the organization to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param org The organization name. The name is not case sensitive. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesRestorePackageVersionForOrg(packageType: kotlin.String, packageName: kotlin.String, org: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "org" + "}", "$org").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Restore package version for a user
        * Restores a specific package version for a user.  You can restore a deleted package under the following conditions:   - The package was deleted within the last 30 days.   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package&#39;s namespace first.  If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the package. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\&quot;  OAuth app tokens and personal access tokens (classic) need the &#x60;read:packages&#x60; and &#x60;write:packages&#x60; scopes to use this endpoint. If the &#x60;package_type&#x60; belongs to a GitHub Packages registry that only supports repository-scoped permissions, the &#x60;repo&#x60; scope is also required. For the list of these registries, see \&quot;[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages).\&quot;
         * @param packageType The type of supported package. Packages in GitHub&#39;s Gradle registry have the type &#x60;maven&#x60;. Docker images pushed to GitHub&#39;s Container registry (&#x60;ghcr.io&#x60;) have the type &#x60;container&#x60;. You can use the type &#x60;docker&#x60; to find images that were pushed to GitHub&#39;s Docker registry (&#x60;docker.pkg.github.com&#x60;), even if these have now been migrated to the Container registry. 
         * @param packageName The name of the package. 
         * @param username The handle for the GitHub user account. 
         * @param packageVersionId Unique identifier of the package version. 
         * @return void
        */
        open suspend fun packagesRestorePackageVersionForUser(packageType: kotlin.String, packageName: kotlin.String, username: kotlin.String, packageVersionId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore".replace("{" + "package_type" + "}", "$packageType").replace("{" + "package_name" + "}", "$packageName").replace("{" + "username" + "}", "$username").replace("{" + "package_version_id" + "}", "$packageVersionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
